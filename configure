#!/bin/sh

# Copyright distributed.net 1998-1999 - All Rights Reserved
# For use in distributed.net projects only.
# Any other distribution or use of this source violates copyright.
#
# $Log: configure,v $
# Revision 1.162  1999/01/11 20:50:00  patrick
# modified aix-pwer-gcc\nCHANGE of DELETECHARS broke AIX compile (only changed POWER targets)
#
# Revision 1.161  1999/01/11 11:44:13  cramer
# *** empty log message ***
#
# Revision 1.160  1999/01/11 05:45:09  pct
# Ultrix modifications for updated client.
#
# Revision 1.159  1999/01/10 11:00:53  cramer
# Added targets for 601/604/860 linux-PPC builds (mt and non-mt.)  Only the
# 604 build appears to work on my 7200/75 (601) machine.
#
# ${BUILDNAME} is no long striped, but ${EXENAME} (rc5des) is.
#
# Revision 1.158  1999/01/08 10:02:24  chrisb
# removed OLDRESOLVE from riscos
#
# Revision 1.157  1999/01/08 08:07:12  myshkin
# Added support for PPC 821/860 target. Thanks to Cort Dougan
#   (cort@persephone.cs.nmt.edu) for the gcc command-line arguments.
#
# Revision 1.156  1999/01/08 07:25:08  cramer
# Added Solaris/Sparc/non-mt target
#
# Revision 1.155  1999/01/06 21:37:24  cramer
# Changes sparc-solaris targets to TARGET_CC="gcc" to avoid g++ stupidly
# linking in libs that it doesn't need.
#
# Revision 1.154  1999/01/06 07:32:02  cramer
# Fixed configure for sparc-linux (oops)
#
# Revision 1.153  1999/01/05 08:18:06  cramer
# A pack of wild dogs rampaged through configure... I cleaned up after them :)
# (If anything is borked, it's my fault.  There may be a few oops' in there
#  but it shouldn't be anything major... missing or misplaced '\'...)
#
# Revision 1.152  1999/01/02 09:49:24  cramer
# Updated sparc-linux target and added sparc-linux-mt target (uses gcc)
#
# Revision 1.151  1999/01/01 02:45:14  cramer
# Part 1 of 1999 Copyright updates...
#
# Revision 1.150  1999/01/01 01:16:45  silby
# Added dctistrg.cpp
#
# Revision 1.149  1998/12/30 07:46:57  cramer
# removed a redundant 'rm' from distclean
#
# Revision 1.148  1998/12/29 20:59:01  silby
# Removed guistuff.cpp
#
# Revision 1.147  1998/12/28 23:09:48  cramer
# More tweaks to configure (ok, so I'm bored)
#
# Revision 1.146  1998/12/28 21:37:53  cramer
# Misc. cleanups for the disappearing RC5CORECOPY junk and minor stuff to
# get a solaris client to build.
#
# Revision 1.145  1998/12/28 18:17:39  cyp
# added clievent.cpp
#
# Revision 1.144  1998/12/23 10:54:37  myshkin
# Added code to _GetRawPPCIdentification to read /proc/cpuinfo on linux-ppc.
# Added *ppc-gcc272 entry to configure (until I successfully upgrade to egcs).
#
# Revision 1.143  1998/12/22 15:41:26  jcmichot
# QNX changes
#
# Revision 1.143  1998/12/21 16:18:23  jcmichot
# Add qnx4 support.
#
# Revision 1.142  1998/12/22 02:38:39  snake
# EPROTO doesn't exist on some systems
#
# Revision 1.141  1998/12/14 23:24:39  remi
# Minor fixes in the x86 linux entries.
#
# Revision 1.140  1998/12/14 12:55:36  cyp
# Added kwan4/slice to serve as the third integer DES core on x86 platforms
# to take up the slack for >2 threads. Slice is slower than Bryd, but better
# than nothing.
#
# Revision 1.139  1998/12/14 10:26:56  snake
# fixes for OpenBSD sparc
#
# Revision 1.138  1998/12/14 09:38:58  snake
# Re-integrated non-nasm x86 cores, cause nasm doesn't support all x86 
# platforms. Sorry, no bye-bye to .cpp cores. Moved RC5X86_SRCS to 
# NASM_RC5X86_SRCS and corrected other targets.
#
# Revision 1.137  1998/12/10 01:21:21  silby
# Thanks for finding the missing ", remi. :)
#
# Revision 1.136  1998/12/10 00:24:57  silby
# Here are the nasm x86 cores, folks.  Bye bye .cpp!
#
# Revision 1.135  1998/12/09 09:43:33  chrisb
# Various mods to help RISC OS building. Changed definition of DELETECHARS.
#
# Revision 1.134  1998/12/09 02:55:32  foxyloxy
# More irix tweaks/clean up. Nothing worth specifically noting here.
#
# Revision 1.133  1998/12/05 19:45:21  daa
# fic for sun3 - rc5/   added to path to crunch_sun68k
#
# Revision 1.132  1998/12/01 22:29:28  silby
# Recommitted.
#
# Revision 1.133  1998/11/29 14:40:19  cyp
# Added SMC support to x86-linux-gcc
#
# Revision 1.132  1998/11/28 17:49:32  remi
# Integration of the 386/486 self-modifying core.
# To use this core on your platform :
# * add -DSMC to TARGET_CFLAGS
# * change TARGET_LDFLAGS to let the program write to its own text
#   segment.
# * add rc5/rc5-486-smc-rg.cpp to TARGET_ADDSRCS
#
# Revision 1.131  1998/11/26 16:14:26  cyp
# New module: checkpt.cpp
#
# Revision 1.130  1998/11/25 05:53:21  dicamillo
# Update for BeOS R4 for Intel.  Added x86-beos target.  Also added the
# variable DELETECHARS for the argument of "tr", since since the argument
# needs to be changed for the BeOS.
#
# Revision 1.129  1998/11/22 15:19:22  cyp
# Removed cliconfig.cpp; Added confopt.cpp, confmenu.cpp, confrwv.cpp
#
# Revision 1.128  1998/11/16 20:09:49  foxyloxy
# egcs now allows the existence of a mips-gcc-64 target! Whee!
#
# Revision 1.127  1998/11/16 16:21:48  remi
# sparc-linux-mt-egcs now use deseval-meggs2-2.cpp instead of deseval-meggs3.cpp.
#
# Revision 1.126  1998/11/15 06:31:28  remi
# Added the missing RC5CORECOPY to power-gcc target.
#
# Revision 1.125  1998/11/13 06:13:46  silby
# Made freebsd targets static
#
# Revision 1.124  1998/11/12 22:58:34  remi
# Reworked a bit AIX ppc & power defines, based on Patrick Hildenbrand
# <patrick@de.ibm.com> advices.
#
# Revision 1.123  1998/11/12 03:18:24  silby
# Fixed freebsd build targets.
#
# Revision 1.122  1998/11/11 19:08:19  remi
# Simplified $OPTS_GCC272
#
# Revision 1.121  1998/11/11 16:39:02  remi
# Sorted out x86-linux entries.
# Created new $OPTS_GCC272 as I don't think -fno-exceptions is a gcc
# 2.7.2.x valid option.
#
# Revision 1.120  1998/11/11 05:26:55  cramer
# Various minor fixes...
#
# Revision 1.119  1998/11/10 10:35:31  jlawson
# moved location of the parisc rc5 core files into the rc5 directory
#
# Revision 1.118  1998/11/10 09:18:09  silby
# Added alpha-linux target, should use axp-bmeyer core.
#
# Revision 1.117  1998/11/09 09:03:42  remi
# sparc-linux-mt-egcs is now -static, 'cause the stock RH 5.1 glibc2 is
# not thread friendly.
#
# Revision 1.116  1998/11/08 21:35:42  silby
# Removed second processor source from freebsd-elf nonmt build.
#
# Revision 1.115  1998/11/08 18:50:58  cyp
# Unix platforms no longer require curses.
#
# Revision 1.114  1998/11/08 08:27:10  dbaker
# freebsd elf
#
# Revision 1.113  1998/11/06 06:58:02  silby
# Added additional library to freebsd non_mt target.
#
# Revision 1.112  1998/11/04 05:24:31  dbaker
# nasm elf flags for x86-freebsd-elf target
#
# Revision 1.111  1998/10/31 22:11:23  silby
# Fixed nasm options for freebsd non-elf
#
# Revision 1.110  1998/10/30 04:40:01  foxyloxy
#
# More MIPS cleanup.
#
# Revision 1.109  1998/10/30 00:09:48  foxyloxy
#
# Start SGI clean up so it (make rc5des) will work on machines
# other than my wacky Origin.
#
# Revision 1.108  1998/10/19 07:04:46  dbaker
# freebsd elf target
#
# Revision 1.107  1998/10/10 11:43:30  cyp
# Added modereq.cpp
#
# Revision 1.106  1998/10/07 17:39:34  snake
# added new entry for BSD/OS 4.0 with ELF support, thus MMX support
#
# Revision 1.105  1998/10/06 13:19:40  remi
# Added -D__showids__ to sparc-linux-mt-egcs entry.
#
# Revision 1.104  1998/10/03 23:43:44  remi
# Added -DMMX_RC5 to all entries with the MMX RC5 core.
#
# Revision 1.103  1998/10/03 05:49:17  cyp
# Added console.cpp - do Linux et al really need to link curses just to
# figure out the terminal height for a function thats never (or rarely) used?
#
# Revision 1.102  1998/09/30 22:48:01  remi
# Added a new x86-linux-glibc2 entry.
#
# Revision 1.101  1998/09/30 08:12:27  snake
#
# Removed NASM stuff for BSD/OS, nasm does not support the a.out format of
# BSD/OS.
#
# Revision 1.100  1998/09/30 07:41:01  snake
#
# BSD/OS also needs <errno.h>, maybe we should include it for all BSD like OS's
#
# Revision 1.99  1998/09/29 08:00:41  remi
# Added a new Sparc-Linux entry.
#
# Revision 1.98  1998/09/28 04:41:20  cyp
# new kids on the block: clirun, pollsys, probman, bench, probfill, setprio
#
# Revision 1.97  1998/09/25 11:30:46  chrisb
# Added stuff to support 3 cores in the ARM clients.
#
# Revision 1.96  1998/09/25 04:25:54  pct
# Added a configuration for Dec Ultrix MIPS processor based machines.
#
# Revision 1.95  1998/09/08 21:36:45  silby
# Added guistuff to the tree - now all GUIs can hook at once place, so that the common tree doesn't become a mess.
#
# Revision 1.94  1998/09/03 15:30:46  cyp
# configure now appends the appropriate .h filenames to .cpp dependancies.
# 'make clean' now also builds a new Makefile.
#
# Revision 1.93  1998/08/30 11:54:15  remi
# Another tweaking in the x86-linux entries : deleted desultra entries,
# added some libc5 specific entries to compile a libc5 binary on a glibc2
# system.
#
# Revision 1.92  1998/08/28 22:32:30  cyp
# Added support for selftest.cpp and cmdline.cpp
#
# Revision 1.91  1998/08/25 00:56:39  cyp
# netinit.cpp is now standalone (was previously #included from network.cpp)
#
# Revision 1.90  1998/08/22 08:16:39  silby
# changed opts_egcs from -f-no-handle-exceptions to -f-no-exceptions to make egcs happy.
#
# Revision 1.89  1998/08/21 23:46:52  cyruspatel
# Spun off Client::SelectCore() from cliconfig.cpp to selcore.cpp
#
# Revision 1.88  1998/08/20 20:14:46  cyruspatel
# Undid changes made in 1.84: -fno-handle-exceptions is back.
# (also PIPELINE_COUNT hack has been fixed at source level).
#
# Revision 1.87  1998/08/20 03:37:18  silby
# Added NASM includes to all x86 makefiles.
#
# Revision 1.86  1998/08/20 02:37:08  silby
# Fixed configure, now works properly with NASM rc5 mmx cores.
#
# Revision 1.85  1998/08/20 01:52:29  silby
# Adddition of NASM to configure
#
# Revision 1.84  1998/08/19 01:31:05  silby
# Cazatnged -fno-handle-exceptions to -fno-exceptions, since GCC told me that
# was what to do. <g> Also, removed -DPIPELINE_COUNT for linux x85 builds - 
# it's now a variable for x86.
#
# Revision 1.83  1998/08/10 22:36:53  cyruspatel
# Added support for triggers.cpp and buffupd.cpp
#
# Revision 1.82  1998/08/05 16:42:12  cberry
# ARM clients now define PIPELINE_COUNT=2
#
# Revision 1.81  1998/08/02 16:17:15  cyruspatel
# Completed support for logging.
#
# Revision 1.80  1998/08/02 03:22:02  silby
# Added logging.cpp as a default source file.
#
# Revision 1.79  1998/07/16 21:47:52  nordquist
# More DYNIX port changes.
#
# Revision 1.78  1998/07/16 20:11:26  nordquist
# Configuration for DYNIX.  Note that testplat needs the LDFLAGS to
# compile properly.
#
# Revision 1.77  1998/07/16 17:44:16  nordquist
# Make sure static-link options are passed to the HP-UX CC linker.
#
# Revision 1.76  1998/07/15 06:23:22  cramer
# added -fno-handle-exceptions for gcc targets.  That should work for any gcc.
# Those that support the new naming (-fno-exceptions) will emit a warning
# and continue processing.
#
# Revision 1.75  1998/07/12 16:21:42  cyruspatel
# Removed -fno-exceptions. This apparently does not work with an older gcc.
#
# Revision 1.74  1998/07/11 01:54:53  cyruspatel
# Added -fno-exceptions to gcc option list. (Checked with Bovine)
#
# Revision 1.73  1998/07/10 18:45:00  nordquist
# Fixed rc5stub.cpp handling for HP-UX (generalized RC5CORECOPY that can
# come from any subdirectory, not just rc5).
#
# Revision 1.72  1998/07/10 10:19:20  remi
# Added special targets for cramer's non-standard EGCS installation.
# There is now 15 targets for x86-linux. Is there anyone around here
# who want to put their own things in Linux-x86 entries ? After all, there
# is no size limit on shell scripts ...
#
# Revision 1.71  1998/07/10 03:50:33  cramer
# Changed gcc back to egcs for x86-linux*-egcs.
# gcc is gcc; egcs is egcs.  NEVER ASSUME THE TWO ARE THE SAME.
# (Read that again.  GCC is not always EGCS.  If you want to build an
# egcs version, then it should actually use egcs -- or am I just nuts.)
#
# Revision 1.70  1998/07/09 18:40:08  remi
# Reverted most to the previous changes. If you want to compile x86 linux
# clients using GCC instead of EGCS, please use the *-gcc targets, not the
# *-egcs ones. Removed -fno-inline-functions from EGCS options, -O2 does 
# not inline functions, -O3 and up does.
#
# Revision 1.69  1998/07/09 07:23:32  cramer
# Added -fno-inline-functions (on by default) to OPTS_GCC and OPTS_EGCS.
# This is required to get the MMX des assembly code to build.  (multiple
# labels). Changed gcc to egcs for the x86-linux egcs builds (never assume 
# gcc is egcs.)
#
# Revision 1.68  1998/07/09 04:26:17  nordquist
# Fixes for OPTS_XLC_PPC* (AIX 4.x with xlC compiler) and OPTS_CC_HPUX
# (HP-UX with CC compiler). Brent J. Nordquist <bjn@visi.com>
#
# Revision 1.67  1998/07/08 23:34:37  remi
# Added the MMX bitslicer to all x86 targets. Cleared an obvious error in
# DESULTRA_SRCS_C (who has an editor which can't deal with >250 chars lines ?)
#
# Revision 1.66  1998/07/07 21:54:52  cyruspatel
# client.h has been split into client.h and baseincs.h
#
# Revision 1.65  1998/07/07 07:27:44  jlawson
# added -static to link options for alpha-gcc
#
# Revision 1.64  1998/07/05 13:08:50  cyruspatel
# Created new pathwork.cpp
#
# Revision 1.63  1998/07/02 05:04:40  daa
# add ;; for hpux m68k entry
#
# Revision 1.62  1998/07/01 09:01:39  daa
# add hpux-m68k
#
# Revision 1.61  1998/06/27 21:32:51  jlawson
# added -lncurses to alpha-gcc and alpha-gcc-mt builds
#
# Revision 1.60  1998/06/27 21:17:22  jlawson
# Made only the first match from the grep for the platform/os identifier
# get kept by adding head -1
#
# Revision 1.59  1998/06/27 12:01:10  friedbait
# switched os390 from SLICE_SRCS4 to MEGGS_SLICE_SRCS, the old setting
# didn't compile anymore and didn't have time to figure out why.
#
# Revision 1.58  1998/06/26 07:20:26  myshkin
# Added -lncurses for the ppc-gcc target, per remi's recommendation.
#
# Revision 1.57  1998/06/25 21:29:34  remi
# Switched to -lncurses for x86 Linux targets.
# Fixed CFLAGS for the Ultra.
#
# Revision 1.56  1998/06/25 20:57:05  foxyloxy
# IRIX5's lack of usleep() rectified temporarily with sleep()... will change
# to nanosleep() soon. (sleepdef.h) -MIPS4 changed to -mips4 (configure)
#
# Revision 1.55  1998/06/25 19:38:35  foxyloxy
# mips-cc-64 and mips-gcc-irix5-crunch targets added; CCFLAGS tweaked for
# mips targets; "cp -f ..." changed to "rm -f ...; cp ..." for irix5 compat.
#
# Revision 1.54  1998/06/24 16:35:18  remi
# CFLAGS tweaking for the Ultra client. Should give ~4.1 Mkeys/s on a
# 167 Mhz Ultra-1.
#
# Revision 1.53  1998/06/24 11:00:43  cberry
# Added -lncurses to arm-linux
#
# Revision 1.52  1998/06/24 08:58:59  kbracey
# Defined __showids__ for RISC OS
#
# Revision 1.51  1998/06/23 21:58:48  remi
# Use only two x86 DES cores (P5 & PPro) when not multithreaded.
#
# Revision 1.50  1998/06/23 20:46:51  remi
# -lcurses should go to TARGET_LIBS, not to TARGET_LDFLAGS.
# Enabled __showids__ for Linux targets.
#
# Revision 1.49  1998/06/23 20:37:01  remi
# *** empty log message ***
#
# Revision 1.48  1998/06/23 09:36:23  remi
# Added -lcurses to x86-linux entries. Other *nixes porters may want to do the
# same, see "common/disphelp.cpp".
#
# Revision 1.47  1998/06/21 17:10:16  cyruspatel
# Fixed some NetWare smp problems. Merged duplicate numcpu validation code
# in ::ReadConfig()/::ValidateConfig() into ::ValidateProcessorCount() and
# spun that off, together with what used to be ::x86id() or ::ArmId(), into
# cpucheck.cpp. Adjusted and cleaned up client.h accordingly.
#
# Revision 1.46  1998/06/17 21:31:10  remi
# Renamed p?bdespro.s to p?bdespro.S
#
# Revision 1.45  1998/06/16 22:21:26  silby
# added des/p1bdespro.s des/p2bdespro.s to configure for all bryddes using oses.
#
# Revision 1.44  1998/06/16 21:59:26  silby
# Added p1bdespro.s and p2bdespro.s into configure for x86 linux
#
# Revision 1.43  1998/06/16 09:01:46  kbracey
# Another attempt to fix ident rule in a way that works for everyone.
#
# Revision 1.42  1998/06/16 06:27:33  remi
# - Integrated some patches in the UltraSparc DES code.
# - Cleaned-up C++ style comments in the UltraSparc DES code.
# - Replaced "rm `find ..`" by "find . -name ..." in superclean.
#
# Revision 1.41  1998/06/15 20:57:49  remi
# Fixed \n espace sequence in ident: rule.
#
# Revision 1.40  1998/06/15 10:11:10  kbracey
# Fixed escaping and EXENAME in ident rule.
#
# Revision 1.39  1998/06/15 04:38:32  remi
# Added -fno-exceptions to EGCS options : ~200 KB less on the final executable.
#
# Revision 1.38  1998/06/15 02:44:26  djones
# First build of UltraSPARC 64-bit/VIS DES client:
# - many configure file tweaks: split up C++, ASM and C files; make "gcc" the
#   compiler.
# - "tr" on SunOS 4.1.4 goes into endless loop when faced with "..-"; change
#   to "..\-".
# - Enable generation of whack16()
#
# Revision 1.37  1998/06/15 00:42:03  skand
# link NetBSD/alpha statically
#
# Revision 1.36  1998/06/15 00:11:17  skand
# For some reason, NetBSD/alpha wants -ltermcap...
#
# Revision 1.35  1998/06/14 15:14:17  remi
# Line-up longer file names in 'make ident'.
#
# Revision 1.34  1998/06/14 14:01:44  remi
# UltraSparc assembly DES bitslicer integration.
# -Added sample sparc-solaris-gcc-crunch-asmslice-mt.
# -Added sample x86-linux-desultra-egcs-debug for debugging
# this code under x86.
#
# Revision 1.33  1998/06/14 10:15:17  skand
# Use gcc/g++ -c when possible to assemble .S files.  Other systems
# than bsdi/NetBSD might need tweaking
#
# Revision 1.32  1998/06/14 08:45:34  friedbait
# 'ident' target added, builds a formatted list of a 'bill of material' of the
# rc5des binary executable.
#
# Revision 1.31  1998/06/13 10:34:56  remi
# Added handy x86-linux-egcs-debug target.
# Removed unused x86-linux-mt-slice-meggs-gcc target.
#
# Revision 1.30  1998/06/13 01:01:17  timc
# SparcBSD changes from Ralf Gebhart <gebhart@snake.de>
#
# Revision 1.29  1998/06/11 14:29:09  cberry
# changes to allow two DES cores to be selected for different ARM variants.
#
# Revision 1.28  1998/06/10 22:50:12  timc
# Robert Au added for PPC targets
#
# Revision 1.27  1998/06/09 22:21:56  remi
# Added testplat to the 'superclean' list
#
# Revision 1.26  1998/06/09 20:44:18  friedbait
# -Icommon -Irc5 -Ides added to OS/390 options
#
# Revision 1.25  1998/06/09 18:52:40  jlawson
# renamed SLICE_SRCS to KWAN_SLICE_SRCS.  clarified naming of some
# linux-x86 build targets.
#
# Revision 1.24  1998/06/09 10:46:27  cberry
# initialise TARGET_ALLCCOBJS and TARGET_ALLASOBJS to be empty.
#
# Revision 1.23  1998/06/09 09:50:40  daa
# add 2 new files in common/ disphelp.cpp and threadcd.cpp
#
# Revision 1.22  1998/06/08 19:31:49  friedbait
# Reverted the changes to copy the 'stubs' to ./common instead of ./rc5.
# Per Jeff's suggestion we achieve the same effect with appropriate '-I'
# compile options.
#
# Revision 1.21  1998/06/08 14:38:27  kbracey
# Disabled stack-limit checks on RISC OS
#
# Revision 1.20  1998/06/08 11:07:53  kbracey
# Added -DCOMPAT_INET4 back to RISC OS C flags so it works with Internet 4
# and FreeNet stack.
#
# Revision 1.19  1998/06/05 17:39:33  bovine
# generated makefiles list cpu, os, and intsizes in comments.
#
# Revision 1.18  1998/06/05 17:34:34  bovine
# added gcc-alpha-mt configure target.  cleaned up unused buffer in cliconfig's writecontestprefix
#
# Revision 1.17  1998/06/01 21:49:05  friedbait
# added '-DKWAN' for OS/390,
# changed the copy command for the RC5CORECOPY platforms such that
# the stub no longer goes to './rc5' but to './common' instead
#
# Revision 1.16  1998/06/01 20:29:48  remi
# cleanup : changed ASM_P6, ASM_P6, ASM_6x86, etc ... to ASM_X86
#
# Revision 1.15  1998/06/01 17:39:26  friedbait
# changed the 'find' command insertion into the superclean target.
# The backquotes needed to be escaped with backslashes. Also, find's
# '-print' command doesn't support format specifications, only '-printf'
# does, therefore changed -print to -printf too.
#
#

echo ""
echo "RC5DES client makefile generator"
echo "originally by Jeff Lawson for distributed.net"
echo "see http://www.distributed.net/"
echo ""

if [ -z "$1" ]; then
  echo "No platform specified on command line.";
  echo "Run with 'list' as an argument to see available platforms."
  exit 1
fi


#####################################################################
# Note to people making changes..  Do not put spaces around the '=' #
# signs in the variable definitions below.  Some sh implementations #
# will interpret such lines as statements rather than assignments.  #
#####################################################################


#
# Common compiler options
#
OPTS_GCC='-fcaller-saves -fcse-follow-jumps -fcse-skip-blocks \
	  -fexpensive-optimizations -fomit-frame-pointer \
	  -frerun-cse-after-loop -fstrength-reduce -fthread-jumps \
	  -funroll-loops -fno-inline-functions -fno-handle-exceptions \
	  -Wall -Icommon -Irc5 -Ides -Iplatforms'

OPTS_GCC272='-fomit-frame-pointer -fno-inline-functions \
	     -fno-handle-exceptions -fno-rtti \
	     -Wall -Icommon -Irc5 -Ides -Iplatforms'

OPTS_XLC3='-O3 -qansialias -qlibansi'

OPTS_EGCS='-O2 -fstrict-aliasing -fno-exceptions -fomit-frame-pointer \
	   -Wall -Icommon -Irc5 -Ides -Iplatforms'

#OPTS_EGCS='-O2 -fno-exceptions -fomit-frame-pointer \
#	   -Wall -Icommon -Irc5 -Ides -Iplatforms'

#
# Common platform compiler options
#

#-- Sparc

OPTS_CC_SPARC='-fast -xO4 -xtarget=ultra1/140 -DASM_SPARC'

# (sparc/v7 [SS1/2/IPX] gcc)
OPTS_GCC_SPARC1="$OPTS_GCC -O6 -mcypress -DASM_SPARC"
OPTS_GCC272_SPARC1="$OPTS_GCC272 -O6 -mcypress -DASM_SPARC"

# (sparc/v8 [SS5+]      gcc)
OPTS_GCC_SPARC="$OPTS_GCC -O6 -msupersparc -DASM_SPARC"
OPTS_GCC272_SPARC="$OPTS_GCC272 -O6 -msupersparc -DASM_SPARC"

# (sparc/v9 [Ultra]     gcc)
OPTS_GCC_ULTRA="$OPTS_GCC -O6 -msupersparc -DASM_SPARC"
OPTS_GCC272_ULTRA="$OPTS_GCC272 -O6 -msupersparc -DASM_SPARC"
OPTS_GAS_ULTRA="-Av9a"

# (sparc/v8 [SS5+]     egcs)
OPTS_EGCS_NONULTRA_SPARC="$OPTS_EGCS -O6 -mtune=supersparc -DASM_SPARC"

#-- SUN 68k

OPTS_GCC_SUN68K="$OPTS_GCC -O2 -DASM_68K -D_SUN68K_"

#-- MIPS

OPTS_CC_MIPS='-O2 -xansi -DASM_MIPS -Icommon -Ides -Irc5'
OPTS_GCC_MIPS="$OPTS_GCC -O6 -DASM_MIPS"
OPTS_EGCS_MIPS="$OPTS_EGCS -Os -DASM_MIPS" 

#-- Alpha

OPTS_CC_ALPHA_EV4='-O4 -tune ev4 -inline all'
OPTS_CC_ALPHA_EV5='-O4 -tune ev5 -inline all'
OPTS_CC_ALPHA='-O4 -fast -arch ev56 -tune ev56 -inline all -Icommon -Ides -Irc5'

OPTS_GCC_ALPHA="$OPTS_GCC -O6 -DASM_ALPHA -static"

#-- HPUX

OPTS_CC_HPUX="$LDFLAGS_CC_HPUX +a1 +O3 -D_HPUX -DASM_HPPA -Icommon -Ides -Irc5"
LDFLAGS_CC_HPUX='+A +DA2.0'

OPTS_GCC_HPUX="$OPTS_GCC -O6 -DASM_HPPA -static"
OPTS_GCC_HPUX_M68K="$OPTS_GCC -D_HPUX_M68K -static"

#-- DGUX

OPTS_GCC_DGUX="$OPTS_GCC -O6 -D_DGUX -DPIPELINE_COUNT=2 \
	       -DCPU_ID=CPU_88K -DOS_ID=OS_DGUX"

#-- PPC

OPTS_GCC_PPC601="$OPTS_GCC -O6 -DASM_PPC -mcpu=601"
OPTS_GCC_PPC="$OPTS_GCC -O6 -DASM_PPC -mcpu=604"
OPTS_GCC_PPC860="$OPTS_GCC -O6 -DASM_PPC -mcpu=860 -msoft-float"
OPTS_GCC272_PPC="$OPTS_GCC272 -O6 -DASM_PPC -mcpu=604"
OPTS_GCC272_PPC860="$OPTS_GCC272 -O6 -DASM_PPC -mcpu=860 -msoft-float"
OPTS_GCC_POWER="$OPTS_GCC -O6 -DASM_POWER -mcpu=power"

OPTS_EGCS_PPC601="$OPTS_EGCS -O6 -DASM_PPC -mcpu=601"
OPTS_EGCS_PPC604="$OPTS_EGCS -O6 -DASM_PPC -mcpu=604"
OPTS_EGCS_PPC860="$OPTS_EGCS -O6 -DASM_PPC -mcpu=860 -msoft-float"
OPTS_EGCS_POWER="$OPTS_EGCS -O6 -DASM_POWER -mcpu=power"

OPTS_XLC_PPC601="$OPTS_XLC -qarch=ppc -qtune=601 -D_AIX -D_ARCH_PPC -Icommon"
OPTS_XLC_PPC="$OPTS_XLC -qarch=ppc -qtune=604 -D_AIX -D_ARCH_PPC -Icommon"
OPTS_XLC_POWER="$OPTS_XLC -qarch=pwr -qtune=pwr -D_AIX -D_ARCH_PWR"
OPTS_XLC_POWER2="$OPTS_XLC -qarch=pwr2 -qtune=pwr2 -D_AIX -D_ARCH_PWR2"

OPTS_XLC3_PPC601="$OPTS_XLC3 -qarch=ppc -qtune=601 -D_AIX -D_ARCH_PPC"
OPTS_XLC3_POWER="$OPTS_XLC3 -qarch=pwr -qtune=pwr -D_AIX -D_ARCH_PWR"

#-- X86

OPTS_GCC_X86="$OPTS_GCC -O6 -m486 -DASM_X86 -DPIPELINE_COUNT=2"
OPTS_GCC272_X86="$OPTS_GCC272 -O6 -m486 -DASM_X86 -DPIPELINE_COUNT=2"

OPTS_EGCS_X86="$OPTS_EGCS -mcpu=pentium -DASM_X86 -DPIPELINE_COUNT=2"

#-- DYNIX

OPTS_EPC_DYNIX="-relax -D_SEQUENT_ -Icommon -Ides -Irc5"

OPTS_GCC_DYNIX="-D_SEQUENT_ -Icommon -Ides -Irc5"

#-- NeXT

OPTS_GCC_M68K="$OPTS_GCC -m68040 -DASM_68K"
OPTS_GAS_M68K="-v -V --register-prefix-optional -m68040"

OPTS_GCC_M68030K="$OPTS_GCC -m68030 -DASM_68K"
OPTS_GAS_M68030K="-v -V --register-prefix-optional -m68030"

OPTS_NEXT_M68K="$OPTS_GCC -O6 -m68040 -DASM_68K"
OPTS_NEXT_SPARC="$OPTS_GCC -O6 -DASM_SPARC -D_OLD_NEXT_"
OPTS_NEXT_HPPA="$OPTS_GCC -O6 -DASM_HPPA -D_OLD_NEXT_"

#-- ARM

OPTS_GCC_ARM="$OPTS_GCC $OPT_FLAGS -DARM"

#-- OS/390

#-D__STRING_CODE_SET__="ISO8859-1"
OPTS_OS390="-D_ALL_SOURCE -I./common -I./rc5 -I./des"

#-- UltraSparc
#
# See Also: platforms/ultrasparc/s_paramaters.h
#
OPTS_DES_ULTRA_C="-DDES_ULTRA -DINLINE=' ' -DIN_DCTI_CLIENT \
		  -DLOW_WORD_VALID -DMANUAL_REGISTER_ALLOCATION -DBIT_32 \
		  -DKWAN_LOOP_SLICE='unsigned long' -Iplatforms/ultrasparc"
# a bit hairy, isn't it ? ;-)
OPTS_DES_ULTRA_ASM="-DINTSIZES=442 -DASM_SPARC -DIN_DCTI_CLIENT \
		    -DDES_ULTRA -DINLINE=inline -DFULL_64_BIT_VALID -DASM \
		    -DMANUAL_REGISTER_ALLOCATION -DDO_FLOAT_PIPE -DBIT_64 \
		    -DUSE_IDENTICAL_FLOAT_REGISTERS -DUSE_64_BIT_SENTINEL \
		    -DKWAN_LOOP_SLICE='unsigned long' -Iplatforms/ultrasparc \
		    -fstrength-reduce -funroll-loops \
		    -Wall -Icommon -Irc5 -Ides -Iplatforms \
		    -O6 -mv8 -mepilogue -Wa,-xarch=v8plusa -mno-flat"

#-- MMX/DES

OPTS_DES_MMX="-DMMX_BITSLICER -DKWAN -DMEGGS -DBIT_64"

#
# Source C++ files making up the base client code
#
COMMON_SRCS="common/client.cpp \
	     common/problem.cpp \
	     common/autobuff.cpp \
	     common/iniread.cpp \
	     common/network.cpp \
	     common/scram.cpp \
	     common/buffwork.cpp \
	     common/mail.cpp \
	     common/convdes.cpp \
	     common/clicdata.cpp \
	     common/clirate.cpp \
	     common/clisrate.cpp \
	     common/clitime.cpp \
	     common/disphelp.cpp \
	     common/clievent.cpp \
	     common/cpucheck.cpp \
	     common/pathwork.cpp \
	     common/cliident.cpp \
	     common/logstuff.cpp \
	     common/buffupd.cpp \
	     common/triggers.cpp \
	     common/selcore.cpp \
	     common/netinit.cpp \
	     common/cmdline.cpp \
	     common/selftest.cpp \
	     common/dctistrg.cpp \
	     common/bench.cpp \
	     common/probman.cpp \
	     common/clirun.cpp \
	     common/probfill.cpp \
	     common/pollsys.cpp \
	     common/setprio.cpp \
	     common/console.cpp \
	     common/modereq.cpp \
	     common/confmenu.cpp \
	     common/confrwv.cpp \
	     common/confopt.cpp \
	     common/checkpt.cpp"

#
# Source files making up the RC5 core code
#
XLC_LINTILLA_ASMS="rc5/crunch_lintilla.ppcxlc.s \
		   rc5/crunch_allitnil_552.ppcxlc.s"

NASM_RC5X86_SRCS="rc5/nasm/rg486.asm \
		  rc5/nasm/rc5-rgk5.asm \
		  rc5/nasm/brfp5.asm \
		  rc5/nasm/rc5-rgk6.asm \
		  rc5/nasm/rc5-rgp6.asm \
		  rc5/nasm/rg6x86.asm \
		  rc5/nasm/rc5mmx.asm"

RC5X86_SRCS="rc5/rc5-486-rg.cpp \
	     rc5/rc5-6x86-rg.cpp \
	     rc5/rc5p5brf.cpp \
	     rc5/rc5-p6-rg.cpp \
	     rc5/rc5-k5-rg.cpp \
	     rc5/rc5-k6-rg.cpp"

#
# Source files making up the DES core code
#
KWAN_SLICE_SRCS1="des/deseval.cpp des/des-slice.cpp des/sboxes-kwan.cpp"
KWAN_SLICE_SRCS2="des/deseval.cpp des/des-slice.cpp des/sboxes-kwan2.cpp"
KWAN_SLICE_SRCS3="des/deseval.cpp des/des-slice.cpp des/sboxes-kwan3.cpp"
KWAN_SLICE_SRCS4="des/deseval.cpp des/des-slice.cpp des/sboxes-kwan4.cpp"

MEGGS_SLICE_SRCS1="des/deseval-meggs2.cpp des/des-slice-meggs.cpp"
MEGGS_SLICE_SRCS2="des/deseval-meggs3.cpp des/des-slice-meggs.cpp"

DESX86_SRCS="des/des-x86.cpp"
DESMMX_SRCS="des/deseval-meggs3-mmx.cpp \
	     des/sboxes-mmx.cpp \
	     des/des-slice-meggs.cpp"

DESULTRA_SRCS_C="platforms/ultrasparc/des-slice-ultrasparc.cpp \
		 platforms/ultrasparc/simple.c \
		 platforms/ultrasparc/des_ultra_crunch.c \
		 platforms/ultrasparc/kwan_from_to.c \
		 platforms/ultrasparc/do_all.c \
		 platforms/ultrasparc/do_all_fancy.c \
		 platforms/ultrasparc/do_s1.c \
		 platforms/ultrasparc/do_s1_s3.c \
		 platforms/ultrasparc/do_s2.c \
		 platforms/ultrasparc/do_s3.c \
		 platforms/ultrasparc/do_s4.c \
		 platforms/ultrasparc/do_s5.c \
		 platforms/ultrasparc/do_s6.c \
		 platforms/ultrasparc/do_s7.c \
		 platforms/ultrasparc/do_s8.c"
DESULTRA_SRCS_ASM="platforms/ultrasparc/des-slice-ultrasparc.cpp \
		   platforms/ultrasparc/des_ultra_crunch.c"

#
# Define the default compilation options
#
TARGET_CC="g++"
TARGET_CCFLAGS="$OPTS_GCC"
TARGET_LDFLAGS=""
TARGET_LIBS=""
TARGET_AS="gas"
TARGET_NASM="nasm"
TARGET_NASMFLAGS="-i rc5/nasm/ -f elf"
TARGET_ASFLAGS=""
TARGET_STRIP="strip"
TARGET_CP="cp"

TARGET_ADDSRCS=""
TARGET_ADDASMS=""
TARGET_ADDNASMS=""
TARGET_ADDOBJS=""
EXENAME="rc5des"

#
# Define characters to delete to form a safe name
#     [WARNING: this is a GNU-ism]
DELETECHARS="'[:punct:]'"

#
# Determine the platform specific options for this target
#
case "$1" in

###### MIPS based platforms
    *mips-sni-gcc)	   #For MIPS SINIX
	RC5CORECOPY="rc5/mips-crunch.cpp"
	TARGET_CCFLAGS="$OPTS_GCC_MIPS -Dsinix \
			-DPIPELINE_COUNT=2 -DMIPS_CRUNCH=1"
	TARGET_LIBS="-lsocket -lnsl -lc -L/usr/ucblib -lucb"
	;;

    *mips-cc-64)	     # For 64bit MIPS processors
	#  mips-crunch.cpp doesn't yet compile with CC
	RC5CORECOPY="rc5/rc5ansi2-rg2.cpp"
	TARGET_CC="CC"
	TARGET_CCFLAGS="$OPTS_CC_MIPS -O3 -r5000 -IPA -64 -mips4 \
			-DPIPELINE_COUNT=2 -DBIT_64 -DKWAN -DMEGGS"
	TARGET_LDFLAGS="-static -64 -IPA -mips4"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2"
	;;

    *mips5-cc)		# IRIX CC is slower than mips-gcc targets
	#  mips-crunch.cpp doesn't compile with CC
	RC5CORECOPY="rc5/rc5ansi2-rg2.cpp"
	TARGET_CC="CC"
	TARGET_CCFLAGS="$OPTS_CC_MIPS -D_irix5_ \
			-DPIPELINE_COUNT=2 -DBIT_32 -DKWAN -DMEGGS"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2"
	;;

    *mips-cc)		# IRIX CC is slower than mips-gcc targets
	#  mips-crunch.cpp doesn't compile with CC
	RC5CORECOPY="rc5/rc5ansi2-rg2.cpp"
	TARGET_CC="CC"
	TARGET_LDFLAGS="-n32"
	TARGET_CCFLAGS="$OPTS_CC_MIPS -n32 \
			-DMULTITHREAD -DPIPELINE_COUNT=2 \
			-DBIT_32 -DKWAN -DMEGGS "
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2"
	TARGET_LIBS="-lpthread"
	;;

    *mips-gcc-irix5-crunch)	# faster than mips-gcc for IRIX
	RC5CORECOPY="rc5/mips-crunch.cpp"
	TARGET_CCFLAGS="$OPTS_GCC_MIPS -DPIPELINE_COUNT=2 -D_irix5_ \
			-DMIPS_CRUNCH=1 -DBIT_32 -DKWAN -DMEGGS"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2"
	;;

    *mips-egcs-crunch-64)     #needs very recent egcs
	RC5CORECOPY="rc5/mips-crunch.cpp"
	TARGET_CCFLAGS="$OPTS_EGCS_MIPS -mabi=64 \
			-DMULTITHREAD -DPIPELINE_COUNT=2 \
			-DMIPS_CRUNCH=1 -DBIT_64 -DKWAN -DMEGGS"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2"
	TARGET_LIBS="-lpthread"
	;;

    *mips-egcs-crunch)	# faster than mips-gcc for IRIX
	RC5CORECOPY="rc5/mips-crunch.cpp"
	TARGET_CCFLAGS="$OPTS_EGCS_MIPS -mab=n32 \
			-DMULTITHREAD -DPIPELINE_COUNT=2 \
			-DMIPS_CRUNCH=1 -DBIT_32 -DKWAN -DMEGGS"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2"
	TARGET_LIBS="-lpthread"
	;;

    *mips-gcc-ultrix)	# For mips based DEC Ultrix machines
	DELETECHARS="'/.\$\-'"
	RC5CORECOPY="rc5/rc5ansi2-rg.cpp"
	TARGET_CCFLAGS="$OPTS_GCC_MIPS -DPIPELINE_COUNT=2 \
			-DBIT_32 -DKWAN -DMEGGS"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2"
	;;


###### HPUX

    *hpux-CC)
	RC5CORECOPY="rc5/parisc.cpp"
	TARGET_CC="CC"
	TARGET_CCFLAGS="$OPTS_GCC_HPUX -DPIPELINE_COUNT=2 \
			-DBIT_32 -DKWAN -DMEGGS"
	TARGET_ADDSRCS="rc5/parisc.s $MEGGS_SLICE_SRCS2"
	TARGET_LDFLAGS="$LDFLAGS_CC_HPUX"
	;;

    *hpux-gcc)
	RC5CORECOPY="rc5/parisc.cpp"
	TARGET_CCFLAGS="$OPTS_GCC_HPUX -DPIPELINE_COUNT=2 \
			-DBIT_32 -DKWAN -DMEGGS"
	TARGET_ADDSRCS="rc5/parisc.s $MEGGS_SLICE_SRCS2"
	;;


    *hpux-gcc-m68k)
	RC5CORECOPY="rc5/rc5ansi1-b2.cpp"
	TARGET_CCFLAGS="$OPTS_GCC_HPUX_M68K -DPIPELINE_COUNT=1 \
			-DBIT_32 -DKWAN"
	TARGET_LDFLAGS="-static"
	TARGET_AFLAGS="$OPTS_GAS_M68030K"
	TARGET_ADDASMS="rc5/crunch.68k.gcc.s"
	TARGET_ADDSRCS="$SLICE_SRCS3"
	echo $TARGET_CCFLAGS
	;;

###### DGUX (Data General Unix)
    *dgux-gcc)
	RC5CORECOPY="rc5/rc5ansi2-rg.cpp"
	TARGET_CC="/usr/local/bin/g++"
	TARGET_CCFLAGS="$OPTS_GCC_DGUX"
	TARGET_LDFLAGS="-static"
	;;

    *dgux-gcc-mt)
	RC5CORECOPY="rc5/rc5ansi2-rg.cpp"
	TARGET_CC="/usr/local/bin/g++"
	TARGET_CCFLAGS="$OPTS_GCC_DGUX -D_POSIX4A_DRAFT6_SOURCE -DMULTITHREAD"
	TARGET_LIBS="-lthread"
	;;

###### Sparc/UltraSparc or Sun/SunOS/Solaris

    *sparc-openbsd)
	RC5CORECOPY="rc5/rc5ansi2-rg2.cpp"
	TARGET_CCFLAGS="$OPTS_GCC272_NONULTRA_SPARC \
			-DPIPELINE_COUNT=2 -DBIT_32 -DKWAN"
	TARGET_LDFLAGS="-static"
	TARGET_ADDSRCS="$KWAN_SLICE_SRCS3"
	;;

    *sparc-linux)
	RC5CORECOPY="rc5/rc5ansi2-rg.cpp"
	TARGET_CCFLAGS="$OPTS_GCC_SPARC -D__showids__ \
			-DPIPELINE_COUNT=2 \
			-DBIT_32 -DKWAN -DMEGGS"
	TARGET_ADDSRCS="des/deseval-meggs2-2.cpp des/des-slice-meggs.cpp"
	TARGET_LDFLAGS="-static"
	;;

    *sparc-linux-mt)
	RC5CORECOPY="rc5/rc5ansi2-rg.cpp"
	TARGET_CCFLAGS="$OPTS_GCC_SPARC -D__showids__ \
			-DMULTITHREAD -DPIPELINE_COUNT=2 \
			-DBIT_32 -DKWAN -DMEGGS"
	TARGET_ADDSRCS="des/deseval-meggs2-2.cpp des/des-slice-meggs.cpp"
	TARGET_LDFLAGS="-static"
	TARGET_LIBS="-lpthread"
	;;

    *sparc-linux-mt-egcs)
	RC5CORECOPY="rc5/rc5ansi2-rg.cpp"
	TARGET_CCFLAGS="$OPTS_EGCS_NONULTRA_SPARC -fno-inline-functions \
			-D__showids__ \
			-DMULTITHREAD -DPIPELINE_COUNT=2 \
			-DBIT_32 -DKWAN -DMEGGS"
	TARGET_ADDSRCS="des/deseval-meggs2-2.cpp des/des-slice-meggs.cpp"
	TARGET_LDFLAGS="-static"
	TARGET_LIBS="-lpthread"
	;;

    *sparc-cc)
	RC5CORECOPY="rc5/rc5-ultra-crunch.cpp"
	TARGET_CC="cc"
	TARGET_CCFLAGS="$OPTS_CC_SPARC -DPIPELINE_COUNT=1"
	TARGET_LIBS="-lnsl -lsocket"
	;;

    *sunos-gcc-static)	
	# FIX THIS
	DELETECHARS="'[:punct:]'"
	RC5CORECOPY="rc5/rc5ansi2-rg.cpp"
	TARGET_CCFLAGS="$OPTS_GCC_SPARC -DPIPELINE_COUNT=2"
	TARGET_LIBS="-static"
	;;

    *sun3-gcc)
	TARGET_CCFLAGS="$OPTS_GCC_SUN68K -DPIPELINE_COUNT=1 \
			-DBIT_32 -DKWAN -DMEGGS"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2 rc5/crunch.sun68k.gcc.s"
	;;

    *sun2-sunos3-gcc)
	TARGET_CCFLAGS="$OPTS_GCC_SUN68K -D_SUNOS3_ \
			-DPIPELINE_COUNT=1 -DBIT_32 -DKWAN -DMEGGS"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2 rc5/crunch.sun68k.gcc.s"
	;;

    *m68k-linux-gcc)
	TARGET_CFLAGS="$OPTS_GCC_M68K -DPIPELINE_COUNT=1 -DBIT_32 -DKWAN"
	TARGET_AFLAGS="$OPTS_GAS_M68K"
 	TARGET_ADDSRCS="$KWAN_SLICE_SRCS3"
 	TARGET_ADDASMS="crunch.68k.gcc.s"
 	TARGET_LIBS="-static"
	;;

    #####

    *sparc-solaris-gcc-mt)	# slower rc5, slower des
	RC5CORECOPY="rc5/rc5ansi2-rg.cpp"
	TARGET_CC="gcc"
	TARGET_CCFLAGS="$OPTS_GCC_SPARC -Dsolaris \
			-DMULTITHREAD -DPIPELINE_COUNT=2 \
			-DULTRA_CRUNCH=1 -DBIT_32 -DKWAN"
	TARGET_ADDSRCS="$KWAN_SLICE_SRCS3"
	TARGET_LIBS="-lnsl -lsocket -ldl -lpthread"
	;;

    *sparc-solaris-gcc-crunch-mt)    # fastest rc5, slower des
	RC5CORECOPY="rc5/rc5-ultra-crunch.cpp"
	TARGET_CC="gcc"
	TARGET_CCFLAGS="$OPTS_GCC_SPARC -Dsolaris \
			-DMULTITHREAD -DPIPELINE_COUNT=2 \
			-DULTRA_CRUNCH=1 -DBIT_32 -DKWAN"
	TARGET_ADDSRCS="$KWAN_SLICE_SRCS3"
	TARGET_LIBS="-lnsl -lsocket -ldl -lpthread"
	;;

    *sparc-solaris-gcc-crunch-slice)   # fastest rc5 & des for ultra
	RC5CORECOPY="rc5/rc5-ultra-crunch.cpp"
	TARGET_CC="gcc -pipe"
	TARGET_CCFLAGS="$OPTS_GCC_SPARC -Dsolaris \
			-DPIPELINE_COUNT=2 \
			-DULTRA_CRUNCH=1 -DBIT_32 -DKWAN -DMEGGS"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2"
	TARGET_LIBS="-lnsl -lsocket -ldl"
	;;

    *sparc-solaris-gcc-crunch-slice-mt)   # fastest rc5 & des for ultra
	RC5CORECOPY="rc5/rc5-ultra-crunch.cpp"
	TARGET_CC="gcc -pipe"
	TARGET_CCFLAGS="$OPTS_GCC_SPARC -Dsolaris \
			-DMULTITHREAD -DPIPELINE_COUNT=2 \
			-DULTRA_CRUNCH=1 -DBIT_32 -DKWAN -DMEGGS"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2"
	TARGET_LIBS="-lnsl -lsocket -ldl -lpthread"
	;;

    *sparc-solaris-gcc-crunch-asmslice-mt)   # fastest rc5 & VIS DES
	RC5CORECOPY="rc5/rc5-ultra-crunch.cpp"
	TARGET_CC="gcc -pipe"
	TARGET_CCFLAGS="$OPTS_DES_ULTRA_ASM -Dsolaris \
			-DMULTITHREAD -DPIPELINE_COUNT=2 -DULTRA_CRUNCH=1"
	TARGET_ADDSRCS="$DESULTRA_SRCS_ASM"
 	TARGET_ADDASMS="platforms/ultrasparc/simple.handopt.s"
	TARGET_ASFLAGS="$OPTS_GAS_ULTRA"
	TARGET_LIBS="-lnsl -lsocket -ldl -lpthread"
	;;

    #####

    *x86-solaris)
	TARGET_CCFLAGS="$OPTS_GCC_X86 -Dsolaris $OPTS_DES_MMX -DMMX_RC5 \
			-DPIPELINE_COUNT=2"
	TARGET_ADDSRCS="$DESX86_SRCS $DESMMX_SRCS $KWAN_SLICE_SRCS4"
	TARGET_ADDASMS="output/bdeslow.S output/x86ident.S des/p1bdespro.S"
	TARGET_ADDNASMS="$NASM_RC5X86_SRCS"
	TARGET_LIBS="-lnsl -lsocket -ldl"
	;;

    *x86-solaris-mt)
	TARGET_CCFLAGS="$OPTS_GCC_X86 -Dsolaris $OPTS_DES_MMX -DMMX_RC5 \
			-DMULTITHREAD -DPIPELINE_COUNT=2"
	TARGET_ADDSRCS="$DESX86_SRCS $DESMMX_SRCS $KWAN_SLICE_SRCS4"
	TARGET_ADDASMS="output/bdeslow.S output/bbdeslow.S \
			output/x86ident.S \
			des/p1bdespro.S des/p2bdespro.S"
	TARGET_ADDNASMS="$NASM_RC5X86_SRCS"
	TARGET_LIBS="-lnsl -lsocket -ldl -lpthread"
	;;

###### Alpha
    *alpha-cc-ev5-static)
	RC5CORECOPY="rc5/rc5ansi2-bo2.cpp"
	TARGET_CC="cxx"
	TARGET_CCFLAGS="$OPTS_CC_ALPHA_EV5 -DPIPELINE_COUNT=2 \
			-DBIT_64 -DKWAN -DMEGGS"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2"
	TARGET_LIBS="-non_shared"
	;;

    *alpha-cc-ev4-static)
	RC5CORECOPY="rc5/rc5ansi2-bo2.cpp"
	TARGET_CC="cxx"
	TARGET_CCFLAGS="$OPTS_CC_ALPHA_EV4 -DPIPELINE_COUNT=2 \
			-DBIT_64 -DKWAN -DMEGGS"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2"
	TARGET_LIBS="-non_shared"
	;;

    *alpha-cc)
	RC5CORECOPY="rc5/rc5ansi2-bo2.cpp"
	TARGET_CC="cxx"
	TARGET_CCFLAGS="$OPTS_CC_ALPHA -DPIPELINE_COUNT=2 \
			-DBIT_64 -DKWAN -DMEGGS"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2"
	;;

    *alpha-gcc)
	RC5CORECOPY="rc5/rc5ansi1-b2.cpp"
	TARGET_CC="g++"
	TARGET_CCFLAGS="$OPTS_GCC_ALPHA -DPIPELINE_COUNT=1 \
			-DBIT_64 -DKWAN -DMEGGS"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2"
	TARGET_LDFLAGS="-static"
	TARGET_LIBS=""
	;;

    *alpha-gcc-mt)
	RC5CORECOPY="rc5/rc5ansi1-b2.cpp"
	TARGET_CC="g++"
	TARGET_CCFLAGS="$OPTS_GCC_ALPHA \
			-DMULTITHREAD -DPIPELINE_COUNT=1 \
			-DBIT_64 -DKWAN -DMEGGS"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2"
	TARGET_LDFLAGS="-static"
	TARGET_LIBS="-lpthread"
	;;

    *alpha-netbsd)
	RC5CORECOPY="rc5/rc5ansi1-b2.cpp"
	TARGET_CC="g++"
	TARGET_CCFLAGS="$OPTS_GCC_ALPHA -DPIPELINE_COUNT=1 \
			-DBIT_64 -DKWAN -DMEGGS"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2"
	TARGET_LDFLAGS="-static"
	TARGET_LIBS="-ltermcap"
	;;

    *alpha-openbsd)
	RC5CORECOPY="rc5/rc5ansi1-b2.cpp"
	TARGET_CC="g++"
	TARGET_CCFLAGS="$OPTS_GCC_ALPHA -DPIPELINE_COUNT=1 \
			-DBIT_64 -DKWAN -DMEGGS"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2"
	TARGET_LDFLAGS="-static"
	TARGET_LIBS="-ltermcap"
	;;

    *alpha-linux)
	TARGET_AS="g++ -c"
	TARGET_CC="g++"
	TARGET_CCFLAGS="$OPTS_GCC_ALPHA -DPIPELINE_COUNT=2 \
			-DBIT_64 -DKWAN -DMEGGS"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2 \
			rc5/alphaasm/axp-bmeyer.cpp \
			rc5/alphaasm/axp-bmeyer.s"
	TARGET_LDFLAGS="-static"
	;;

###### PowerPC/POWER

  ### generic targets

    *ppc-601-linux-egcs)		# [cramer] PPC 601 target
	TARGET_CC="gcc -pipe -g"
	TARGET_CCFLAGS="$OPTS_EGCS_PPC601 -DPIPELINE_COUNT=1 \
			-DBIT_32 -DMEGGS -DKWAN"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2 \
			rc5/crunch_allitnil_552.ppc.s \
			rc5/crunch_lintilla_296.ppc.s"
	;;

    *ppc-601-linux-mt-egcs)		# [cramer] PPC 601-mt target
	TARGET_CC="gcc -pipe -g"
	TARGET_CCFLAGS="$OPTS_EGCS_PPC601 -DPIPELINE_COUNT=1 \
			-DMULTITHREAD -DBIT_32 -DMEGGS -DKWAN"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2 \
			rc5/crunch_allitnil_552.ppc.s \
			rc5/crunch_lintilla_296.ppc.s"
	TARGET_LIBS="-lpthread"
	;;

    *ppc-604-linux-egcs)		# [cramer] PPC 604 target
	TARGET_CC="gcc -pipe -g"
	TARGET_CCFLAGS="$OPTS_EGCS_PPC604 -DPIPELINE_COUNT=1 \
			-DBIT_32 -DMEGGS -DKWAN"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2 \
			rc5/crunch_allitnil_552.ppc.s \
			rc5/crunch_lintilla_296.ppc.s"
	;;

    *ppc-604-linux-mt-egcs)		# [cramer] PPC 604-mt target
	TARGET_CC="gcc -pipe -g"
	TARGET_CCFLAGS="$OPTS_EGCS_PPC604 -DPIPELINE_COUNT=1 \
			-DMULTITHREAD -DBIT_32 -DMEGGS -DKWAN"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2 \
			rc5/crunch_allitnil_552.ppc.s \
			rc5/crunch_lintilla_296.ppc.s"
	TARGET_LIBS="-lpthread"
	;;

    *ppc-860-linux-egcs)		# [cramer] PPC 860 target
	TARGET_CC="gcc -pipe -g"
	TARGET_CCFLAGS="$OPTS_EGCS_PPC860 -DPIPELINE_COUNT=1 \
			-DBIT_32 -DMEGGS -DKWAN"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2 \
			rc5/crunch_allitnil_552.ppc.s \
			rc5/crunch_lintilla_296.ppc.s"
	;;

    *ppc-860-linux-mt-egcs)		# [cramer] PPC 860-mt target
	TARGET_CC="gcc -pipe -g"
	TARGET_CCFLAGS="$OPTS_EGCS_PPC860 -DPIPELINE_COUNT=1 \
			-DMULTITHREAD -DBIT_32 -DMEGGS -DKWAN"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2 \
			rc5/crunch_allitnil_552.ppc.s \
			rc5/crunch_lintilla_296.ppc.s"
	TARGET_LIBS="-lpthread"
	;;

    *ppc-gcc)		# generic PPC target
	TARGET_CCFLAGS="$OPTS_GCC_PPC -DPIPELINE_COUNT=1 \
			-DBIT_32 -DMEGGS -DKWAN"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2 \
			rc5/crunch_allitnil_552.ppc.s \
			rc5/crunch_lintilla_296.ppc.s"
	;;

    *ppc860-gcc)	# PPC 821/860 target
	TARGET_CCFLAGS="$OPTS_GCC_PPC -DPIPELINE_COUNT=1 \
			-DBIT_32 -DMEGGS -DKWAN"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2 \
			rc5/crunch_allitnil_552.ppc.s \
			rc5/crunch_lintilla_296.ppc.s"
	;;

    *ppc-gcc272)	# generic PPC target, gcc 2.7.2
	TARGET_CCFLAGS="$OPTS_GCC272_PPC -DPIPELINE_COUNT=1 \
			-DBIT_32 -DMEGGS -DKWAN"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2 \
			rc5/crunch_allitnil_552.ppc.s \
			rc5/crunch_lintilla_296.ppc.s"
	;;

    *ppc860-gcc272)	# PPC 821/860 target, gcc 2.7.2
	TARGET_CCFLAGS="$OPTS_GCC272_PPC860 -DPIPELINE_COUNT=1 \
			-DBIT_32 -DMEGGS -DKWAN"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2 \
			rc5/crunch_allitnil_552.ppc.s \
			rc5/crunch_lintilla_296.ppc.s"
	;;

    *power-gcc)	    # generic POWER target
	RC5CORECOPY="rc5/rc5ansi1-rg.cpp"
	TARGET_CCFLAGS="$OPTS_GCC_POWER -DPIPELINE_COUNT=1 \
			-DBIT_32 -DMEGGS -DKWAN"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2"
	;;

  ### AIX PPC targets

    *aix4-ppc-xlc)	 # This is the fastest build for AIX 4.x PPC machines
	TARGET_CC="xlC"
	TARGET_CCFLAGS="$OPTS_XLC_PPC -DPIPELINE_COUNT=1 \
			-DBIT_32 -DMEGGS -DKWAN"
	TARGET_ADDASMS="$XLC_LINTILLA_ASMS"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2"
	TARGET_LIBS="-lCns"
	;;

    *aix4-ppc601-xlc)      # AIX 4.x PPC, 601 chip
	TARGET_CC="xlC"
	TARGET_CCFLAGS="$OPTS_XLC_PPC601 -DPIPELINE_COUNT=1 \
			-DBIT_32 -DMEGGS -DKWAN"
	TARGET_ADDASMS="$XLC_LINTILLA_ASMS"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2"
	TARGET_LIBS="-lCns"
	;;

    *aix32-ppc-xlc)	# AIX 3.2.x PPC
	TARGET_CC="xlC"
	TARGET_CCFLAGS="$OPTS_XLC3_PPC601 -DPIPELINE_COUNT=1 \
			-DBIT_32 -DMEGGS -DKWAN -DNO_STRCASECMP"
	TARGET_ADDASMS="$XLC_LINTILLA_ASMS"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2"
	TARGET_LIBS="-lCns"
	;;

  ### AIX POWER targets
	# classes are buggy with AIX !

    *aix-power-gcc-pipe1)  # AIX POWER with PIPELINE_COUNT=1 (do not use)
        DELETECHARS="'/.\$\-'"
	RC5CORECOPY="rc5/rc5ansi1-rg.cpp"
	TARGET_CCFLAGS="$OPTS_GCC_POWER -D_AIX -DPIPELINE_COUNT=1 \
			-DBIT_32 -DMEGGS -DKWAN"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2"
	;;

    *aix-power-gcc-pipe2)  # AIX POWER with PIPELINE_COUNT=2 (preferred)
        DELETECHARS="'/.\$\-'"
	RC5CORECOPY="rc5/rc5ansi2-rg.cpp"
	TARGET_CCFLAGS="$OPTS_GCC_POWER -D_AIX -DPIPELINE_COUNT=2 \
			-DBIT_32 -DMEGGS -DKWAN"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2"
	;;

###### Intel X86 Linux platforms

  ### Remi's targets

    *x86-linux-libc5-nomt-egcs)	 # [remi] nomt, libc5, static, egcs
	TARGET_AS="i486-pc-linux-gnulibc1-gcc -c"
	TARGET_CC="i486-pc-linux-gnulibc1-gcc"
	TARGET_CCFLAGS="$OPTS_EGCS_X86 $OPTS_DES_MMX -DMMX_RC5 -pipe \
			-D__showids__ -DSMC"
	TARGET_LDFLAGS="-static -Xlinker -omagic"
	TARGET_ADDSRCS="rc5/rc5-486-smc-rg.cpp \
			$DESX86_SRCS $DESMMX_SRCS $KWAN_SLICE_SRCS4"
	TARGET_ADDASMS="des/bdeslow.S platforms/x86ident.S des/p1bdespro.S"
	TARGET_ADDNASMS="$NASM_RC5X86_SRCS"
	TARGET_LIBS=""
	;;

    *x86-linux-aout-nomt-egcs)	 # [remi] nomt, libc4, static, egcs
	TARGET_AS="i486-pc-linux-gnuaout-gcc -c"
	TARGET_CC="i486-pc-linux-gnuaout-gcc"
	TARGET_CCFLAGS="$OPTS_EGCS_X86 $OPTS_DES_MMX -DMMX_RC5 \
			-D__showids__ -DSMC"
	TARGET_LDFLAGS="-static -Xlinker -omagic"
	TARGET_NASMFLAGS="-i rc5/nasm/ -f aout"
	TARGET_ADDSRCS="rc5/rc5-486-smc-rg.cpp \
			$DESX86_SRCS $DESMMX_SRCS $KWAN_SLICE_SRCS4"
	TARGET_ADDASMS="des/bdeslow.S platforms/x86ident.S des/p1bdespro.S"
	TARGET_ADDNASMS="$NASM_RC5X86_SRCS"
	TARGET_LIBS=""
	;;

    *x86-linux-libc5-mt-egcs)	   # [remi] mt, libc5, static, egcs
	TARGET_AS="i486-pc-linux-gnulibc1-gcc -c"
	TARGET_CC="i486-pc-linux-gnulibc1-gcc"
	TARGET_CCFLAGS="$OPTS_EGCS_X86 $OPTS_DES_MMX -DMMX_RC5 \
			-D__showids__ -DSMC -DMULTITHREAD"
	TARGET_LDFLAGS="-static -Xlinker -omagic"
	TARGET_ADDSRCS="rc5/rc5-486-smc-rg.cpp \
			$DESX86_SRCS $DESMMX_SRCS $KWAN_SLICE_SRCS4"
	TARGET_ADDASMS="des/bdeslow.S des/bbdeslow.S \
			platforms/x86ident.S \
			des/p1bdespro.S des/p2bdespro.S"
	TARGET_ADDNASMS="$NASM_RC5X86_SRCS"
	TARGET_LIBS="-lpthread"
	;;

    *x86-linux-glibc2-mt-egcs)	 # [remi] mt, glibc2, static, egcs
	TARGET_AS="g++ -c"
	TARGET_CC="g++"
	TARGET_CCFLAGS="$OPTS_EGCS_X86 $OPTS_DES_MMX -DMMX_RC5 \
			-D__showids__ -DSMC -DMULTITHREAD"
	TARGET_LDFLAGS="-static -Xlinker -omagic"
	TARGET_ADDSRCS="rc5/rc5-486-smc-rg.cpp \
			$DESX86_SRCS $DESMMX_SRCS $KWAN_SLICE_SRCS4"
	TARGET_ADDASMS="des/bdeslow.S des/bbdeslow.S \
			platforms/x86ident.S \
			des/p1bdespro.S des/p2bdespro.S"
	TARGET_ADDNASMS="$NASM_RC5X86_SRCS"
	TARGET_LIBS="-lpthread"
	;;

  ### Cramer's targets

    *x86-linux-egcs-cramer)	    # [cramer] nomt, static, egcs
	TARGET_AS="egcs -c"
	TARGET_CC="egcs"
	TARGET_CCFLAGS="$OPTS_EGCS_X86 $OPTS_DES_MMX -DMMX_RC5 \
			-D__showids__ -DSMC"
	TARGET_LDFLAGS="-static -Xlinker -omagic"
	TARGET_ADDSRCS="rc5/rc5-486-smc-rg.cpp \
			$DESX86_SRCS $DESMMX_SRCS $KWAN_SLICE_SRCS4"
	TARGET_ADDASMS="des/bdeslow.S platforms/x86ident.S des/p1bdespro.S"
	TARGET_ADDNASMS="$NASM_RC5X86_SRCS"
	TARGET_LIBS=""
	;;

    *x86-linux-egcs-debug-cramer)      # [cramer] nomt, static, egcs, debug
	TARGET_AS="egcs -c"
	TARGET_CC="egcs -g"
	TARGET_CCFLAGS="$OPTS_EGCS_X86 $OPTS_DES_MMX -DMMX_RC5 \
			-D__showids__ -DSMC"
	TARGET_LDFLAGS="-static -Xlinker -omagic"
	TARGET_ADDSRCS="rc5/rc5-486-smc-rg.cpp \
			$DESX86_SRCS $DESMMX_SRCS $KWAN_SLICE_SRCS4"
	TARGET_ADDASMS="des/bdeslow.S platforms/x86ident.S des/p1bdespro.S"
	TARGET_ADDNASMS="$NASM_RC5X86_SRCS"
	TARGET_STRIP="touch"
	TARGET_LIBS=""
	;;

    *x86-linux-mt-egcs-cramer)	 # [cramer] mt, static, egcs
	TARGET_AS="egcs -c"
	TARGET_CC="egcs"
	TARGET_CCFLAGS="$OPTS_EGCS_X86 $OPTS_DES_MMX -DMMX_RC5 \
			-D__showids__ -DSMC -DMULTITHREAD"
	TARGET_LDFLAGS="-static -Xlinker -omagic"
	TARGET_ADDSRCS="rc5/rc5-486-smc-rg.cpp \
			$DESX86_SRCS $DESMMX_SRCS $KWAN_SLICE_SRCS4"
	TARGET_ADDASMS="des/bdeslow.S des/bbdeslow.S \
			platforms/x86ident.S \
			des/p1bdespro.S des/p2bdespro.S"
	TARGET_ADDNASMS="$NASM_RC5X86_SRCS"
	TARGET_LIBS="-lpthread"
	;;


  ### Other targets

    *x86-linux-gcc)			# nomt, static, gcc/pipe
	TARGET_AS="gcc -c"
	TARGET_CC="gcc"
	TARGET_CCFLAGS="$OPTS_GCC_X86 $OPTS_DES_MMX -DMMX_RC5 -pipe \
			-D__showids__ -DSMC"
	TARGET_LDFLAGS="-static -Xlinker -omagic"
	TARGET_ADDSRCS="rc5/rc5-486-smc-rg.cpp \
			$DESX86_SRCS $DESMMX_SRCS $KWAN_SLICE_SRCS4"
	TARGET_ADDASMS="des/bdeslow.S platforms/x86ident.S des/p1bdespro.S"
	TARGET_ADDNASMS="$NASM_RC5X86_SRCS"
	TARGET_LIBS=""
	;;

    *x86-linux-gcc-debug)	      # nomt, dynamic, gcc, debug
	TARGET_AS="gcc -c"
	TARGET_CC="gcc -g"
	TARGET_CCFLAGS="$OPTS_GCC_X86 $OPTS_DES_MMX -DMMX_RC5 -D__showids__ \
			-DSMC"
	TARGET_LDFLAGS="-Xlinker -omagic"
	TARGET_ADDSRCS="rc5/rc5-486-smc-rg.cpp \
			$DESX86_SRCS $DESMMX_SRCS $KWAN_SLICE_SRCS4"
	TARGET_ADDASMS="des/bdeslow.S des/bbdeslow.S \
			platforms/x86ident.S \
			des/p1bdespro.S des/p2bdespro.S"
	TARGET_ADDNASMS="$NASM_RC5X86_SRCS"
	TARGET_STRIP="touch"
	TARGET_LIBS=""
	;;

    *x86-linux-mt-gcc)		 # mt, static, gcc
	TARGET_AS="gcc -c"
	TARGET_CCFLAGS="$OPTS_GCC_X86 $OPTS_DES_MMX -DMMX_RC5 -D__showids__ \
			-DMULTITHREAD -DSMC"
	TARGET_LDFLAGS="-static -Xlinker -omagic"
	TARGET_ADDSRCS="rc5/rc5-486-smc-rg.cpp \
			$DESX86_SRCS $DESMMX_SRCS $KWAN_SLICE_SRCS4"
	TARGET_ADDASMS="des/bdeslow.S des/bbdeslow.S \
			platforms/x86ident.S \
			des/p1bdespro.S des/p2bdespro.S"
	TARGET_ADDNASMS="$NASM_RC5X86_SRCS"
	TARGET_LIBS="-lpthread"
	;;

    *x86-linux-mt-slice-kwan-gcc)      # mt, static, gcc, use integer bitslicer
	TARGET_AS="gcc -c"
	TARGET_CCFLAGS="$OPTS_GCC_X86 -DMMX_RC5 -D__showids__ -pipe \
			-DMULTITHREAD -DBIT_32 -DKWAN -DMEGGS -DSMC"
	TARGET_LDFLAGS="-static -Xlinker -omagic"
	TARGET_ADDSRCS="rc5/rc5-486-smc-rg.cpp \
			$DESX86_SRCS $KWAN_SLICE_SRCS4"
	TARGET_ADDASMS="des/bdeslow.S des/bbdeslow.S \
			platforms/x86ident.S \
			des/p1bdespro.S des/p2bdespro.S"
	TARGET_ADDNASMS="$NASM_RC5X86_SRCS"
	TARGET_LIBS="-lpthread"
	;;

    *x86-linux-egcs)		   # nomt, static, egcs
	TARGET_AS="g++ -c"
	TARGET_CC="g++"
	TARGET_CCFLAGS="$OPTS_EGCS_X86 $OPTS_DES_MMX -DMMX_RC5 -D__showids__ \
			-DSMC"
	TARGET_LDFLAGS="-static -Xlinker -omagic"
	TARGET_ADDSRCS="rc5/rc5-486-smc-rg.cpp \
			$DESX86_SRCS $DESMMX_SRCS $KWAN_SLICE_SRCS4"
	TARGET_ADDASMS="des/bdeslow.S platforms/x86ident.S des/p1bdespro.S"
	TARGET_ADDNASMS="$NASM_RC5X86_SRCS"
	TARGET_LIBS=""
	;;

    *x86-linux-egcs-debug)	     # nomt, dynamic, egcs, debug
	TARGET_AS="g++ -c"
	TARGET_CC="g++ -g"
	TARGET_CCFLAGS="$OPTS_EGCS_X86 $OPTS_DES_MMX -DMMX_RC5 -D__showids__ \
			-DSMC"
	TARGET_LDFLAGS="-Xlinker -omagic"
	TARGET_ADDSRCS="rc5/rc5-486-smc-rg.cpp \
			$DESX86_SRCS $DESMMX_SRCS $KWAN_SLICE_SRCS4"
	TARGET_ADDASMS="des/bdeslow.S platforms/x86ident.S des/p1bdespro.S"
	TARGET_ADDNASMS="$NASM_RC5X86_SRCS"
	TARGET_STRIP="touch"
	TARGET_LIBS=""
	;;

    *x86-linux-mt-egcs)		# mt, static, egcs
	TARGET_AS="g++ -c"
	TARGET_CC="g++"
	TARGET_CCFLAGS="$OPTS_EGCS_X86 $OPTS_DES_MMX -DMMX_RC5 -D__showids__ \
			-DMULTITHREAD -DSMC"
	TARGET_LDFLAGS="-static -Xlinker -omagic"
	TARGET_ADDSRCS="rc5/rc5-486-smc-rg.cpp \
			$DESX86_SRCS $DESMMX_SRCS $KWAN_SLICE_SRCS4"
	TARGET_ADDASMS="des/bdeslow.S des/bbdeslow.S \
			platforms/x86ident.S \
			des/p1bdespro.S des/p2bdespro.S"
	TARGET_ADDNASMS="$NASM_RC5X86_SRCS"
	TARGET_LIBS="-lpthread"
	;;

###### Intel X86 FreeBSD/NetBSD/OpenBSD

    *x86-freebsd)
	TARGET_AS="gcc -c"
	TARGET_CCFLAGS="$OPTS_GCC_X86 $OPTS_DES_MMX -DMMX_RC5 \
			-DPIPELINE_COUNT=2"
	TARGET_LDFLAGS="-static"
	TARGET_ADDSRCS="$DESX86_SRCS $DESMMX_SRCS $KWAN_SLICE_SRCS4"
	TARGET_ADDASMS="des/bdeslow.S platforms/x86ident.S des/p1bdespro.S"
	TARGET_LIBS="-lc_r"
	TARGET_ADDNASMS="$NASM_RC5X86_SRCS"
	TARGET_NASMFLAGS="-i rc5/nasm/ -f aoutb"
	;;

    *x86-freebsd-mt)
	TARGET_AS="gcc -c"
	TARGET_CCFLAGS="$OPTS_GCC_X86 $OPTS_DES_MMX -DMMX_RC5 \
			-DPIPELINE_COUNT=2 -DMULTITHREAD"
	TARGET_LDFLAGS="-static"
	TARGET_ADDSRCS="$DESX86_SRCS $DESMMX_SRCS $KWAN_SLICE_SRCS4"
	TARGET_ADDASMS="des/bdeslow.S des/bbdeslow.S \
			platforms/x86ident.S \
			des/p1bdespro.S des/p2bdespro.S"
	TARGET_ADDNASMS="$NASM_RC5X86_SRCS"
	TARGET_LIBS="-lc_r"
	TARGET_NASMFLAGS="-i rc5/nasm/ -f aoutb"
	;;

    *x86-freebsd-elf)
	TARGET_AS="gcc -c"
	TARGET_CCFLAGS="$OPTS_GCC_X86 $OPTS_DES_MMX -DMMX_RC5 \
			-DPIPELINE_COUNT=2 -D__ELF__"
	TARGET_LDFLAGS="-static"
	TARGET_ADDSRCS="$DESX86_SRCS $DESMMX_SRCS $KWAN_SLICE_SRCS4"
	TARGET_ADDASMS="des/bdeslow.S platforms/x86ident.S des/p1bdespro.S"
	TARGET_ADDNASMS="$NASM_RC5X86_SRCS"
	TARGET_NASMFLAGS="-i rc5/nasm/ -f elf"
	TARGET_NASM="/usr/local/bin/nasm"
	TARGET_LIBS="-lc_r"
	;;

    *x86-freebsd-mt-elf)
	TARGET_AS="gcc -c"
	TARGET_CCFLAGS="$OPTS_GCC_X86 $OPTS_DES_MMX -DMMX_RC5 \
			-DPIPELINE_COUNT=2 -DMULTITHREAD"
	TARGET_LDFLAGS="-static"
	TARGET_ADDSRCS="$DESX86_SRCS $DESMMX_SRCS $KWAN_SLICE_SRCS4"
	TARGET_ADDASMS="des/bdeslow.S des/bbdeslow.S \
			platforms/x86ident.S \
			des/p1bdespro.S des/p2bdespro.S"
	TARGET_ADDNASMS="$NASM_RC5X86_SRCS"
	TARGET_LIBS="-lc_r"
	TARGET_NASMFLAGS="-i rc5/nasm/ -f elf"
	;;

    *x86-netbsd)
	TARGET_AS="g++ -c -DNO_BALIGN"
	TARGET_CCFLAGS="$OPTS_GCC_X86 $OPTS_DES_MMX -DMMX_RC5 \
			-DPIPELINE_COUNT=2"
	TARGET_LDFLAGS="-static"
	TARGET_ADDSRCS="$DESX86_SRCS $DESMMX_SRCS $KWAN_SLICE_SRCS4"
	TARGET_ADDASMS="des/bdeslow.S platforms/x86ident.S des/p1bdespro.S"
	TARGET_ADDNASMS="$NASM_RC5X86_SRCS"
	;;

    *x86-qnx4)
	TARGET_AS="g++ -c -DNO_BALIGN"
	TARGET_CCFLAGS="$OPTS_GCC_X86 $OPTS_DES_MMX -DPIPELINE_COUNT=2"
	TARGET_LDFLAGS="-static"
	TARGET_ADDSRCS="$RC5X86_SRCS $DESX86_SRCS $KWAN_SLICE_SRCS4"
	TARGET_ADDASMS="des/bdeslow.S platforms/x86ident.S des/p1bdespro.S"
	;;

    *x86-openbsd)
	TARGET_AS="g++ -c"
	TARGET_CCFLAGS="$OPTS_GCC_X86 $OPTS_DES_MMX -DMMX_RC5 \
			-DPIPELINE_COUNT=2"
	TARGET_LDFLAGS="-static"
	TARGET_ADDSRCS="$DESX86_SRCS $DESMMX_SRCS $KWAN_SLICE_SRCS4"
	TARGET_ADDASMS="des/bdeslow.S platforms/x86ident.S des/p1bdespro.S"
	TARGET_ADDNASMS="$NASM_RC5X86_SRCS"
	;;

    *x86-bsdi)
	TARGET_AS="g++ -c -DNO_BALIGN"
	TARGET_CCFLAGS="$OPTS_GCC272_X86 -DPIPELINE_COUNT=2 -DKWAN"
	TARGET_LDFLAGS="-static"
	TARGET_ADDSRCS="$RC5X86_SRCS $DESX86_SRCS $KWAN_SLICE_SRCS4"
	TARGET_ADDASMS="des/bdeslow.S platforms/x86ident.S des/p1bdespro.S"
       ;;

####### BSD/OS 4.0 with ELF format
    *x86-bsdi4)
	TARGET_AS="g++ -c -DNO_BALIGN"
	TARGET_CCFLAGS="$OPTS_GCC_X86 $OPTS_DES_MMX -DMMX_RC5 -D__showids__ \
			-DPIPELINE_COUNT=2 -D__ELF__"
	TARGET_ADDSRCS="$DESX86_SRCS $DESMMX_SRCS $KWAN_SLICE_SRCS4"
	TARGET_ADDASMS="des/bdeslow.S platforms/x86ident.S des/p1bdespro.S"
	TARGET_ADDNASMS="$NASM_RC5X86_SRCS"
       ;;

####### Intel X86 SCO5

    *x86-sco5)
	TARGET_AS="g++ -c"
	TARGET_CCFLAGS="$OPTS_GCC_X86 $OPTS_DES_MMX -DMMX_RC5 \
			-DPIPELINE_COUNT=2 -belf -Dsco5"
	TARGET_LDFLAGS="-static"
	TARGET_ADDSRCS="$DESX86_SRCS $DESMMX_SRCS $KWAN_SLICE_SRCS4"
	TARGET_ADDASMS="des/bdeslow.S platforms/x86ident.S des/p1bdespro.S"
	TARGET_ADDNASMS="$NASM_RC5X86_SRCS"
	TARGET_LIBS="-lsocket"
	;;

####### Intel x86 DYNIX

    *x86-dynix4)
	RC5CORECOPY="rc5/rc5ansi2-rg2.cpp"
	TARGET_CC="ec++"
	TARGET_CCFLAGS="$OPTS_EPC_DYNIX -DMMX_RC5 -DPIPELINE_COUNT=2 \
			-DBIT_32 -DMEGGS -DKWAN"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS1"
	TARGET_ADDNASMS="$NASM_RC5X86_SRCS"
	TARGET_LIBS="-lsocket -lnsl -lseq -L/opt/epc/ec++/lib -lec++"
	;;

    *x86-dynix2)
	RC5CORECOPY="rc5/rc5ansi2-rg2.cpp"
	TARGET_CCFLAGS="$OPTS_GCC_DYNIX -DMMX_RC5 -DPIPELINE_COUNT=2 \
			-DBIT_32 -DMEGGS -DKWAN"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2"
	TARGET_ADDNASMS="$NASM_RC5X86_SRCS"
	TARGET_LDFLAGS="-L."
	# Don't panic; -lXbsd is for gettimeofday()
	TARGET_LIBS="-lsocket -linet -lnsl -lXbsd -lseq"
	;;

###### NeXT (x86, m68k, sparc, hppa)

    *x86-next)
	TARGET_AS="gcc -c"
	TARGET_CC="gcc"
	TARGET_CCFLAGS="$OPTS_GCC_X86 $OPTS_DES_MMX -DMMX_RC5 -D_NeXT_ \
			-DPIPELINE_COUNT=2 -DBIT_32"
	TARGET_ADDSRCS="$DESX86_SRCS $DESMMX_SRCS $KWAN_SLICE_SRCS4"
	TARGET_ADDASMS="des/bdeslow.S platforms/x86ident.S des/p1bdespro.S"
	TARGET_ADDNASMS="$RC5X86_SRCS"
	;;

    *m68k-next-gcc)
	TARGET_CC="gcc"
	TARGET_CCFLAGS="$OPTS_NEXT_M68K -D_NeXT_ -DPIPELINE_COUNT=1 \
			-DBIT_32 -DKWAN"
	TARGET_ADDSRCS="rc5/crunch.68k.gcc.s $KWAN_SLICE_SRCS4"
	;;

    *m68k-next)
	RC5CORECOPY="rc5/rc5ansi1-b2.cpp"
	TARGET_CC="cc++"
	TARGET_CCLAGS="$OPTS_NEXT_M68K -arch m68k -D_NeXT_ -DPIPELINE_COUNT=1"
	;;

    *sparc-next)
	RC5CORECOPY="rc5/rc5ansi2-rg.cpp"
	TARGET_CC="cc++"
	TARGET_CCFLAGS="$OPTS_NEXT_SPARC -arch sparc -D_NeXT_  \
			-DPIPELINE_COUNT=2 -DBIT_32"
	TARGET_ADDSRCS="des/des-slice.cpp des/deseval.cpp"
	;;

    *hppa-next)
	RC5CORECOPY="rc5/rc5ansi2-b2.cpp"
	TARGET_CC="cc++"
	TARGET_CCFLAGS="$OPTS_NEXT_HPPA -arch hppa -D_NeXT_ \
			-DPIPELINE_COUNT=2 -DBIT_32"
	TARGET_ADDSRCS="des/des-slice.cpp des/deseval.cpp"
	;;

###### ARM

    *riscos)
	TARGET_CC="armcpp -aif -nodebug -littleend \
		   -apcs 3/26bit/swst/hardfp/fpe2 -zps1 -nounusedareas \
		   -l/home/cberry/play/riscoslib/CLib/stubs.o"
	TARGET_AS="armasm -apcs 3/26bit"
	TARGET_CCFLAGS="-Icommon -Irc5 -Ides -Iplatforms \
			-I/home/cberry/play/riscoslib/OSLib \
			-I/home/cberry/play/riscoslib/TCPIPLibs \
			-J/home/cberry/play/riscoslib/CLib \
			-D__showids__ \
			-DCOMPAT_INET4 -D__riscos \
			-DPIPELINE_COUNT=2 -DBIT_32 -DKWAN"
	TARGET_ADDSRCS="platforms/riscos/riscos.cpp"
	TARGET_ADDASMS="platforms/riscos/riscosasm.s \
			rc5/rc5-arm-1.s rc5/rc5-arm-2.s rc5/rc5-arm-3.s \
			des/des-slice-arm.s des/des-slice-sa.s"
	TARGET_LIBS="-lcpplib /home/cberry/play/riscoslib/TCPIPLibs/unixlib.o \
		     /home/cberry/play/riscoslib/TCPIPLibs/inetlib.o \
		     /home/cberry/play/riscoslib/TCPIPLibs/socklib.o"
	TARGET_STRIP=touch
	EXENAME=rc5des,ff8
	;;

    *arm-linux)
	TARGET_CC="gcc"
	TARGET_AS="as"
	TARGET_CCFLAGS="$OPTS_GCC_ARM -Dlinux \
			-DPIPELINE_COUNT=2 -DBIT_32 -DKWAN"
	TARGET_ADDSRCS=""
	TARGET_ADDASMS="rc5/rc5-sa-gnu.s rc5/rc5-arm-gnu.s \
			des/des-slice-sa-gnu.s des/des-slice-arm-gnu.s"
	TARGET_LIBS="-lm"
	;;

    *arm-netbsd)
	TARGET_CC="gcc"
	TARGET_AS="as"
	TARGET_CCFLAGS="$OPTS_GCC_ARM -DPIPELINE_COUNT=2 -DBIT_32 -DKWAN"
	TARGET_ADDSRCS=""
	TARGET_ADDASMS="rc5/rc5-sa-gnu.s rc5/rc5-arm-gnu.s \
			des/des-slice-sa-gnu.s des/des-slice-arm-gnu.s"
	TARGET_LIBS="-lm"
	;;

###### OS390
    *os390)
	RC5CORECOPY="rc5/rc5ansi2-rg2.cpp"
	TARGET_CC="gcc"
	TARGET_AS=""
	TARGET_CCFLAGS="$OPTS_OS390 -D__showids__ \
			-DPIPELINE_COUNT=2 -DBIT_32 -DKWAN -DMEGGS"
	TARGET_ADDSRCS="$MEGGS_SLICE_SRCS2"
	TARGET_ADDASMS=""
	TARGET_LIBS="$SOCKS_LIBS"
	;;

###### Be OS (x86, PPC)
    *x86-beos)
	TARGET_AS="gcc -c"
	TARGET_CC="gcc"
	TARGET_CCFLAGS="$OPTS_EGCS_X86 $OPTS_DES_MMX -DMMX_RC5 -D__showids__ \
			-DMULTITHREAD"
	TARGET_LDFLAGS="-static"
	TARGET_ADDSRCS="$DESX86_SRCS $DESMMX_SRCS $KWAN_SLICE_SRCS4"
	TARGET_ADDASMS="des/bdeslow.S des/bbdeslow.S \
			platforms/x86ident.S \
			des/p1bdespro.S des/p2bdespro.S"
	TARGET_ADDNASMS="$NASM_RC5X86_SRCS"
	TARGET_LIBS=""
	;;

###### Unknown
    *list)
	egrep "^[ ]*\*" $0 | more
	echo ""
	exit 1
	;;
    *)
	echo "Unknown target platform \"$1\" specified."
	echo "Run with 'list' as an argument to see available platforms."
	echo ""
	exit 1
esac
echo "Platform target for \"$1\" recognized."


#
# Generate the list of output objects, making note of what
# source file it was derrived from.
#

TARGET_ALLCCOBJS=
TARGET_ALLASOBJS=
TARGET_ALLNASMOBJS=

if [ -n "${COMMON_SRCS}" -o -n "${TARGET_ADDSRCS}" ]; then
  echo "Scanning output C++ dependencies..."
  for target in ${COMMON_SRCS} ${TARGET_ADDSRCS}; do
      TARGETOBJECT=output/`basename $target .cpp`.o
      SAFENAME=`echo ${TARGETOBJECT} | tr -d ${DELETECHARS}`
      echo "  ${target} -> ${TARGETOBJECT} (${SAFENAME})"
      eval "DEPEND_${SAFENAME}=${target}"
      TARGET_ALLCCOBJS="${TARGET_ALLCCOBJS} ${TARGETOBJECT}"
  done
fi

if [ -n "${TARGET_ADDASMS}" ]; then
  echo "Scanning output AS dependencies..."
  for target in ${TARGET_ADDASMS}; do
      TARGETOBJECT=output/`basename $target`.o
      SAFENAME=`echo ${TARGETOBJECT} | tr -d ${DELETECHARS}`
      echo "  $target -> $TARGETOBJECT ($SAFENAME)"
      eval "DEPEND_${SAFENAME}=$target"
      TARGET_ALLASOBJS="${TARGET_ALLASOBJS} ${TARGETOBJECT}"
  done
fi

if [ -n "${TARGET_ADDNASMS}" ]; then
  echo "Scanning output NASM dependencies..."
  for target in ${TARGET_ADDNASMS}; do
      TARGETOBJECT=output/`basename $target`.o
      SAFENAME=`echo ${TARGETOBJECT} | tr -d ${DELETECHARS}`
      echo "  $target -> $TARGETOBJECT ($SAFENAME)"
      eval "DEPEND_${SAFENAME}=$target"
      TARGET_ALLNASMOBJS="${TARGET_ALLNASMOBJS} ${TARGETOBJECT}"
  done
fi


#
# Build the test program
#
echo "Building test program..."
if [ $1 = riscos ]; then
  #tum-te-tum
  rsh starman "cd rc5/src/client; gcc common/testplat.cpp -o testplat"
else
    echo "${TARGET_CC} ${TARGET_CCFLAGS} common/testplat.cpp ${TARGET_LDFLAGS} ${TARGET_LIBS} -o testplat"
  sh -c "${TARGET_CC} ${TARGET_CCFLAGS} common/testplat.cpp ${TARGET_LDFLAGS} ${TARGET_LIBS} -o testplat"
  if [ $? -ne 0 ]; then
    echo "Compilation failed.  Check your target options."
    echo " ---------------------------------------------"
    echo "${TARGET_CC} ${TARGET_CCFLAGS} common/testplat.cpp ${TARGET_LDFLAGS} ${TARGET_LIBS} -o testplat"
    echo " ---------------------------------------------"
    exit
  fi
  ${TARGET_STRIP} testplat
fi


#
# Look up the platform and os types
#
if [ $1 = riscos ]; then
  CLIENTCPU=11
  CLIENTOS=34
  INTSIZES=442
else
  CLIENTCPU=`./testplat cpu`
  CLIENTOS=`./testplat os`
  INTSIZES=`./testplat intsizes`
fi
CLIENTOSNAME=`grep "#define OS_.*\<$CLIENTOS\>" common/cputypes.h | head -1 | cut -d' ' -f2`
CLIENTCPUNAME=`grep "#define CPU_.*\<$CLIENTCPU\>" common/cputypes.h | head -1 | cut -d' ' -f2`
echo "CLIENT_CPU = $CLIENTCPUNAME ($CLIENTCPU)"
echo "CLIENT_OS = $CLIENTOSNAME ($CLIENTOS)"
echo "INTSIZES = $INTSIZES"
TARGET_CCFLAGS="-DINTSIZES=${INTSIZES} -DBUILDNAME=\${BUILDNAME} ${TARGET_CCFLAGS}"


#
# Start building the output makefile
#
echo "Generating output Makefile prologue code..."
rm -f Makefile

echo "# Autogenerated RC5DES client makefile ($1)" > Makefile
echo "#   target cpu --> $CLIENTCPUNAME ($CLIENTCPU)" >> Makefile
echo "#    target os --> $CLIENTOSNAME ($CLIENTOS)" >> Makefile
echo "#     intsizes --> $INTSIZES" >> Makefile
echo "# see http://www.distributed.net/ for details." >> Makefile
echo "" >> Makefile

echo "CC = ${TARGET_CC}" >> Makefile
echo "CP = ${TARGET_CP}" >> Makefile
echo "CCFLAGS = ${TARGET_CCFLAGS}" >> Makefile
echo "LDFLAGS = ${TARGET_LDFLAGS}" >> Makefile
echo "LIBS = ${TARGET_LIBS}" >> Makefile
echo "AS = ${TARGET_AS}" >> Makefile
echo "ASFLAGS = ${TARGET_ASFLAGS}" >> Makefile
echo "NASM = ${TARGET_NASM}" >> Makefile
echo "NASMFLAGS = ${TARGET_NASMFLAGS}" >> Makefile
echo "STRIP = ${TARGET_STRIP}" >> Makefile
echo "ALLOBJS = ${TARGET_ALLCCOBJS} ${TARGET_ALLASOBJS} ${TARGET_ALLNASMOBJS}" >> Makefile
echo "ADDOBJS = ${TARGET_ADDOBJS}" >> Makefile
echo "BUILDNAME = $1" >> Makefile
echo "" >> Makefile


#
# Generate the main production targets in the makefile
#
echo "Generating Makefile production targets..."
echo "# Regular targets follow" >> Makefile

echo "${EXENAME}:	\${BUILDNAME}" >> Makefile
echo "	\${CP} \${BUILDNAME} ${EXENAME}" >> Makefile
echo "	\${STRIP} ${EXENAME}" >> Makefile
echo "" >> Makefile

echo "\${BUILDNAME}:	\${ALLOBJS} \${ADDOBJS}" >> Makefile
echo "	\${CC} \${LDFLAGS} \${ALLOBJS} \${ADDOBJS} \${LIBS} -o \${BUILDNAME}" >> Makefile
echo "" >> Makefile

echo "clean:" >> Makefile
echo "	rm -f \${ALLOBJS} ${EXENAME}" >> Makefile
echo "" >> Makefile

echo "superclean: clean" >> Makefile
echo "	rm -f Makefile buff-in.* buff-out.* *.ini testplat" >> Makefile
echo "	find . -name '*~' -exec rm {} \\;" >> Makefile
echo "" >> Makefile

echo "distclean: superclean $0" >> Makefile
echo "	find . -name '.#*' -exec rm {} \\;" >> Makefile
echo "	rm -f \`egrep \"^[ ]*\\*\" $0 | sed -e 's/\(^.*\*\)\(.*\)\().*\$\$\)/\2/'\`" >> Makefile
echo "" >> Makefile

echo "ident:	${EXENAME}" >> Makefile
echo "	ident ${EXENAME} | awk '{ printf(\"%-30s %10s %s %s %s %s%c\", \$\$2,\$\$3,\$\$4,\$\$5,\$\$6,\$\$7,10)}'" >> Makefile
echo "" >> Makefile

#
# Generate the dependency targets in the makefile
#
echo "# Dependency targets follow" >> Makefile

if [ -n "${TARGET_ALLCCOBJS}" ]; then
  echo "Generating Makefile C++ dependency targets..."
  for target in ${TARGET_ALLCCOBJS}; do
    SAFENAME=`echo $target | tr -d ${DELETECHARS}`
    eval TARGETSRC=$`echo DEPEND_$SAFENAME`
    if [ -n "${RC5CORECOPY}" -a `basename ${TARGETSRC}` = problem.cpp ]; then
      TARGET_HDEPS1=`./testplat build_dependancies ${TARGETSRC}`
      TARGET_HDEPS2=`./testplat build_dependancies ${RC5CORECOPY}`
      echo "$target:	${TARGETSRC} ${TARGET_HDEPS1} ${RC5CORECOPY} ${TARGET_HDEPS2}" >> Makefile
      echo "	\${CC} -c \${CCFLAGS} -include ${RC5CORECOPY} ${TARGETSRC} -o $target" >> Makefile
    else
      TARGET_HDEPS=`./testplat build_dependancies ${TARGETSRC}`
      echo "$target:	${TARGETSRC} ${TARGET_HDEPS}" >> Makefile
      echo "	\${CC} -c \${CCFLAGS} ${TARGETSRC} -o $target" >> Makefile
    fi
    echo "" >> Makefile
  done
fi

if [ -n "${TARGET_ALLASOBJS}" ]; then
  echo "Generating Makefile AS dependency targets..."
  for target in ${TARGET_ALLASOBJS}; do
    SAFENAME=`echo $target | tr -d ${DELETECHARS}`
    eval TARGETSRC=$`echo DEPEND_$SAFENAME`
    echo "$target:	${TARGETSRC}" >> Makefile
    echo "	\${AS} \${ASFLAGS} ${TARGETSRC} -o $target" >> Makefile
    echo "" >> Makefile
  done
fi

if [ -n "${TARGET_ALLNASMOBJS}" ]; then
  echo "Generating Makefile NASM dependency targets..."
  for target in ${TARGET_ALLNASMOBJS}; do
    SAFENAME=`echo $target | tr -d ${DELETECHARS}`
    eval TARGETSRC=$`echo DEPEND_$SAFENAME`
    echo "$target:	${TARGETSRC}" >> Makefile
    echo "	\${NASM} \${NASMFLAGS} ${TARGETSRC} -o $target" >> Makefile
    echo "" >> Makefile
  done
fi

echo "Makefile auto-generation complete!"
echo ""


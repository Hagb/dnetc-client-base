#!/bin/sh
#
# Copyright distributed.net 1998-2003 - All Rights Reserved
# For use in distributed.net projects only.
# Any other distribution or use of this source violates copyright.
#
# @(#)$Id: configure,v 1.288.2.77 2003/04/13 20:04:52 teichp Exp $

# - If you wish to have the build automatically generate a .tar.gz ready
#   for upload, then add  TARGET_TARBALL="<os>-<cpu>-<limitations>"
#   for example: TARGET_TARBALL="linux-x86-elf"
#
# - Avoid building separate MT and non-MT clients. MT is always preferred
#   (from the client's perspective), and the user can always force non-MT
#   by setting numcpu=0
#   *NOTE* All Unix'ish clients are inherently SMP capable. If the target
#   does not have kernel support for real (userland) threads, eg *BSD, Linux
#   et al, then let the default kick in. 
#   If you don't have support for threads (either -DHAVE_POSIX_THREADS
#   or other thread lib as defined in cputypes.h), and you don't want 
#   HAVE_MULTICRUNCH_BY_FORK, then you must define SINGLE_CRUNCHER_ONLY.

#####################################################################
# Note to people making changes..  Do not put spaces around the '=' #
# signs in the variable definitions below.  Some sh implementations #
# will interpret such lines as statements rather than assignments.  #
#####################################################################

if [ -z "$1" ]; then
  echo ""
  echo "No platform specified on command line."
  echo "Run with 'list' as an argument to see available platforms."
  echo ""
  echo "Syntax: $0 {target|'list'} [debug]"
  echo ""
  exit 1
fi

# -------------------------------------------------------------------

#
# Binary's name.
#
TARGET_BINNAME="dnetc"
TARGET_BINNAME_SUFFIX=""
BUILDNAME="$1"
#
# Define the default compilation options
#
TARGET_CC="cc"
TARGET_CP="cp"
TARGET_TR="tr"
TARGET_CCFLAGS=""
TARGET_LD=""          # blank implies TARGET_CC
TARGET_LDFLAGS=""
TARGET_LIBS=""
TARGET_HDIRS="./common" # the rest are added as needed
TARGET_AS="as"
TARGET_NASM="nasm"     #<- set this to "" if you have no nasm
TARGET_NASM_FMT="elf"  #<- set this to "" if you have no nasm
TARGET_ASFLAGS=""
TARGET_STRIP="strip"
TARGET_OGR_MULTI=""    #<-can be used to compile ogr.cpp with differing gcc opts
TARGET_IS_CROSSCOMPILE="" #

TARGET_ADDSRCS=""
TARGET_ADDASMS=""
TARGET_ADDNASMS=""
TARGET_ADDOBJS=""

# Certain source files need to be compiled without optimization
# to get a working client. *sigh* This flag will get set in the
# target to -O0. See endofscript for usage. -- myshkin
OPTS_NOOPT=""

#
# Platform specific docfiles to be included in the tarball. You only need
# to specify platform specific files. Generic ones are added automatically.
#
TARGET_DOCFILES="docs/readme._ix" # override where appropriate
TARGET_GENMAN=1        # non-blank generate a man page, or not (blank)

#
# Target specific tarball options.
#
TARGET_TARBALL=""     # 'binnameNNN-' is auto prepended, ".tar.gz" is appended
TARGET_TARBALL_COMMENT="" # special comments for tarball.readme (if needed)
TARGET_ARCTYPE="tgzdir"  # "tgz", "zip", "zipflat", "lha" or "tgzdir"

# -----------------------------------------------------------------------

# Select here, which OGR sources to use. Do not mention 'ogr' or 'ogr2' 
# anywhere. Always use $OGR.
OGR="ogr"
#OGR="ogr2"

# select the projects to include in the client
HAVE_RC5_64="0"
HAVE_RC5_72="1"
HAVE_OGR="1"
HAVE_DES="0"
HAVE_CSC="0"

# define these to "0" in add_sources() if you add your own list of cores + options
DEFAULT_RC5_64="1"
DEFAULT_RC5_72="1"
DEFAULT_OGR="1"
DEFAULT_DES="1"
DEFAULT_CSC="1"

add_sources() # $1=os, $2=arch, $3=custom
{
  # additions to COMMON_SRCS need to be before ${COMMON_SRCS}
  # so that speed sensitive stuff can remain together at the 'bottom'
  if [ "$1" = "freebsd" -o "$1" = "netbsd" -o "$1" = "openbsd" \
    -o "$1" = "bsdos"   -o "$1" = "os2"    -o "$1" = "amigaos" \
    -o "$1-$3" = "macosx-" -o "$1-$3" = "linux-" ]; then
    COMMON_SRCS="common/lurk.cpp ${COMMON_SRCS}"
    TARGET_CCFLAGS="$TARGET_CCFLAGS -DLURK"
  fi

  # -------------------------------------------------------------------

  # additions to COMMON_SRCS need to be before ${COMMON_SRCS}
  # so that speed sensitive stuff can remain together at the 'bottom'
  if [ "$1" = "amigaos" ]; then
    COMMON_SRCS="plat/amigaos/amVersion.c \
                 plat/amigaos/amSupport.c \
                 plat/amigaos/amMemory.c \
                 plat/amigaos/amTime.c \
                 plat/amigaos/amNetwork.c \
                 plat/amigaos/amConsole.c \
                 plat/amigaos/amGUI.c \
                 plat/amigaos/amInstall.c \
                 ${COMMON_SRCS}"
  elif [ "$1" = "linux" ]; then
    COMMON_SRCS="plat/linux/li_inst.c ${COMMON_SRCS}"
    if [ "$2" = "x86" -o "$2" = "ppc" ]; then #maybe others as well
      #COMMON_SRCS="plat/linux/li_kthread.c ${COMMON_SRCS}"
      #(obsolete) TARGET_CCFLAGS="$TARGET_CCFLAGS -DUNIVERSALRESOLVER"
      COMMON_SRCS="plat/linux/resolv.c ${COMMON_SRCS}"
    fi
  elif [ "$1" = "riscos" ]; then
    COMMON_SRCS="plat/riscos/riscos_sup.cpp \
                 plat/riscos/riscos_x86.cpp \
                 ${COMMON_SRCS}"
    if [ "$3" = "gccsdk" ]; then
      TARGET_ADDASMS="$TARGET_ADDASMS plat/riscos/riscos_asm_gccsdk.s"
    else
      TARGET_ADDASMS="$TARGET_ADDASMS plat/riscos/riscos_asm.s"
    fi
  elif [ "$1" = "next" ]; then
    COMMON_SRCS="plat/next/next_sup.cpp \
                 ${COMMON_SRCS}"
  elif [ "$1" = "os2" ]; then
    COMMON_SRCS="plat/os2/os2inst.cpp ${COMMON_SRCS}"
  elif [ "$1" = "macosx" ]; then
    COMMON_SRCS="plat/macosx/c_install.c ${COMMON_SRCS}"
  fi

  # -------------------------------------------------------------------

  # PROBLEM_NOT_HANDLED("add HAVE_XYZ and DEFAULT_XYZ above, ansi source \
  # files here, specific source files below and -DHAVE_XYZ_CORES in the \
  # defaults section further below")

  # only generic/ansi cores are declared here. 
  # arch specific ones are declared in each arch specific section.
  #-- RC5-64 -- (needs -DHAVE_RC5_64_CORES) ----------------------
  RC5_ANSI4_SRCS="rc5/ansi/rc5ansi_4-rg.cpp" # 4 pipeline
  RC5_ANSI2_SRCS="rc5/ansi/rc5ansi_2-rg.cpp" # 2 pipeline
  RC5_ANSI1_SRCS="rc5/ansi/rc5ansi_1-rg.cpp" # 1 pipeline
  #-- RC5-72 -- (needs -DHAVE_RC5_72_CORES) ----------------------
  RC5_72_ANSI1_SRCS="rc5-72/ansi/r72ansi1.cpp" # 1 pipeline
  RC5_72_ANSI2_SRCS="rc5-72/ansi/r72ansi2.cpp" # 2 pipeline
  RC5_72_ANSI4_SRCS="rc5-72/ansi/r72ansi4.cpp" # 4 pipeline
  RC5_72_ANSI_SRCS="$RC5_72_ANSI1_SRCS $RC5_72_ANSI2_SRCS $RC5_72_ANSI4_SRCS"
  # -- DES -- (needs -DHAVE_DES_CORES) -------------------------
  KWAN_SLICE_SRCS1="des/deseval.cpp des/des-slice.cpp des/sboxes-kwan.cpp"
  KWAN_SLICE_SRCS2="des/deseval.cpp des/des-slice.cpp des/sboxes-kwan2.cpp"
  KWAN_SLICE_SRCS3="des/deseval.cpp des/des-slice.cpp des/sboxes-kwan3.cpp"
  KWAN_SLICE_SRCS4="des/deseval.cpp des/des-slice.cpp des/sboxes-kwan4.cpp"
  MEGGS_SLICE_SRCS1="des/deseval-meggs2.cpp des/des-slice-meggs.cpp"
  MEGGS_SLICE_SRCS2="des/deseval-meggs3.cpp des/des-slice-meggs.cpp"
  # -- CSC -- (needs -DHAVE_CSC_CORES)
  CSC_ANSI_SRCS="csc/convcsc.cpp csc/csc-common.cpp csc/csc-1k-i.cpp csc/csc-1k.cpp csc/csc-6b-i.cpp csc/csc-6b.cpp"
  # -- OGR -- (needs -DHAVE_OGR_CORES) -------------------------
  OGR_GENERAL_SRCS="$OGR/ansi/ogr_sup.cpp $OGR/ansi/ogr_dat.cpp"
  OGR_ANSI_SRCS="$OGR/ansi/ogr.cpp $OGR_GENERAL_SRCS"

  # -------------------------------------------------------------------

  if [ "$2" = "x86" ]; then
    if [ "X$TARGET_NASM" = "X" -o "X$TARGET_NASM_FMT" = "X" ]; then #no NASM
      TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_NO_NASM"  # ****NOTE****
      TARGET_ADDASMS="$TARGET_ADDASMS plat/x86/x86ident.S"
    else
      TARGET_ADDNASMS="$TARGET_ADDNASMS plat/x86/x86ident.asm"
    fi

    # --------------- rc5-64 ----------------
    if [ "$HAVE_RC5_64" = "1" ]; then
      DEFAULT_RC5_64="0"
      if [ "$1-$3" = "linux-" -o "$1" = "freebsd" -o "$1" = "netbsd" \
        -o "$1" = "openbsd" -o "bsdos" ]; then # has SMC
        # -- rc5 smc --
        TARGET_CCFLAGS="$TARGET_CCFLAGS -DSMC"
        #obsolete linux: TARGET_LDFLAGS="$TARGET_LDFLAGS -static -Xlinker -omagic"
        #obsolete linux: -Xlinker -omagic implies -static
      fi
      if [ "X$TARGET_NASM" = "X" -o "X$TARGET_NASM_FMT" = "X" ]; then #no NASM
        # -- non-nasm/rc5 --
        TARGET_HDIRS="$TARGET_HDIRS ./rc5"
        TARGET_ADDSRCS="$TARGET_ADDSRCS \
                        rc5/x86/rg-486.cpp     rc5/x86/rg-smc.cpp \
                        rc5/x86/rg-k5.cpp      rc5/x86/brf-p5.cpp \
                        rc5/x86/rg-k6.cpp      rc5/x86/rg-p6.cpp  \
                        rc5/x86/rg-6x86.cpp"
      else
        # -- nasm/rc5 --
        TARGET_ADDNASMS="$TARGET_ADDNASMS \
                         rc5/x86/rg-486.asm    rc5/x86/brf-smc.asm \
                         rc5/x86/rg-k5.asm     rc5/x86/brf-p5.asm \
                         rc5/x86/rg-k6.asm     rc5/x86/rg-p6.asm \
                         rc5/x86/rg-6x86.asm   rc5/x86/ak-p7.asm \
                         rc5/x86/jp-mmx.asm    rc5/x86/hb-k7.asm"
      fi
    fi # HAVE_RC5_64

    # -------------- rc5-72 --------------
    if [ "$HAVE_RC5_72" = "1" ]; then
      if [ "X$TARGET_NASM" != "X" -a "X$TARGET_NASM_FMT" != "X" ]; then
        # -- nasm/rc5 --
        DEFAULT_RC5_72="0"     # don't add the ansi cores
        TARGET_ADDNASMS="$TARGET_ADDNASMS \
                         rc5-72/x86/r72-ses1.asm \
                         rc5-72/x86/r72-ses2.asm \
                         rc5-72/x86/r72-dg2.asm \
                         rc5-72/x86/r72-dg3.asm \
                         rc5-72/x86/r72-dg3a.asm \
                         rc5-72/x86/r72-ss2.asm"
      fi
    fi # HAVE_RC5_72

    # --------------- des ----------------
    if [ "$HAVE_DES" = "1" ]; then
      DEFAULT_DES="0"
      TARGET_ADDASMS="$TARGET_ADDASMS des/x86/bdeslow.S des/x86/p1bdespro.S"
      TARGET_ADDSRCS="$TARGET_ADDSRCS des/x86/des-x86.cpp"
      # -- des mt --
      TARGET_ADDASMS="$TARGET_ADDASMS des/x86/bbdeslow.S des/x86/p2bdespro.S"
      TARGET_ADDSRCS="$TARGET_ADDSRCS $KWAN_SLICE_SRCS4"
      TARGET_CCFLAGS="$TARGET_CCFLAGS -DKWAN"
      if [ "X$TARGET_NASM" = "X" -o "X$TARGET_NASM_FMT" = "X" ]; then #no NASM
        TARGET_CCFLAGS="$TARGET_CCFLAGS"
      else
        # -- des mmx --
        TARGET_ADDSRCS="$TARGET_ADDSRCS des/des-slice-meggs.cpp"
        TARGET_ADDNASMS="$TARGET_ADDNASMS des/x86/deseval-mmx.asm"
        TARGET_CCFLAGS="$TARGET_CCFLAGS -DMMX_BITSLICER -DMEGGS"
      fi
    fi # HAVE_DES

    # --------------- ogr ----------------
    if [ "$HAVE_OGR" = "1" ]; then
      DEFAULT_OGR="0"
      if [ "$OGR" = "ogr2" ]; then
        # -- no special versions yet --
        TARGET_ADDSRCS="$TARGET_ADDSRCS $OGR_ANSI_SRCS"
      elif [ "X$TARGET_NASM" = "X" -o "X$TARGET_NASM_FMT" = "X" ]; then #no NASM
        # -- non-nasm/ogr --
        #TARGET_ADDASMS="$TARGET_ADDASMS $OGR/x86/ogr.S"
        TARGET_ADDSRCS="$TARGET_ADDSRCS $OGR/x86/ogr-a.cpp $OGR/x86/ogr-b.cpp"
        TARGET_ADDSRCS="$TARGET_ADDSRCS $OGR_GENERAL_SRCS"
        ##TARGET_ADDSRCS="$TARGET_ADDSRCS $OGR_ANSI_SRCS"
      else
        # -- nasm/ogr --
        #TARGET_ADDNASMS="$TARGET_ADDNASMS $OGR/x86/ogr.asm"
        TARGET_ADDSRCS="$TARGET_ADDSRCS $OGR/x86/ogr-a.cpp $OGR/x86/ogr-b.cpp"
        TARGET_ADDSRCS="$TARGET_ADDSRCS $OGR_GENERAL_SRCS"
        ##TARGET_ADDSRCS="$TARGET_ADDSRCS $OGR_ANSI_SRCS"
      fi
    fi # HAVE_OGR

    # --------------- csc ----------------
    if [ "$HAVE_CSC" = "1" ]; then
      DEFAULT_CSC="0"
      if [ "X$TARGET_NASM" = "X" -o "X$TARGET_NASM_FMT" = "X" ]; then #no NASM
        TARGET_ADDSRCS="$TARGET_ADDSRCS $CSC_ANSI_SRCS"
      else
        TARGET_NASM="$TARGET_NASM -i csc/x86/" # HACK HACK HACK
        TARGET_ADDNASMS="$TARGET_ADDNASMS \
                        csc/x86/convcsc.asm csc/x86/csc-1k-i.asm \
                        csc/x86/csc-1k.asm  csc/x86/csc-6b-i.asm \
                        csc/x86/csc-6b.asm  csc/x86/csc-comm.asm \
                        csc/x86/mmx/csc-mmx.asm"
      fi
    fi # HAVE_CSC
  #-----------------------------------------------------------------
  elif [ "$2" = "sparc" -o "$2" = "sparc64" ]; then
    if [ "$HAVE_RC5_64" = "1" ]; then
      if [ "$1" = "solaris" -o "$1" = "sunos" -o "$1" = "linux" ]; then
        # DEFAULT_RC5_64="1" # just an addition to the default ansi core
        # add the rc5-ultra-crunch core
        if [ "$3" = "cc" ]; then # use a gcc -S generated .s file for sun cc
          TARGET_ADDASMS="$TARGET_ADDASMS rc5/ultra/rc5-ultra-crunch.s"
        else
          TARGET_ADDSRCS="$TARGET_ADDSRCS rc5/ultra/rc5-ultra-crunch.cpp"
        fi
      fi
    fi # HAVE_RC5_64

    if [ "$HAVE_RC5_72" = "1" ]; then
      # DEFAULT_RC5_72="1" # just an addition to the default ansi cores
      TARGET_ADDASMS="$TARGET_ADDASMS rc5-72/sparc/r72-kks2.s"
    fi # HAVE_RC5_72

    if [ "$HAVE_DES" = "1" ]; then
      DEFAULT_DES="0"
      if [ "X$3" = "Xultra" ]; then
        DESULTRA_SRCS_C="des/ultrasparc/des-slice-ultrasparc.cpp \
                         des/ultrasparc/simple.c \
                         des/ultrasparc/des_ultra_crunch.c \
                         des/ultrasparc/kwan_from_to.c \
                         des/ultrasparc/do_all.c \
                         des/ultrasparc/do_all_fancy.c \
                         des/ultrasparc/do_s1.c \
                         des/ultrasparc/do_s1_s3.c \
                         des/ultrasparc/do_s2.c \
                         des/ultrasparc/do_s3.c \
                         des/ultrasparc/do_s4.c \
                         des/ultrasparc/do_s5.c \
                         des/ultrasparc/do_s6.c \
                         des/ultrasparc/do_s7.c \
                         des/ultrasparc/do_s8.c"
        DESULTRA_SRCS_ASM="des/ultrasparc/des-slice-ultrasparc.cpp \
                         des/ultrasparc/des_ultra_crunch.c"
        TARGET_ADDASMS="des/ultrasparc/simple.handopt.s"
        TARGET_ADDSRCS="$TARGET_ADDSRCS $DESULTRA_SRCS_ASM"
      else
        DESSPARC_SRCS_C="des/des-slice.cpp des/deseval.cpp"
        TARGET_ADDSRCS="$TARGET_ADDSRCS $DESSPARC_SRCS_C"
      fi
    fi # HAVE_DES
  #-----------------------------------------------------------------
  elif [ "$2" = "mips" ]; then
    if [ "$HAVE_RC5_64" = "1" ]; then
      DEFAULT_RC5_64="0"
      if [ "$TARGET_CC" = "CC" -o "$1" = "netbsd" ]; then # mips-crunch doesn't compile with IRIX CC
        TARGET_ADDSRCS="$TARGET_ADDSRCS $RC5_ANSI2_SRCS"
      elif [ "$3" = "ps2" ]; then      #For PS2 Linux [jt(jt@distributed.net)]
        TARGET_ADDSRCS="$TARGET_ADDSRCS $RC5_ANSI2_SRCS"
        TARGET_ADDSRCS="$TARGET_ADDSRCS rc5/mips/mips-crunch.cpp"
      else                             # gcc targets. mips-crunch.cpp is faster
                                       # except for NetBSD, ansi is 2% faster
        TARGET_ADDSRCS="$TARGET_ADDSRCS rc5/mips/mips-crunch.cpp"
      fi
    fi # HAVE_RC5_64
    if [ "$HAVE_RC5_72" = "1" ]; then
      TARGET_ADDSRCS="$TARGET_ADDSRCS rc5-72/mips/r72mips2.cpp"
    fi # HAVE_RC5_72
  #-----------------------------------------------------------------
  elif [ "$2" = "hppa" ]; then
    if [ "$HAVE_RC5_64" = "1" ]; then
      if [ "$TARGET_CC" = "CC" ]; then
        DEFAULT_RC5_64="0"
        TARGET_ADDASMS="$TARGET_ADDASMS rc5/parisc/parisc.s"
      else
      : # use DEFAULT_RC5_64
      fi
    fi # HAVE_RC5_64
  #-----------------------------------------------------------------
  elif [ "$2" = "68k" ]; then
    if [ "$HAVE_RC5_64" = "1" ]; then
      DEFAULT_RC5_64="0"
      if [ "$1" = "amigaos" ]; then
        TARGET_ADDASMS="$TARGET_ADDASMS rc5/68k/rc5-000_010-re-jg.s \
                                        rc5/68k/rc5-020_030-jg.s \
                                        rc5/68k/rc5-060-re-jg.s \
                                        rc5/68k/rc5-0x0-common-jg.s"
      elif [ "$1" = "next" ]; then
        TARGET_ADDSRCS="$TARGET_ADDSRCS rc5/ansi/rc5ansi1-b2.cpp"
      else
        TARGET_ADDASMS="$TARGET_ADDASMS rc5/68k/rc5-000_010-re-jg.gcc.s \
                                        rc5/68k/rc5-020_030-jg.gcc.s \
                                        rc5/68k/rc5-060-re-jg.gcc.s \
                                        rc5/68k/rc5-0x0-common-jg.gcc.s"
        TARGET_ASFLAGS="$TARGET_ASFLAGS -I./rc5/68k"
      fi
    fi # HAVE_RC5_64
    if [ "$HAVE_RC5_72" = "1" ]; then
      DEFAULT_RC5_72="0"
      if [ "$1" = "amigaos" ]; then
        TARGET_ADDASMS="$TARGET_ADDASMS rc5-72/68k/r72-030-mh.s \
                                        rc5-72/68k/r72-040-mh.s \
                                        rc5-72/68k/r72-060-mh.s \
                                        rc5-72/68k/r72-0x0-common-mh.s"
      else
        TARGET_ADDASMS="$TARGET_ADDASMS rc5-72/68k/r72-030-mh.gas.s \
                                        rc5-72/68k/r72-040-mh.gas.s \
                                        rc5-72/68k/r72-060-mh.gas.s \
                                        rc5-72/68k/r72-0x0-common-mh.gas.s"
        TARGET_ASFLAGS="$TARGET_ASFLAGS -I./rc5-72/68k"
      fi
    fi # HAVE_RC5_72
    if [ "$HAVE_OGR" = "1" ]; then
      DEFAULT_OGR="0"
      TARGET_ADDSRCS="$TARGET_ADDSRCS $OGR_GENERAL_SRCS"
      TARGET_ADDOBJS="$TARGET_ADDOBJS output/ogr000.o output/ogr020.o \
                                      output/ogr030.o output/ogr040.o \
                                      output/ogr060.o"
      TARGET_OGR_MULTI="68k"
    fi # HAVE_OGR
    if [ "$HAVE_DES" = "1" ]; then
      DEFAULT_DES="0"
      TARGET_CCFLAGS="$TARGET_CCFLAGS -DKWAN"
      TARGET_ADDSRCS="$TARGET_ADDSRCS $SLICE_SRCS3"
    fi # HAVE_DES
  #-----------------------------------------------------------------
  elif [ "$2" = "alpha" ]; then
    if [ "$HAVE_RC5_64" = "1" ]; then
      DEFAULT_RC5_64="0"
      if [ "$1" = "digital-unix" ]; then
        TARGET_ADDSRCS="${TARGET_ADDASMS} rc5/alpha/axp-bmeyer-osf.s"
      else
        TARGET_ADDASMS="${TARGET_ADDASMS} rc5/alpha/axp-bmeyer.s"
      fi
      TARGET_ADDSRCS="${TARGET_ADDSRCS} rc5/alpha/axp-bmeyer.cpp"
    fi # HAVE_RC5_64
    if [ "$HAVE_OGR" = "1" ]; then
      # this is just an addition to the default ansi core
      # maybe this should be moved in to specific targets ?
      TARGET_ADDSRCS="${TARGET_ADDSRCS} ogr/alpha/ev67.cpp"
    fi # HAVE_OGR
  #-----------------------------------------------------------------
  elif [ "$2" = "ppc" -o "$2" = "power" ]; then
    XLC_LINTILLA_ASMS="rc5/ppc/crunch_lintilla.ppcxlc.s \
     rc5/ppc/crunch_allitnil.ppcxlc.s"
    RC5PPC_SRCS="rc5/ppc/crunch_lintilla.ppcgas.s \
        rc5/ppc/crunch_lintilla_604e.ppcgas.s \
        rc5/ppc/crunch_allitnil.ppcgas.s \
        rc5/ppc/rc5_unit_func_lintilla.cpp \
        rc5/ppc/rc5_unit_func_lintilla_604e.cpp \
        rc5/ppc/rc5_unit_func_allitnil.cpp"
    RC5PPC_MWCC_SRCS="rc5/ppc/crunch_lintilla.ppcmpw.s \
        rc5/ppc/crunch_lintilla_604e.ppcmpw.s \
        rc5/ppc/crunch_allitnil.ppcmpw.s \
        rc5/ppc/rc5_unit_func_lintilla.cpp \
        rc5/ppc/rc5_unit_func_lintilla_604e.cpp \
        rc5/ppc/rc5_unit_func_allitnil.cpp"
    RC5PPC_APPLE_SRCS="rc5/ppc/crunch_lintilla.ppcosx.s \
        rc5/ppc/crunch_lintilla_604e.ppcosx.s \
        rc5/ppc/crunch_allitnil.ppcosx.s \
        rc5/ppc/rc5_unit_func_lintilla.cpp \
        rc5/ppc/rc5_unit_func_lintilla_604e.cpp \
        rc5/ppc/rc5_unit_func_allitnil.cpp"
    RC5ALTIVEC_SRCS="rc5/ppc/crunch_vec.ppcosx.s \
        rc5/ppc/crunch_vec_7450.ppcosx.s \
        rc5/ppc/rc5_unit_func_vec.cpp \
        rc5/ppc/rc5_unit_func_vec_7450.cpp"

    if [ "$HAVE_RC5_64" = "1" ]; then
      DEFAULT_RC5_64="0"
      if [ "$2" = "power" ]; then
        TARGET_ADDSRCS="$TARGET_ADDSRCS $RC5_ANSI2_SRCS"
        if [ "$1-$3" = "aix-aixall" ]; then
          TARGET_ADDSRCS="$TARGET_ADDSRCS $RC5PPC_SRCS"
        fi
      elif [ "$TARGET_CC" = "mwcc" ]; then
        TARGET_ADDSRCS="$TARGET_ADDSRCS $RC5PPC_MWCC_SRCS"
      elif [ "$TARGET_CC" = "xlC" ]; then
        if [ "X$3" = "aix32" ]; then
          TARGET_ADDASMS="$TARGET_ADDASMS rc5/ppc/crunch_allitnil.ppcgas.s \
                                          rc5/ppc/crunch_lintilla.ppcgas.s \
                                          rc5/ppc/crunch_lintilla_604e.ppcgas.s"
        else # aix4
          TARGET_ADDASMS="$TARGET_ADDASMS $XLC_LINTILLA_ASMS"
        fi
      elif [ "${1}" = "macosx" ]; then  #... and macosxserver (apple cc)
        TARGET_ADDSRCS="$TARGET_ADDSRCS $RC5PPC_APPLE_SRCS"
        if [ "X$3" = "X" ]; then #mach3+
          TARGET_ADDSRCS="$TARGET_ADDSRCS $RC5ALTIVEC_SRCS"
        fi
      else
        TARGET_ADDSRCS="$TARGET_ADDSRCS $RC5PPC_SRCS"
      fi
    fi # HAVE_RC5_64

    R72PPC_ASMS="rc5-72/ppc/r72-ppc-mh-2.gas.s \
        rc5-72/ppc/r72-603e-mh-1-addi.gas.s \
        rc5-72/ppc/r72-604e-mh-1-addi.gas.s \
        rc5-72/ppc/r72-KKS2pipes.gas.s \
        rc5-72/ppc/r72-KKS604e.gas.s"
    R72PPC_APPLE_ASMS="rc5-72/ppc/r72-ppc-mh-2.osx.s \
        rc5-72/ppc/r72-603e-mh-1-addi.osx.s \
        rc5-72/ppc/r72-604e-mh-1-addi.osx.s \
        rc5-72/ppc/r72-KKS2pipes.osx.s \
        rc5-72/ppc/r72-KKS604e.osx.s"

    if [ "$HAVE_RC5_72" = "1" ]; then
      DEFAULT_RC5_72="0"
      # PowerPC
      if [ "$2" = "power" ]; then
        TARGET_ADDSRCS="$TARGET_ADDSRCS $RC5_72_ANSI_SRCS"
        if [ "$1-$3" = "aix-aixall" ]; then
          TARGET_ADDASMS="$TARGET_ADDASMS $R72PPC_ASMS"
        fi
      elif [ "$TARGET_CC" = "mwcc" ]; then
        TARGET_ADDASMS="$TARGET_ADDASMS" # to be completed
      elif [ "$TARGET_CC" = "xlC" ]; then
        TARGET_ADDASMS="$TARGET_ADDASMS" # to be completed
      elif [ "${1}" = "macosx" ]; then  #... and macosxserver (apple cc)
        TARGET_ADDASMS="$TARGET_ADDASMS $R72PPC_APPLE_ASMS"
      else # gas targets
        TARGET_ADDASMS="$TARGET_ADDASMS $R72PPC_ASMS"
      fi
      # AltiVec
      if [ "${1}" = "macosx" ]; then  #... and macosxserver (apple cc)
        if [ "X$3" = "X" ]; then #mach3+
          TARGET_ADDSRCS="$TARGET_ADDSRCS rc5-72/ppc/r72-KKS7400.osx.s \
                                          rc5-72/ppc/r72-KKS7450.osx.s"
	fi
      elif [ "X$3" = "Xaltivec" ] ; then
          TARGET_ADDSRCS="$TARGET_ADDSRCS rc5-72/ppc/r72-KKS7400.gas.s \
                                          rc5-72/ppc/r72-KKS7450.gas.s"
      fi
    fi # HAVE_RC5_72

    if [ "$HAVE_OGR" = "1" ]; then
      #DEFAULT_OGR="1" # this is just an addition to default core
      if [ "${1}" = "macosx" ]; then  #... and macosxserver (apple cc)
        if [ "X$3" = "X" ]; then #mach3+
          TARGET_ADDSRCS="$TARGET_ADDSRCS $OGR/ppc/ogr-vec.cpp"
        fi
      elif [ "X$3" = "Xaltivec" ] ; then
        TARGET_ADDSRCS="$TARGET_ADDSRCS $OGR/ppc/ogr-vec.cpp"
      fi
    fi # HAVE_OGR
  #-----------------------------------------------------------------
  elif [ "$2" = "arm" ]; then
    if [ "$HAVE_RC5_64" = 1 ]; then
      DEFAULT_RC5_64="0"
      if [ "$1" = "riscos" ]; then
        if [ "$3" = "gccsdk" ]; then
          TARGET_ADDASMS="$TARGET_ADDASMS rc5/arm/rc5-arm-1-gccsdk.s \
                                          rc5/arm/rc5-arm-2-gccsdk.s \
                                          rc5/arm/rc5-arm-3-gccsdk.s"
        else
          TARGET_ADDASMS="$TARGET_ADDASMS rc5/arm/rc5-arm-1.s \
                                          rc5/arm/rc5-arm-2.s \
                                          rc5/arm/rc5-arm-3.s"
        fi
      elif [ "$1-$3" = "linux-elf" ]; then
        TARGET_ADDASMS="$TARGET_ADDASMS rc5/arm/rc5-arm-1-gnu-elf.s \
                                        rc5/arm/rc5-arm-2-gnu-elf.s \
                                        rc5/arm/rc5-arm-3-gnu-elf.s"
      else
        TARGET_ADDASMS="$TARGET_ADDASMS rc5/arm/rc5-arm-1-gnu.s \
                                        rc5/arm/rc5-arm-2-gnu.s \
                                        rc5/arm/rc5-arm-3-gnu.s "
      fi
    fi # HAVE_RC5_64
    if [ "$HAVE_DES" = 1 ]; then
      DEFAULT_DES="0"
      if [ "$1" = "riscos" ]; then
        if [ "$3" = "gccsdk" ]; then
          echo Add des asm cores for arm-riscos-gccsdk!
          exit 1
        else
          TARGET_ADDASMS="$TARGET_ADDASMS des/arm/des-slice-arm.s \
                                          des/arm/des-slice-sa.s"
        fi
      elif [ "$1-$3" = "linux-elf" ]; then
        TARGET_CCFLAGS="$TARGET_CCFLAGS -DKWAN"
        TARGET_ADDASMS="$TARGET_ADDASMS des/arm/des-slice-sa-gnu-elf.s \
                                        des/arm/des-slice-arm-gnu-elf.s"
      else
        TARGET_CCFLAGS="$TARGET_CCFLAGS -DKWAN"
        TARGET_ADDASMS="$TARGET_ADDASMS des/arm/des-slice-sa-gnu.s \
                                        des/arm/des-slice-arm-gnu.s"
      fi
    fi # HAVE_DES
    if [ "$HAVE_RC5_72" = 1 ]; then
      DEFAULT_RC5_72="0"
      if [ "$1" = "riscos" ]; then
        if [ "$3" = "gccsdk" ]; then
          TARGET_ADDASMS="$TARGET_ADDASMS rc5-72/arm/r72arm1-gccsdk.S \
                                          rc5-72/arm/r72arm2-gccsdk.S"
        else
          echo Add rc5-72 asm cores for arm-riscos!
          exit 1
        fi
      elif [ "$1-$3" = "linux-elf" ]; then
        TARGET_ADDASMS="$TARGET_ADDASMS rc5-72/arm/r72arm1-gnu-elf.S \
                                        rc5-72/arm/r72arm2-gnu-elf.S"
      elif [ "$1" = "nto2" ]; then
        TARGET_ADDASMS="$TARGET_ADDASMS rc5-72/arm/r72arm1-gnu-elf.S \
                                        rc5-72/arm/r72arm2-gnu-elf.S"
      else
        TARGET_ADDASMS="$TARGET_ADDASMS rc5-72/arm/r72arm1-gnu.S \
                                        rc5-72/arm/r72arm2-gnu.S"
      fi
    fi # HAVE_RC5_72
    if [ "$HAVE_OGR" = 1 ]; then
      if [ "$1" = "riscos" ]; then
        if [ "$3" = "gccsdk" ]; then
          TARGET_ADDASMS="$TARGET_ADDASMS ogr/arm/ogr_arm1-gccsdk.s \
                                          ogr/arm/ogr_arm2-gccsdk.s"
        else
          echo Add ogr asm cores for arm-riscos!
          exit 1
        fi
      elif [ "$1-$3" = "linux-elf" ]; then
        TARGET_ADDASMS="$TARGET_ADDASMS ogr/arm/ogr_arm1-gnu-elf.S \
                                        ogr/arm/ogr_arm2-gnu-elf.S"
      elif [ "$1" = "nto2" ]; then
        TARGET_ADDASMS="$TARGET_ADDASMS ogr/arm/ogr_arm1-gnu-elf.S \
                                        ogr/arm/ogr_arm2-gnu-elf.S"
      else
        TARGET_ADDASMS="$TARGET_ADDASMS ogr/arm/ogr_arm1-gnu.S \
                                        ogr/arm/ogr_arm2-gnu.S"
      fi
    fi # HAVE_OGR
  #-----------------------------------------------------------------
  elif [ "$2" = "88k" -o "$2" = "sh4" -o "$2" = "vax" \
      -o "$2" = "s390" -o "$2" = "s390x" -o "$2" = "generic" ]; then
    : # pure ansi targets. (2 pipeline RC5 core) ==> DEFAULT
  #-----------------------------------------------------------------
  elif [ "$2" = "ia64" ]; then
    if [ "$HAVE_RC5_64" = "1" ]; then
      DEFAULT_RC5_64="0"
      # pure ansi target. (4 pipeline RC5 core)
      TARGET_ADDSRCS="$TARGET_ADDSRCS $RC5_ANSI4_SRCS"
    fi # HAVE_RC5_64
  #-----------------------------------------------------------------
  else
    echo "Warning. Unknown arch '$2' to add_sources. Using all-ANSI cores."
  fi

  # DEFAULT handling and adding of -DHAVE_XXX_CORES

  if [ "$HAVE_RC5_64" = "1" ]; then
    TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_RC5_64_CORES"
    if [ "$DEFAULT_RC5_64" = "1" ]; then
      TARGET_ADDSRCS="$TARGET_ADDSRCS $RC5_ANSI2_SRCS"
    fi
  fi

  if [ "$HAVE_RC5_72" = "1" ]; then
    TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_RC5_72_CORES"
    if [ "$DEFAULT_RC5_72" = "1" ]; then
      TARGET_ADDSRCS="$TARGET_ADDSRCS $RC5_72_ANSI_SRCS"
    fi
  fi

  if [ "$HAVE_OGR" = "1" ]; then
    TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_OGR_CORES"
    TARGET_HDIRS="$TARGET_HDIRS ./$OGR"
    if [ "$DEFAULT_OGR" = "1" ]; then
      TARGET_ADDSRCS="$TARGET_ADDSRCS $OGR_ANSI_SRCS"
    fi
  fi

  if [ "$HAVE_DES" = "1" ]; then
    TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_DES_CORES"
    TARGET_ADDSRCS="$TARGET_ADDSRCS common/convdes.cpp"
    if [ "$DEFAULT_DES" = "1" ]; then :
      TARGET_CCFLAGS="$TARGET_CCFLAGS -DKWAN -DMEGGS"
      TARGET_ADDSRCS="$TARGET_ADDSRCS $MEGGS_SLICE_SRCS2"
    fi
  fi

  if [ "$HAVE_CSC" = "1" ]; then
    TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_CSC_CORES"
    TARGET_HDIRS="$TARGET_HDIRS ./csc"
    if [ "$DEFAULT_CSC" = "1" ]; then
      TARGET_ADDSRCS="$TARGET_ADDSRCS $CSC_ANSI_SRCS"
    fi
  fi
}

# -------------------------------------------------------------------

inferred_arch=""
inferred_ver_major=0
inferred_ver_minor=0
infer_arch_and_version() { # $1=OS name to be expected from uname -s
  os_name=`uname -s`
  if [ "X$os_name" = "X$1" ]; then
    inferred_ver_major=`uname -r|cut -d. -f1`
    inferred_ver_minor=`uname -r|cut -d. -f2`
    inferred_arch=`uname -m`

    #i486-iX86 is linux idiocy
    if [ "$inferred_arch" = "i386" \
      -o "$inferred_arch" = "i486" \
      -o "$inferred_arch" = "i586" \
      -o "$inferred_arch" = "i686" \
      -o "$inferred_arch" = "i786" ]; then
      inferred_arch="x86"
    fi
  else
    echo "$1 targets can only be built on $1"
    exit 1
  fi
}

# -------------------------------------------------------------------

OPTS_GCC=""   # for TARGET_CCFLAGS, constructed from generate_gcc_opts()
OPTS_GAS=""   # for TARGET_ASFLAGS, constructed from generate_gcc_opts()

# ----------------------------------------------------------------------

gccver=0
gcc_get_ver() {

  gccver=0
  if [ "${1}X" = "X" ]; then
    if [ "${TARGET_CC}X" = "X" ]; then  # should not happen
      TARGET_CC="gcc"                   # since TARGET_CC is set by default
    fi
    gcc_v=`$TARGET_CC -v 2>&1`
    #gcc_v="gcc version 2.7.2.1"
    #gcc_v="Reading specs from blah\ngcc version 2.96 19991004 (experimental)"
    #gcc_v="gcc version egcs-2.91.66 19990314 (egcs-1.1.2 release)"
    #gcc_v="gcc driver version 2.7.2.3 executing gcc version 2.95.2"
    #gcc_v="Reading specs from blah\ngcc version 2.9-hppa-991112"
    #gcc_v="Apple Computer, Inc. version gcc-926, based on gcc version 2.95.2 19991024 (release)"
    #gcc_v="Reading specs from blah\nConfigured with: blah\nThread model: blah\ngcc version 3.2"
    #gcc_v="Apple Computer, Inc. GCC version 1175, based on gcc version 3.1 20020420 (prerelease)"

    gccver_line=`echo $gcc_v|tail -1|tr '-' ' '`
    #echo "gccver_line=#$gccver_line#"
    lastwas=""
    ver_num=""
    for ver_word in $gccver_line ; do
      if [ "${ver_num}X" = "X" ]; then
        #echo "verword=#$ver_word#,ver_num=#$ver_num#,laswas=#$lastwas#"
        if [ "$lastwas" = "version" ]; then
          if [ "$ver_word" = "egcs" -o "$ver_word" = "pgcc" ]; then
            lastwas="version"
          elif [ "$ver_word" = "gcc" ]; then
            lastwas="ignoreme"
          elif [ "$ver_word" = "specific" ]; then # --enable-version-specific-runtime-libs
            lastwas="ignoreme"
          else
            ver_num="$ver_word"
          fi
        elif [ "$ver_word" = "version" -a "$lastwas" = "driver" ]; then
          lastwas="driver"
        elif [ "$ver_word" = "version" -a "$lastwas" = "GCC" ]; then
          lastwas="AppleGCC" # captialized GCC indicates the Apple version
        else
          lastwas="$ver_word"
        fi
      fi
    done
    echo "ver_num=#$ver_num#"
    if [ "${ver_num}X" = "X" ]; then
      gccver=0
    else
      gccver=`echo $ver_num|tr '.' ' '`
      gcc_get_ver $gccver
    fi
  else
    a1=$1
    a2=$2
    a3=$3
    a4=$4
    #echo "1=$1,2=$2,3=$3,4=$4"
    if [ -z "$a1" ]; then
      a1=0
    fi
    if [ -z "$a2" ]; then
      a2=0
    fi
    if [ -z "$a3" ]; then
      a3=0
    fi
    if [ -z "$a4" ]; then
      a4=0
    fi
    #2.7.2.1 = 2000000 +  70000 +  200 + 1 = 2070201
    #2.95.1  = 2000000 + 950000 +  100     = 2950100
    #2.91.66 = 2000000 + 910000 + 6600     = 2916600
    #3.2     = 3000000 +  20000 +    0     = 3020000
    gccver=`echo "($a1 * 1000000)+($a2 * 10000)+($a3 * 100)+$a4" | bc`
    #echo $gccver
  fi
}

generate_gcc_opts() {

# GCC: warn as much as we can for maximum portability
  OPTS_GCC_WARN="-W -Wall -Wtraditional -Wpointer-arith -Wcast-align \
                 -Wmissing-declarations -Wmissing-prototypes \
                 -Wstrict-prototypes -Wconversion -Winline \
                 -Waggregate-return -Wcast-qual -Woverloaded-virtual \
                 -Wnested-externs" #-Wshadow shows std header errors
  OPTS_GCC310_WARN="-W -Wall -Wpointer-arith -Wcast-align \
                 -Wmissing-prototypes \
                 -Wstrict-prototypes -Wconversion -Winline \
                 -Waggregate-return -Wcast-qual -Woverloaded-virtual"
  OPTS_GCC_BASE="-fcaller-saves -fomit-frame-pointer \
                 -fno-inline-functions"
  OPTS_272_PLUS="-fno-handle-exceptions -fno-rtti"
  #WARNING WARNING: 2.95.x (at least x<=.3) will cause problem.cpp to mis-
  # compile if using -fno-exceptions and/or -fno-rtti. On x86 selftest will
  # miscompile if using an -O level greater than -O2 _and_ -funroll-loops
  #WARNING WARNING: don't use 2.8.x at all.
  OPTS_295_PLUS="-fstrict-aliasing" #-fno-exceptions -fno-rtti
  OPTS_310_PLUS="-fstrict-aliasing -fno-exceptions -fno-rtti"
  OPTS_GCC272="${OPTS_GCC_WARN} ${OPTS_GCC_BASE} ${OPTS_272_PLUS}"
  OPTS_GCC295="${OPTS_GCC_WARN} ${OPTS_GCC_BASE} ${OPTS_295_PLUS}"
  OPTS_GCC310="${OPTS_GCC310_WARN} ${OPTS_GCC_BASE} ${OPTS_310_PLUS}"


  #this is a list of which -O does what for 2.72.x - 2.95.2
  #(see <gccsrc>/gcc/toplev.c; grep for "optimize ")
  #(-O? is always handled first, regardless of where it occurs on the cmdline)
  # == O0: -fno-inline -Winline
  # >= 01: -fdefer-pop -fomit-frame-pointer 
  #        2.95 only: -fthread-jumps (-fdelayed-branch)
  # >= 02: -frerun-cse-after-loop -fcse-follow-jumps -fcse-skip-blocks 
  #        -fexpensive-optimizations -fstrength-reduce 
  #        2.72 only: -fthread-jumps -felide-constructors (-fdelayed-branch)
  #        2.95 only: -fgcse -frerun-loop-opt -fcaller-saves
  #                   -fforce-mem (-fschedule-insns), 
  #                   -fflag-regmove (-fschedule-insns-after-reload)
  # >= 03: -finline-functions

  #
  # old option list
  #OPTS_GCC272="-fcaller-saves -fcse-follow-jumps -fcse-skip-blocks \
  #	     -fexpensive-optimizations -fomit-frame-pointer \
  #	     -frerun-cse-after-loop -fstrength-reduce -fthread-jumps \
  #	     -funroll-loops -fno-inline-functions -fno-handle-exceptions \
  #          -fno-rtti ${OPTS_GCC_WARN}"
  #OPTS_GCC295="-fomit-frame-pointer -fno-inline-functions \
  #	     -fstrict-aliasing -fno-exceptions -fno-rtti ${OPTS_GCC_WARN}"


  gcc_get_ver
  if [ $gccver -lt 2000000 ]; then
    echo "gcc version less than 2, or something strange happened"
    exit 1
  fi

  # ------

  opts272=""
  opts295=""
  opts310=""
  arch="internal-$1"  # do it this way to hide from "./configure list"
  case "$arch" in

    *internal-generic)
        opts272="$OPTS_GCC272"
        opts295="$OPTS_GCC295"
        opts310="$OPTS_GCC310"
        ;;

    *internal-mips)
        opts272="$OPTS_GCC272 -O6 -DASM_MIPS -funroll-loops"
        opts295="$OPTS_GCC295 -Os -DASM_MIPS -funroll-loops"
        opts310="$OPTS_GCC310 -Os -DASM_MIPS -funroll-loops"
        ;;

    *internal-sh4)
        opts295="$OPTS_GCC295 -O2 -DASM_SH4 -funroll-loops -static"
        opts310="$OPTS_GCC310 -O2 -DASM_SH4 -funroll-loops -static"
        ;;

    *internal-hppa)
        opts272="$OPTS_GCC272 -O6 -DASM_HPPA -funroll-loops -static"
        opts295="$OPTS_GCC295 -O2 -DASM_HPPA -funroll-loops -static"
        opts310="$OPTS_GCC310 -O2 -DASM_HPPA -funroll-loops -static"
        #OPTS_EGCS="$OPTS_EGCS -O2 -D_HPUX_M68K -static"
        ;;

    *internal-88k)
        opts272="$OPTS_GCC272 -O6 -DCPU_ID=CPU_88K -funroll-loops"
        opts295="$OPTS_GCC295 -O2 -DCPU_ID=CPU_88K -funroll-loops"
        opts310="$OPTS_GCC310 -O2 -DCPU_ID=CPU_88K -funroll-loops"
        ;;

    *internal-s390)
        opts272="$OPTS_GCC272 -O3 -D__S390__ -U__i386__ -funroll-loops"
        opts295="$OPTS_GCC295 -O3 -D__S390__ -U__i386__ -funroll-loops \
                 -fno-caller-saves"
        opts310="$OPTS_GCC310 -O3 -D__S390__ -U__i386__ -funroll-loops \
                 -fno-caller-saves"
        ;;

    *internal-s390x)
        opts272="$OPTS_GCC272 -O3 -D__S390X__ -U__i386__ -funroll-loops"
        opts295="$OPTS_GCC295 -O3 -D__S390X__ -U__i386__ -funroll-loops \
                 -fno-caller-saves"
        opts310="$OPTS_GCC310 -O3 -D__S390X__ -U__i386__ -funroll-loops \
                 -fno-caller-saves"
        ;;

    *internal-ia64)
        opts295="$OPTS_GCC295 -O2 -D__IA64__"
        opts310="$OPTS_GCC310 -O2 -D__IA64__"
        ;;

    *internal-vax)
        opts272="$OPTS_GCC272 -O2 -DASM_VAX -funroll-loops"
        opts295="$OPTS_GCC295 -O2 -DASM_VAX -funroll-loops"
        opts310="$OPTS_GCC310 -O2 -DASM_VAX -funroll-loops"
        ;;

    *internal-arm)
        opts272="$OPTS_GCC272 -DARM -DASM_ARM -funroll-loops"
        opts295="$OPTS_GCC295 -O2 -march=armv3 -mtune=strongarm -DARM -DASM_ARM \
                 -fschedule-insns -fschedule-insns2"
        opts310="$OPTS_GCC310 -O2 -march=armv3 -mtune=strongarm -DARM -DASM_ARM \
                 -fschedule-insns -fschedule-insns2"
        ;;

    *internal-sparc)  # (sparc/v7 [SS1/2/IPX]) (v8 [supersparc] is below)
        opts272="$OPTS_GCC272 -O6 -mcypress -DASM_SPARC -funroll-loops"
        opts295="$OPTS_GCC295 -O2 -mcpu=cypress -mtune=supersparc -DASM_SPARC -funroll-loops"
        opts310="$OPTS_GCC310 -O2 -mcpu=cypress -mtune=supersparc -DASM_SPARC -funroll-loops"
        ;;

    *internal-supersparc)  # (sparc/v8 [SS5+])
        opts272="$OPTS_GCC272 -O6 -msupersparc -DASM_SPARC -funroll-loops"
        opts295="$OPTS_GCC295 -O2 -mcpu=supersparc -DASM_SPARC -funroll-loops"
        opts310="$OPTS_GCC310 -O2 -mcpu=supersparc -DASM_SPARC -funroll-loops"
        ;;

    *internal-ultrasparc|*internal-sparc64)  # (sparc/v9 [Ultra])
        opts272="$OPTS_GCC272 -O6 FIXME-msupersparc -DASM_SPARC -funroll-loops"
        opts295="$OPTS_GCC295 -Os -mcpu=ultrasparc -fforce-mem -mvis \
                -fcall-used-g4 -fcall-used-g5 -fcall-used-g6 \
                -fstrict-aliasing -funroll-loops"
        opts310="$OPTS_GCC310 -Os -mcpu=ultrasparc -fforce-mem -mvis \
                -fcall-used-g4 -fcall-used-g5 -fcall-used-g6 \
                -fstrict-aliasing -funroll-loops"
        ;;

    *internal-68k) #the 68k targets all have different -m68xxx switches
        opts272="$OPTS_GCC272 -O6 -DASM_68K -funroll-loops"
        opts295="$OPTS_GCC295 -O2 -DASM_68K -funroll-loops"
        opts310="$OPTS_GCC310 -O2 -DASM_68K -funroll-loops"
        ;;

    *internal-ppc)
        opts272="$OPTS_GCC272 -O6 -DASM_PPC -funroll-loops"
        opts295="$OPTS_GCC295 -O3 -DASM_PPC -funroll-loops"
        opts310="$OPTS_GCC310 -O3 -DASM_PPC -funroll-loops"
        ;;

    *internal-ppc603e)
        opts272="$OPTS_GCC272 -O6 -DASM_PPC -mcpu=603e -funroll-loops"
        opts295="$OPTS_GCC295 -O2 -DASM_PPC -mcpu=603e -funroll-loops"
        opts310="$OPTS_GCC310 -O2 -DASM_PPC -mcpu=603e -funroll-loops"
        ;;

    *internal-ppc604)
        opts272="$OPTS_GCC272 -O6 -DASM_PPC -mcpu=604 -funroll-loops"
        opts295="$OPTS_GCC295 -O2 -DASM_PPC -mcpu=604 -funroll-loops"
        opts310="$OPTS_GCC310 -O2 -DASM_PPC -mcpu=604 -funroll-loops"
        ;;

    *internal-power)
        opts272="$OPTS_GCC272 -O6 -DASM_POWER -mcpu=power -funroll-loops"
        opts295="$OPTS_GCC295 -O6 -DASM_POWER -mcpu=power -funroll-loops"
        opts310="$OPTS_GCC310 -O6 -DASM_POWER -mcpu=power -funroll-loops"
        ;;

    *internal-aixcommon)
        opts272="$OPTS_GCC272 -O6 -DASM_COM -mcpu=common -funroll-loops"
        opts295="$OPTS_GCC295 -O6 -DASM_COM -mcpu=common -funroll-loops"
        opts310="$OPTS_GCC310 -O6 -DASM_COM -mcpu=common -funroll-loops"
        ;;

    *internal-alpha)
        opts272="$OPTS_GCC272 -O6 -DASM_ALPHA -static -funroll-loops"
	if [ "$1" = "alpha" -a "$2" = "freebsd" ]; then
	  # 2.95 optimizer is broken on FreeBSD/alpha :-(
          opts295="$OPTS_GCC295 -O1 -DASM_ALPHA -funroll-loops"
	else
          opts295="$OPTS_GCC295 -O3 -DASM_ALPHA -funroll-loops"
	fi
        opts310="$OPTS_GCC310 -O3 -DASM_ALPHA -funroll-loops -mcpu=ev5"
        ;;

    *internal-x86)
        opts272="$OPTS_GCC272 -O6 -DASM_X86 -funroll-loops"
        opts295="$OPTS_GCC295 -O2 -DASM_X86 -mcpu=pentiumpro -fforce-addr \
                 -malign-functions=5 -malign-loops=4 -funroll-loops"
        opts310="$OPTS_GCC310 -O2 -DASM_X86 -mcpu=pentiumpro -fforce-addr \
                 -falign-functions=5 -falign-loops=4 -funroll-loops"
        ;;

    *) # no default needed
        ;;

  esac

  # undefine everything we used locally
  OPTS_GCC_WARN=
  OPTS_GCC310_WARN=
  OPTS_GCC_BASE=
  OPTS_272_PLUS=
  OPTS_295_PLUS=
  OPTS_310_PLUS=
  OPTS_GCC272=
  OPTS_GCC295=
  OPTS_GCC310=

  # ------

  gccopts="$opts295" # 2.96 and 3.0 are not recommended
  if [ $gccver -ge 3010000 ]; then
    gccopts="$opts310" # 3.1 and above
  fi
  if [ $gccver -lt 2960000 ]; then
    gccopts="$opts295"
    if [ $gccver -lt 2900000 ]; then
      gccopts="$opts272"
    fi
  fi
  OPTS_GCC="$gccopts"
}

if [ "$1" = "-gccver" ]; then   # this won't work if you don't have gcc/g++
  gcc_get_ver
  echo "Interpreted GCC version: $gccver"
  exit 1
fi

# ----------------------------------------------------------------------
# non-GCC
# ----------------------------------------------------------------------

#-- Sparc, Sun CC

OPTS_CC_SPARC='-fast -xO4 -xtarget=ultra1/140 -DASM_SPARC'
OPTS_AS_ULTRA="-xarch=v8plusa"

#-- MIPS, Irix MIPSpro compilers

# ABI specific options
OPTS_MIPSPRO_ABI_32="-n32 -mips3 -r4000"
OPTS_MIPSPRO_ABI_64="-64 -mips4 -r10000"
OPTS_CC_MIPSPRO="-O3 -IPA -LNO:opt=1 -xansi -DMIPSpro"

# Common across all MIPSpro compiles:
OPTS_MIPSPRO_CCFLAGS="${OPTS_CC_MIPSPRO} -DIRIX -DHAVE_POSIX_THREADS -DHAVE_OGR_CORES"
OPTS_MIPSPRO_DOCS="docs/readme._ix"

# Common to a specific ABI:
OPTS_MIPSPRO_CCFLAGS_32="${OPTS_MIPSPRO_CCFLAGS} ${OPTS_MIPSPRO_ABI_32}"
OPTS_MIPSPRO_CCFLAGS_64="${OPTS_MIPSPRO_CCFLAGS} ${OPTS_MIPSPRO_ABI_64}"
OPTS_LD_MIPSPRO_32="${OPTS_MIPSPRO_CCFLAGS} ${OPTS_MIPSPRO_ABI_32}"
OPTS_LD_MIPSPRO_64="${OPTS_MIPSPRO_CCFLAGS} ${OPTS_MIPSPRO_ABI_64}"

#-- Alpha, DEC cc

OPTS_CC_ALPHA_EV4='-O4 -tune ev4 -inline all'
OPTS_CC_ALPHA_EV5='-O4 -tune ev5 -inline all'
OPTS_CC_ALPHA='-O4 -fast -arch ev56 -tune ev56 -inline all'

#-- PPC, IBM xlC

#OPTS_XLC is being referred to but was nowhere to be found.
OPTS_XLC_PPC601="$OPTS_XLC -qarch=ppc -qtune=601 -D_AIX -D_ARCH_PPC"
OPTS_XLC_PPC="$OPTS_XLC -qarch=ppc -qtune=604 -D_AIX -D_ARCH_PPC"
OPTS_XLC_POWER="$OPTS_XLC -qarch=pwr -qtune=pwr -D_AIX -D_ARCH_PWR"
OPTS_XLC_POWER2="$OPTS_XLC -qarch=pwr2 -qtune=pwr2 -D_AIX -D_ARCH_PWR2"
OPTS_XLC3="-O3 -qansialias -qlibansi"
OPTS_XLC3_PPC601="$OPTS_XLC3 -qarch=ppc -qtune=601 -D_AIX -D_ARCH_PPC"
OPTS_XLC3_POWER="$OPTS_XLC3 -qarch=pwr -qtune=pwr -D_AIX -D_ARCH_PWR"

#-- PPC, MetroWerks

OPTS_MWCC="-O7 -lang cplus"
OPTS_MWCC_PPC603="$OPTS_MWCC -proc 603e"
OPTS_MWCC_PPC604="$OPTS_MWCC -proc 604e"

#-- Watcom 10.6 QNX 4.2x

OPTS_WATCOMCC="-DASM_X86 -Osax -4 -mf"
#OPTS_WATCOMCC="-DASM_X86 -g"

# -------------------------------------------------------------------------

#
# Source C++ files making up the base client code.
#
# ---- speed sensitive things come last ----
COMMON_SRCS="\
	     common/iniread.cpp  \
	     common/buffbase.cpp \
	     common/mail.cpp     \
	     common/random.cpp   \
	     common/clicdata.cpp \
	     common/clitime.cpp  \
	     common/disphelp.cpp \
	     common/clievent.cpp \
	     common/cpucheck.cpp \
	     common/pathwork.cpp \
	     common/cliident.cpp \
	     common/logstuff.cpp \
	     common/triggers.cpp \
	     common/coremem.cpp  \
	     common/selcore.cpp  \
	     common/cmdline.cpp  \
	     common/selftest.cpp \
	     common/pollsys.cpp  \
	     common/setprio.cpp  \
	     common/console.cpp  \
	     common/modereq.cpp  \
	     common/confmenu.cpp \
	     common/confrwv.cpp  \
	     common/confopt.cpp  \
	     common/checkpt.cpp  \
	     common/util.cpp     \
	     common/base64.cpp   \
	     common/netbase.cpp  \
	     common/netconn.cpp  \
	     common/client.cpp   \
	     common/projdata.cpp \
	                         \
	     common/bench.cpp    \
	     common/probman.cpp  \
	     common/probfill.cpp \
	     common/clirun.cpp   \
	     common/problem.cpp" #speed sensitive things come last

# conditional addition if files are present
#
if [ -f "common/scram.cpp" -o -f "common/scram.h" -o \
     -f "common/buffpriv.cpp" -o -f "common/buffupd.cpp" ]; then
COMMON_SRCS="common/buffpriv.cpp \
	     common/scram.cpp    \
	     common/buffupd.cpp  \
	     ${COMMON_SRCS}"
else
COMMON_SRCS="common/buffpub.cpp \
	     ${COMMON_SRCS}"
fi
if [ -f "common/minihttp.cpp" -o -f "common/netio.cpp" -o \
     -f "common/xmlserve.cpp" ]; then
COMMON_SRCS="common/minihttp.cpp \
	     common/netio.cpp    \
	     common/xmlserve.cpp \
	     ${COMMON_SRCS}"
TARGET_CCFLAGS="$TARGET_CCFLAGS -DXMLSERVE"
fi

# **********************************************************************

case "$1" in

# Misc / Generic

    *ansi-generic)      # unoptimized vanilla ansi
        TARGET_AS="cc -c"
        TARGET_CC="cc"
        TARGET_CCFLAGS="-DASM_NONE"
        have_gcc=`whereis -b g++`
        if [ "X$have_gcc" != "X" -a "X$have_gcc" != "Xg++:" ]; then
          TARGET_AS="gcc -c"
          TARGET_CC="g++"
          generate_gcc_opts "generic" "ansi"
          TARGET_CCFLAGS="$OPTS_GCC $TARGET_CCFLAGS"
        fi
        TARGET_LDFLAGS=""
        TARGET_LIBS=""
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL=""
        add_sources "ansi" "generic"
        ;;

# 88k ******************************************************************

    *88k-dgux)          # data general unix
        TARGET_CC="/usr/local/bin/g++"
        generate_gcc_opts "88k" "dgux"
        TARGET_CCFLAGS="$OPTS_GCC -D_POSIX4A_DRAFT6_SOURCE -D_DGUX -DHAVE_POSIX_THREADS"
        TARGET_LIBS="-lthread"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "hpux" "88k"
        ;;

# Alpha ****************************************************************

    *alpha-digital_unix)
        TARGET_CC="g++"
        TARGET_AS="as"
        generate_gcc_opts "alpha" "digital-unix"
        TARGET_CCFLAGS="$OPTS_GCC -DSINGLE_CRUNCHER_ONLY"
        TARGET_ASFLAGS=""
        TARGET_LDFLAGS="-static"
        TARGET_LIBS="-lrt"
        TARGET_TARBALL="digital_unix-alpha"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "digital-unix" "alpha"
        ;;

    *alpha-linux)       # dworz / jlawson
        TARGET_CC="g++"
        TARGET_AS="as"
        generate_gcc_opts "alpha" "linux"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS=""
        TARGET_LIBS=""
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="linux-alpha"
        add_sources "linux" "alpha"
        ;;

    *alpha-linux-static)       # dworz / jlawson / kamy
        TARGET_CC="g++"
        TARGET_AS="as"
        generate_gcc_opts "alpha" "linux"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="-static"
        TARGET_LIBS=""
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="linux-alpha-static"
        add_sources "linux" "alpha"
        ;;

    *alpha-netbsd)
        TARGET_CC="g++"
        generate_gcc_opts "alpha" "netbsd"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="-static"
        TARGET_LIBS="-ltermcap"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="netbsd-alpha-elf"
        add_sources "netbsd" "alpha"
        ;;

    *alpha-openbsd)     # snake
        TARGET_AS="g++ -c"
        TARGET_CC="g++"
        generate_gcc_opts "alpha" "openbsd"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="-static"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="openbsd-alpha"
        add_sources "openbsd" "alpha"
        ;;

# ARM ******************************************************************

    *arm-linux-aout)    # chrisb
        TARGET_CC="gcc"
        TARGET_AS="as"
        generate_gcc_opts "arm" "linux"
        TARGET_CCFLAGS="$OPTS_GCC -Dlinux"
        TARGET_LIBS="-lm"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="linux-arm-aout"
        add_sources "linux" "arm" "aout"
        ;;

    *arm-linux-elf)     # teichp
        TARGET_CC="gcc"
        TARGET_AS="gcc -c"
        generate_gcc_opts "arm" "linux"
        TARGET_CCFLAGS="$OPTS_GCC -Dlinux -DHAVE_POSIX_THREADS"
        TARGET_LIBS="-lpthread"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="linux-arm-elf"
        add_sources "linux" "arm" "elf"
        ;;

    *arm-linux-elf_single)     # teichp
        TARGET_CC="gcc"
        TARGET_AS="gcc -c"
        generate_gcc_opts "arm" "linux"
        TARGET_CCFLAGS="$OPTS_GCC -Dlinux -DSINGLE_CRUNCHER_ONLY"
        TARGET_LIBS=""
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="linux-arm-elf_single"
        add_sources "linux" "arm" "elf"
        ;;

    *arm-netbsd)        # teichp
        TARGET_CC="gcc"
        TARGET_AS="gcc -c"
        generate_gcc_opts "arm" "netbsd"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LIBS="-lm"
        TARGET_TARBALL="netbsd-arm32"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "netbsd" "arm"
        ;;

    *arm-nto2)
        TARGET_AS="qcc -Vgcc_ntoarmle -c"
        TARGET_CC="qcc -Vgcc_ntoarmle"
        TARGET_ASFLAGS="-DNO_BALIGN"
        TARGET_CCFLAGS="-lang-c++ -fomit-frame-pointer -fno-inline-functions \
                        -fno-exceptions -fno-rtti -DASM_ARM -DHAVE_POSIX_THREADS"
        TARGET_LIBS="-lsocket"
        TARGET_DOCFILES="docs/readme._ix"
        TARGET_TARBALL="nto2-arm"
        TARGET_GENMAN=
        TARGET_IS_CROSSCOMPILE=1
        add_sources "nto2" "arm"
        ;;

    *arm-riscos)
        TARGET_CC="armcpp -aif -nodebug -littleend -apcs 3/26bit/swst/hardfp/fpe2 \
            -zps1 -nounusedareas -l/home/cberry/play/riscoslib/CLib/stubs.o"
        TARGET_AS="armasm"
        TARGET_ASFLAGS="-apcs 3/26bit"
        TARGET_CCFLAGS="-Icommon -Irc5/arm -Ides -I$OGR -Iplat/riscos \
                        -I/home/cberry/play/riscoslib/OSLib \
                        -I/home/cberry/play/riscoslib/TCPIPLibs \
                        -J/home/cberry/play/riscoslib/CLib \
                        -DCOMPAT_INET4 -D__riscos -DHAVE_OGR_CORES"
        TARGET_LIBS="-lcpplib /home/cberry/play/riscoslib/TCPIPLibs/unixlib.o \
                     /home/cberry/play/riscoslib/TCPIPLibs/inetlib.o \
                     /home/cberry/play/riscoslib/TCPIPLibs/socklib.o"
        TARGET_DOCFILES="docs/readme.riscos"   #platform specific docfile
        TARGET_STRIP=touch
        TARGET_BINNAME_SUFFIX=",ff8"
        TARGET_IS_CROSSCOMPILE=1
        add_sources "riscos" "arm"
        ;;

    *arm-riscos-gccsdk) # RiscOS client crosscompiled under Unix using GCCSDK
                        # and Unixlib (http://ard-mofo.dsvr.net/)
        TARGET_CC="/home/peter/gccsdk-2.95.4-v3/cross/bin/gcc"
        generate_gcc_opts "arm" "riscos"
        TARGET_CCFLAGS="$OPTS_GCC -Iplat/riscos -D__riscos"
        TARGET_AS="/home/peter/gccsdk-2.95.4-v3/cross/bin/gcc"
        TARGET_ASFLAGS="-c"
        TARGET_DOCFILES="docs/readme.riscos"   #platform specific docfile
        TARGET_TARBALL="riscos-arm"
        TARGET_STRIP=touch
        TARGET_BINNAME_SUFFIX=",ff8"
        TARGET_ARCTYPE="riscoszip"
        TARGET_IS_CROSSCOMPILE=1
        add_sources "riscos" "arm" "gccsdk"
        ;;

# IA64 *****************************************************************

    *ia64-linux)
        TARGET_AS="gcc -c"
        TARGET_CC="gcc"
        generate_gcc_opts "ia64" "linux"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LIBS=""
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="linux-ia64"
        add_sources "linux" "ia64"
        ;;

# MIPS *****************************************************************

    # IRIX w/MIPSpro compilers.
    #
    # The following targets generate builds targetted to specific
    # SGI platforms, taking into account CPU type, L1/L2 cache
    # sizes, etc. Targets ending in -64 are for the 64 bit ABI,
    # otherwise the build is for the n32 ABI.
    #
    # The code currently compiles multithreaded, however I expect to
    # be able to get performance as good as (or better than) the
    # rc5 mips-crunch core by running single threaded and using the
    # MIPSpro compiler internal multithreading support against a
    # generic ANSI core.  This will require Makefile modifications to
    # allow us to compile C code with the C compiler (vs. running it
    # through the C++ front-end); in order to get the optimizations
    # only available to native C code.
    #
    # The targets assume MIPSpro compilers at release 7.2 or newer,
    # and an Irix 6.3 or newer build platform. All compiler
    # optimizations are guarded with "#ifdef MIPSpro". Use
    # _COMPILER_VERSION if you need to check the exact version of the
    # compiler.
    #
    # Run "hinv -c processor" to see which binary is applicable for
    # your platform.
    #
    # lyndon@orthanc.ab.ca (Nov 28, 1999)

    *mips-cc-n32)	# [lyndon]	Generic 32 bit client
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_32} \
                       -DCLIENT_OS_NAME=\"\\\"Irix (generic-n32)\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO_32}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES="${OPTS_MIPSPRO_DOCS} readme.irix"
       TARGET_TARBALL="irix6.5-mips-n32"
       add_sources "irix" "mips"
       ;;

    *mips-cc-64)	# [lyndon]	Generic 64 bit client
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_64} \
                       -DCLIENT_OS_NAME=\"\\\"Irix (generic-64)\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO_64}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES="${OPTS_MIPSPRO_DOCS} readme.irix"
       TARGET_TARBALL="irix6.5-mips-64"
       add_sources "irix" "mips"
       ;;

    *mips-cc-ip19)	# [lyndon]
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_32} -TARG:platform=ip19 \
            -DCLIENT_OS_NAME=\"\\\"Irix IP19\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip19"
       add_sources "irix" "mips"
       ;;

    *mips-cc-ip20)	# [lyndon]
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_32} -TARG:platform=ip20 \
                       -DCLIENT_OS_NAME=\"\\\"Irix IP20\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip20"
       add_sources "irix" "mips"
       ;;

    *mips-cc-ip21)	# [lyndon]
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_32} -TARG:platform=ip21 \
                       -DCLIENT_OS_NAME=\"\\\"Irix IP21\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip21"
       add_sources "irix" "mips"
       ;;

    *mips-cc-ip22_4k)	# [lyndon]
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_32} -TARG:platform=ip22_4k \
                       -DCLIENT_OS_NAME=\"\\\"Irix IP22/R4K\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip22_4k"
       add_sources "irix" "mips"
       ;;

    *mips-cc-ip22_5k)	# [lyndon]
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_32} -TARG:platform=ip22_5k \
                       -DCLIENT_OS_NAME=\"\\\"Irix IP22/R5K\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip22_5k"
       add_sources "irix" "mips"
       ;;

    *mips-cc-ip24)	# [lyndon]
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_32} -TARG:platform=ip24 \
                       -DCLIENT_OS_NAME=\"\\\"Irix IP24\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip24"
       add_sources "irix" "mips"
       ;;

    *mips-cc-ip25)	# [lyndon]
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_32} -TARG:platform=ip25 \
                       -DCLIENT_OS_NAME=\"\\\"Irix IP25\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip25"
       add_sources "irix" "mips"
       ;;

    *mips-cc-ip26)	# [lyndon]
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_32} -TARG:platform=ip26 \
                       -DCLIENT_OS_NAME=\"\\\"Irix IP26\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip26"
       add_sources "irix" "mips"
       ;;

    *mips-cc-ip27)	# [lyndon]
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_32} -TARG:platform=ip27 \
                       -DCLIENT_OS_NAME=\"\\\"Irix IP27\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip27"
       add_sources "irix" "mips"
       ;;

    *mips-cc-ip27-64)	# [lyndon]
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_64} -TARG:platform=ip27 \
                       -DCLIENT_OS_NAME=\"\\\"Irix IP27-64\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO_64}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip27-64"
       add_sources "irix" "mips"
       ;;

    *mips-cc-ip28)	# [lyndon]
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_32} -TARG:platform=ip28 \
                       -DCLIENT_OS_NAME=\"\\\"Irix IP28\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip28"
       add_sources "irix" "mips"
       ;;

    *mips-cc-ip30)	# [lyndon]
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_32} -TARG:platform=ip30 \
                       -DCLIENT_OS_NAME=\"\\\"Irix IP30\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip30"
       add_sources "irix" "mips"
       ;;

    *mips-cc-ip32_5k)	# [lyndon]
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_32} -TARG:platform=ip32_5k \
               -DCLIENT_OS_NAME=\"\\\"Irix IP32/R10K\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip32_5k"
       add_sources "irix" "mips"
       ;;

    *mips-cc-ip32_10k)	# [lyndon]
       TARGET_CC="CC"
       TARGET_CCFLAGS="-ISA -LNO ${OPTS_MIPSPRO_CCFLAGS_32} -TARG:platform=ip32_10k \
                       -DCLIENT_OS_NAME=\"\\\"Irix IP32/R10K\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip32_10k"
       add_sources "irix" "mips"
       ;;

    *mips-cc-ip32_10k-64)
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_64} -TARG:platform=ip32_10k \
                       -DCLIENT_OS_NAME=\"\\\"Irix IP32/R10K-64\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO_64}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip32_10k-64"
       add_sources "irix" "mips"
       ;;

# END of MIPSpro targets.

    *mips-linux)
        TARGET_CC="gcc"
        generate_gcc_opts "mips" "linux"
        TARGET_CCFLAGS="$OPTS_GCC -mcpu=r3000"
        TARGET_LDFLAGS=""
        TARGET_LIBS=""
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="linux-mips"
        add_sources "linux" "mips"
        ;;

    *mipsel-linux-ps2)  #For PS2 Linux [jt(jt@distributed.net)]
        TARGET_CC="gcc"
        generate_gcc_opts "mips" "linux"
        TARGET_CCFLAGS="$OPTS_GCC -mcpu=r5900 -DSINGLE_CRUNCHER_ONLY -D__ps2linux__"
        TARGET_LDFLAGS=""
        TARGET_LIBS=""
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="ps2linux-mipsel"
        add_sources "linux" "mips" "ps2"
        ;;

    *mips-sni)	        #For MIPS SINIX
        TARGET_CC="g++"
        generate_gcc_opts "mips" "sinix"
        TARGET_CCFLAGS="$OPTS_GCC -Dsinix"
        TARGET_LIBS="-lsocket -lnsl -lc -L/usr/ucblib -lucb"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "sni" "mips"
        ;;

    *mips-irix5-gcc)	# gcc is faster because it can use mips-crunch.cpp
        # If compiling on Irix 5 you must -D_irix5_ now to get the usleep()
        # replacement.
        TARGET_CC="g++"
        generate_gcc_opts "mips" "irix"
        TARGET_CCFLAGS="$OPTS_GCC -D_irix5_"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "irix" "mips"
        ;;

    *mips-irix64-gcc)   #needs "very recent" egcs
        TARGET_CC="g++"
        generate_gcc_opts "mips" "irix"
        TARGET_CCFLAGS="$OPTS_GCC -mabi=64 -DHAVE_POSIX_THREADS"
        TARGET_LDFLAGS="-mabi=64"
        TARGET_LIBS="-lpthread"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "irix" "mips"
        ;;

    *mips-irix32-gcc)	# [lyndon] Irix 6, gcc, threaded (assumes n32 ABI)
        TARGET_CC="gcc"
        generate_gcc_opts "mips" "irix"
        TARGET_CCFLAGS="$OPTS_GCC -mabi=n32 -DHAVE_POSIX_THREADS"
        TARGET_LIBS="-lpthread"
        TARGET_TARBALL="irix6-mips-n32"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "irix" "mips"
        ;;

    *mipsel-netbsd)     # [snake] NetBSD on DECstation, PS2, ARC etc.
        TARGET_CC="g++"
        generate_gcc_opts "mips" "netbsd"
        TARGET_CCFLAGS="$OPTS_GCC -DSINGLE_CRUNCHER_ONLY"
        TARGET_LDFLAGS="-static"
        TARGET_LIBS="-ltermcap"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="netbsd-mipsel-elf"
        add_sources "netbsd" "mips"
        ;;

    *mipseb-netbsd)     # NetBSD on SGI, Sony NEWS etc.
        TARGET_CC="g++"
        generate_gcc_opts "mips" "netbsd"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="-static"
        TARGET_LIBS="-ltermcap"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="netbsd-mipseb"
        add_sources "netbsd" "mips"
        ;;

    #*mips-ultrix-gcc)	# For mips based DEC Ultrix machines
    #    TARGET_CC="g++"
    #    generate_gcc_opts "mips" "irix"
    #    TARGET_CCFLAGS="$OPTS_GCC"
    #    TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
    #    add_sources "ultrix" "mips"
    #    ;;

    *mipsle-nto2)
        TARGET_AS="qcc -Vgcc_ntomipsle -c"
        TARGET_CC="qcc -Vgcc_ntomipsle"
        TARGET_ASFLAGS="-DNO_BALIGN"
        TARGET_CCFLAGS="-lang-c++ -fomit-frame-pointer -fno-inline-functions \
                        -fno-exceptions -fno-rtti \
                        -DASM_MIPS -DHAVE_POSIX_THREADS"
        TARGET_LIBS="-lsocket"
        TARGET_DOCFILES="docs/readme._ix"
        TARGET_TARBALL="nto2-mipsle"
        TARGET_GENMAN=
        TARGET_IS_CROSSCOMPILE=1
        add_sources "nto2" "mips"
        ;;

    *mipsbe-nto2)
        TARGET_AS="qcc -Vgcc_ntomipsbe -c"
        TARGET_CC="qcc -Vgcc_ntomipsbe"
        TARGET_ASFLAGS="-DNO_BALIGN"
        TARGET_CCFLAGS="-lang-c++ -fomit-frame-pointer -fno-inline-functions \
                        -fno-exceptions -fno-rtti \
                        -DASM_MIPS -DHAVE_POSIX_THREADS"
        TARGET_LIBS="-lsocket"
        TARGET_DOCFILES="docs/readme._ix"
        TARGET_TARBALL="nto2-mipsbe"
        TARGET_GENMAN=
        TARGET_IS_CROSSCOMPILE=1
        add_sources "nto2" "mips"
        ;;

    *linux-sh4)   #  <Rule@freegates.be>
        TARGET_CC="sh4-linux-g++"
        TARGET_AS="sh4-linux-g++ -c"
        TARGET_STRIP="sh4-linux-strip"
        generate_gcc_opts "sh4" "linux"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="$TARGET_LDFLAGS -static"
        TARGET_DOCFILES="docs/readme._ix"
        TARGET_TARBALL="linux-sh4"
        add_sources "linux" "sh"
        TARGET_IS_CROSSCOMPILE=1
        ;;

    *linux-hppa-cross)   #  <Rule@freegates.be>
        TARGET_CC="hppa-linux-g++"
        TARGET_AS="hppa-linux-g++ -c"
        TARGET_STRIP="hppa-linux-strip"
        generate_gcc_opts "hppa" "linux"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="$TARGET_LDFLAGS -static"
        TARGET_DOCFILES="docs/readme._ix"
        TARGET_TARBALL="linux-hppa"
        add_sources "linux" "hppa"
        TARGET_IS_CROSSCOMPILE=1
        ;;

    *hpux-hppa-CC) # obsolete? Not used by Ivo...
        TARGET_CC="CC"
        TARGET_CCFLAGS="+a1 +O3 -D_HPUX -DASM_HPPA"
        TARGET_LDFLAGS='+A +DA2.0'
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "hpux" "hppa"
        ;;

    *hpux-hppa-gcc)  # [ivo]
        TARGET_CC="g++"
        generate_gcc_opts "hppa" "hpux"
        TARGET_CCFLAGS="$OPTS_GCC -DMIPSpro"
        TARGET_LDFLAGS="" #-lpthread"
        TARGET_TARBALL="hpux1020-hppa11"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "hpux" "hppa"
        ;;

    *hpux-hppa-nonmt-gcc) 
        TARGET_CC="g++"
        generate_gcc_opts "hppa" "hpux"
        TARGET_CCFLAGS="$OPTS_GCC -DMIPSpro -DSINGLE_CRUNCHER_ONLYA"
        TARGET_LDFLAGS="" #-lpthread"
        TARGET_TARBALL="hpux1020-hppa11-nonmt"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "hpux" "hppa"
        ;;

    *hpux-m68k-gcc)
        TARGET_CC="g++"
        generate_gcc_opts "68k" "hpux"
        TARGET_CCFLAGS="$OPTS_GCC -m68030 -D_HPUX_M68K -static"
        TARGET_LDFLAGS="-static"
        TARGET_ASFLAGS="$OPTS_GAS -v -V --register-prefix-optional -m68030"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "hpux" "68k"
        ;;

###### Sparc/UltraSparc

    *sparc-openbsd)                   # [snake]
        TARGET_CC="g++"
        generate_gcc_opts "sparc" "openbsd"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="-static"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="openbsd-sparc-aout"
        add_sources "openbsd" "sparc"
        ;;

    *sparc-netbsd)                    # [snake], for sun4[cdm]
        TARGET_CC="g++"
        generate_gcc_opts "sparc" "netbsd"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="-static"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="netbsd-sparc-elf"
        add_sources "netbsd" "sparc"
        ;;

    *sparc64-netbsd)                    # [snake], for sun4u
        TARGET_CC="g++"
        generate_gcc_opts "sparc64" "netbsd"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="-static"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="netbsd-sparc64-elf"
        add_sources "netbsd" "sparc"
        ;;

    *sparc-linux)       # teichp
        TARGET_CC="gcc"
        TARGET_AS="gcc -c"
        generate_gcc_opts "sparc" "linux"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="-static"
        TARGET_LIBS=""
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="linux-sparc"
        add_sources "linux" "sparc"
        ;;

    *sparc-sunos-gcc-nomt)   # [ivo sunos413/nomt]
        TARGET_CC="gcc"
        generate_gcc_opts "sparc" "sunos"
        TARGET_CCFLAGS="$OPTS_GCC -Dsunos"
        TARGET_LIBS="-lnsl -ldl"
        TARGET_LDFLAGS=""
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TRAGET_TARBALL="sunos413-sparc-nomt"
        add_sources "sunos" "sparc"
        ;;

    *sparc-solaris-gcc-nomt)   # [ivo solaris/nomt]
        TARGET_CC="gcc"
        generate_gcc_opts "supersparc" "solaris"
        TARGET_CCFLAGS="-pipe $OPTS_GCC -Dsolaris"
        TARGET_LIBS="-lnsl -lsocket -ldl"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TRAGET_TARBALL="solaris26-sparc-nomt"
        add_sources "solaris" "sparc"
        ;;


    *sparc-solaris-gcc)   # [andreasb sparc/v7]
        TARGET_CC="gcc"
        generate_gcc_opts "sparc" "solaris"
        TARGET_CCFLAGS="-pipe $OPTS_GCC -Dsolaris -DHAVE_POSIX_THREADS"
        TARGET_LIBS="-lnsl -lsocket -ldl -lpthread"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="solaris26-sparc"
        add_sources "solaris" "sparc"
        ;;

    *sparc-solaris-gcc-super)   # [andreasb sparc/v8]
        TARGET_CC="gcc"
        generate_gcc_opts "supersparc" "solaris"
        TARGET_CCFLAGS="-pipe $OPTS_GCC -Dsolaris -DHAVE_POSIX_THREADS"
        TARGET_LIBS="-lnsl -lsocket -ldl -lpthread"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="solaris26-supersparc"
        add_sources "solaris" "sparc"
        ;;

    *sparc-solaris-gcc-ultra)   # [andreasb sparc/v9 32 bit] ERROR
        echo "ERROR: gcc can't do this right, check ULONG_MAX vs. sizeof(long)"
        TARGET_CC="gcc"
        generate_gcc_opts "ultrasparc" "solaris"
        TARGET_CCFLAGS="-pipe $OPTS_GCC -Dsolaris -DHAVE_POSIX_THREADS"
        TARGET_LIBS="-lnsl -lsocket -ldl -lpthread"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="solaris26-ultrasparc"
        add_sources "solaris" "sparc"
        ;;


    *sparc-solaris-cc-v7)   # [andreasb sparc/v7]
        TARGET_CC="CC"
        OPTS_CC_SOLARIS="-fast -xO4 -xarch=v7 -DASM_SPARC"
        TARGET_CCFLAGS="$OPTS_CC_SOLARIS -Dsolaris -DHAVE_POSIX_THREADS"
        TARGET_LIBS="-lnsl -lsocket -ldl -lpthread"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="solaris26-sparc-cc-v7"
        add_sources "solaris" "sparc" "cc"
        ;;

    *sparc-solaris-cc-v8a)   # [andreasb sparc/v8a]
        TARGET_CC="CC"
        OPTS_CC_SOLARIS="-fast -xO4 -xarch=v8a -DASM_SPARC"
        TARGET_CCFLAGS="$OPTS_CC_SOLARIS -Dsolaris -DHAVE_POSIX_THREADS"
        TARGET_LIBS="-lnsl -lsocket -ldl -lpthread"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="solaris26-sparc-cc-v8a"
        add_sources "solaris" "sparc" "cc"
        ;;

    *sparc-solaris-cc-v8)   # [andreasb sparc/v8]
        TARGET_CC="CC"
        OPTS_CC_SOLARIS="-fast -xO4 -xarch=v8 -DASM_SPARC"
        TARGET_CCFLAGS="$OPTS_CC_SOLARIS -Dsolaris -DHAVE_POSIX_THREADS"
        TARGET_LIBS="-lnsl -lsocket -ldl -lpthread"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="solaris26-sparc-cc-v8"
        add_sources "solaris" "sparc" "cc"
        ;;

    *sparc-solaris-cc-ultra)   # [andreasb sparc/v9 32 bit]
        TARGET_CC="CC"
        OPTS_CC_SOLARIS="-fast -xO4 -xtarget=ultra -DASM_SPARC"
        TARGET_ASFLAGS="$TARGET_ASFLAGS -xarch=v8plus"
        TARGET_CCFLAGS="$OPTS_CC_SOLARIS -Dsolaris -DHAVE_POSIX_THREADS"
        TARGET_LIBS="-lnsl -lsocket -ldl -lpthread"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="solaris26-sparc-cc-ultra"
        add_sources "solaris" "sparc" "cc"
        ;;

    *sparc-solaris-cc-universal)   # [snikkel sparc 32 bit]
        TARGET_CC="CC"
        TARGET_LD="cc"
        TARGET_LDFLAGS="-mt"      
        OPTS_CC_SOLARIS="-fast -xtarget=generic -xarch=generic -DASM_SPARC"
        TARGET_CCFLAGS="$OPTS_CC_SOLARIS -mt -Dsolaris"
        TARGET_LIBS="-lnsl -lsocket -ldl -lthread"    # Linking and order
                                       #specific for solaris 2.5 compatibility
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="solaris-sparc"
        add_sources "solaris" "sparc" "cc"   
        ;;

    *sparc-solaris-gcc-ultra-des)   # [ivo ultra] very fast DES -> hence obsolete
        TARGET_CC="gcc"
        # See Also: ultrasparc/s_paramaters.h
        #OPTS_DES_ULTRA_C="-DDES_ULTRA -DINLINE=' ' -DIN_DCTI_CLIENT \
        #	  -DLOW_WORD_VALID -DMANUAL_REGISTER_ALLOCATION  \
        #	  -DKWAN_LOOP_SLICE='unsigned long' -Iplat/ultrasparc"
        generate_gcc_opts "generic" "solaris"
        OPTS_DES_ULTRA_ASM="-DIN_DCTI_CLIENT -DDES_ULTRA -DINLINE=inline \
                            -DFULL_64_BIT_VALID -DASM \
                            -DMANUAL_REGISTER_ALLOCATION -DDO_FLOAT_PIPE  \
                            -DUSE_IDENTICAL_FLOAT_REGISTERS \
                            -DUSE_64_BIT_SENTINEL \
                            -DKWAN_LOOP_SLICE='unsigned long' \
                            -Iplat/ultrasparc \
                            -mtune=ultrasparc -fforce-mem -fstrict-aliasing\
                            -mv8plus -mvis -mepilogue -Wa,-xarch=v8plusa \
                            -mflat -Os -fcall-used-g4 -fcall-used-g5 \
                            -fcall-used-g6"
        TARGET_CCFLAGS="${OPTS_GCC} -pipe $OPTS_DES_ULTRA_ASM -Dsolaris \
                        -DHAVE_POSIX_THREADS"
        TARGET_ASFLAGS="$OPTS_AS_ULTRA"
        TARGET_LIBS="-lnsl -lsocket -ldl -lpthread"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="solaris26-ultrasparc-des"
        add_sources "solaris" "sparc" "ultra"
        ;;

    #####

    *x86-solaris)    # gcc, mt, dynamic
        TARGET_CC="gcc"
        generate_gcc_opts "x86" "solaris"
        TARGET_CCFLAGS="$OPTS_GCC -Dsolaris -DHAVE_POSIX_THREADS -D_REENTRANT"
        TARGET_LIBS="-ldl -lc -lmp -lnsl -lsocket -lthread"
        TARGET_DOCFILES="docs/readme._ix"
        TARGET_TARBALL="solaris-x86"
        add_sources "solaris" "x86"
        ;;

###### PowerPC/POWER

    *ppc-linux)		             # [myshkin] linux-ppc
        TARGET_CC="g++"
        generate_gcc_opts "ppc" "linux"
        TARGET_CCFLAGS="$OPTS_GCC -maltivec -mabi=altivec"
        TARGET_LDFLAGS="-static"
        TARGET_LIBS=""
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="linux-ppc"
        add_sources "linux" "ppc" "altivec"
        ;;

    *ppc-netbsd)                 # [snake]
        TARGET_CC="g++"
        generate_gcc_opts "ppc" "netbsd"
        TARGET_CCFLAGS="$OPTS_GCC"
        #TARGET_CCFLAGS="$OPTS_GCC -maltivec -mabi=altivec"
        TARGET_LDFLAGS="-static"
        TARGET_LIBS="-ltermcap"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="netbsd-ppc"
        add_sources "netbsd" "ppc"
        #add_sources "netbsd" "ppc" "altivec" # not yet AltiVec
        ;;

    *ppc-macosxserver) # [mfeiri] (MACH 2.x based: MXS 1.x, Darwin 0.x, Rhapsody)
        TARGET_CC="c++"
        #generate_gcc_opts "ppc" "macosx"
        TARGET_CCFLAGS="-O6"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="macosxserver-ppc"
        add_sources "macosx" "ppc" "mach2"
        ;;

    *ppc-macosx)       # [mfeiri] (MACH 3.x based: MacOSXDP, Darwin 1.0)
        #TARGET_CC="c++"
        generate_gcc_opts "ppc" "macosx"
        TARGET_CCFLAGS="$OPTS_GCC -DHAVE_POSIX_THREADS -faltivec -mdynamic-no-pic" # -force_cpusubtype_ALL 
        TARGET_LDFLAGS="-framework IOKit -framework CoreFoundation"
        TARGET_DOCFILES="docs/readme.macosx.rtf"   #platform specific docfile
        TARGET_TARBALL="macosx-ppc"
        add_sources "macosx" "ppc"
        ;;

  ### AIX PPC targets
        # classes are buggy with AIX !

    *ppc-aix4-xlc)	 # This is the fastest build for AIX 4.x PPC machines
        TARGET_CC="xlC"
        TARGET_CCFLAGS="$OPTS_XLC_PPC"
        TARGET_LIBS="-lCns"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "aix" "ppc" "aix4"
        ;;

    *ppc601-aix4-xlc)      # AIX 4.x PPC, 601 chip
        TARGET_CC="xlC"
        TARGET_CCFLAGS="$OPTS_XLC_PPC601"
        TARGET_LIBS="-lCns"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "aix" "ppc" "aix4"
        ;;

    *ppc-aix32-xlc)	   # AIX 3.2.x PPC
        TARGET_CC="xlC"
        TARGET_CCFLAGS="$OPTS_XLC3_PPC601"
        TARGET_LIBS="-lCns"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "aix" "ppc" "aix32"
        ;;

    *ppc-aix32-gcc)	   # AIX 3.2.x gcc/egcs [patrick] <patrick@mail4you.de>
        TARGET_CC="g++"
        generate_gcc_opts "ppc" "aix"
        TARGET_CCFLAGS="$OPTS_GCC -D_AIX"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "ppc" "aix" "aix32"
        ;;

  ### AIX POWER targets
        # AIX POWER this one works for all platforms (AIX 3.x, 4.[1-3])!

    *power-aix)           # gcc/egcs [patrick] <patrick@mail4you.de>
        TARGET_CC="g++"
        generate_gcc_opts "power" "aix"
        TARGET_CCFLAGS="$OPTS_GCC -D_AIX"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "aix" "power"
        ;;

    *aix-all)                       # [patrick] new all in one AIX target
        # WARNING: the code will show a PPC CPU even though also POWER
        # CPUs are supported !
        TARGET_CC="g++"
        generate_gcc_opts "power" "aix"
        AIXPOWERFLAGS="$OPTS_GCC -mthreads -D_AIX"
        generate_gcc_opts "ppc" "aix"
        AIXPPC601FLAGS="$OPTS_GCC -mthreads -mcpu=601 -D_AIX"
        generate_gcc_opts "ppc604" "aix"
        AIXPPC604FLAGS="$OPTS_GCC -mthreads -D_AIX"
        generate_gcc_opts "aixcommon" "aix"
        TARGET_CCFLAGS="$OPTS_GCC -mthreads -D_AIX -D_AIXALL"
        # ogr_power.o uses the same source as ogr.o, 
        # only different compiler seetings
        TARGET_ADDOBJS="output/ogr_power.o $TARGET_ADDOBJS"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_LIBS=$TARGET_LIBS
        TARGET_LDFLAGS="$TARGET_LDFLAGS -mthreads"
        TARGET_TARBALL="aix-all-aix4.1"
        add_sources "aix" "power" "aixall" #easier to do under power than ppc
        ;;

    *aix-powerandppc)                       #[Stan] all in one AIX target (newest)
        # -= [Stan] adapted from patricks aix-all =-
        # WARNING: the code will show a PPC CPU even though also POWER
        # CPUs are supported !
        TARGET_CC="g++"
        generate_gcc_opts "power" "aix"
        AIXPOWERFLAGS="$OPTS_GCC -mthreads -D_AIX -DHAVE_RC5_72_CORES -DHAVE_OGR_CORES"
        generate_gcc_opts "aixcommon" "aix"
        TARGET_CCFLAGS="$OPTS_GCC -mthreads -D_AIX -D_AIXALL"
        # ogr_power.o uses the same source as ogr.o,
        # only different compiler seetings
        TARGET_ADDOBJS="output/ogr_power.o $TARGET_ADDOBJS"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_LIBS=$TARGET_LIBS
        TARGET_LDFLAGS="$TARGET_LDFLAGS -mthreads"
        TARGET_TARBALL="aix-powerandppc-aix4"
        add_sources "aix" "power" "aixall" #easier to do under power than ppc
        ;;

  ### QNX PPC targets
    *ppc-nto2)
        TARGET_AS="qcc -Vgcc_ntoppcbe -c"
        TARGET_CC="qcc -Vgcc_ntoppcbe"
        TARGET_ASFLAGS="-DNO_BALIGN"
        TARGET_CCFLAGS="-lang-c++ -fomit-frame-pointer -fno-inline-functions \
                        -fno-exceptions -fno-rtti -DASM_PPC -DHAVE_POSIX_THREADS"
        TARGET_LIBS="-lsocket"
        TARGET_DOCFILES="docs/readme._ix"
        TARGET_TARBALL="nto2-ppcbe"
        TARGET_GENMAN=
        TARGET_IS_CROSSCOMPILE=1
        add_sources "nto2" "ppc"
        ;;

###### SH4 platforms

  ### SH4 QNX targets

    *sh4le-nto2)
        TARGET_AS="qcc -Vgcc_ntoshle -c"
        TARGET_CC="qcc -Vgcc_ntoshle"
        TARGET_ASFLAGS="-DNO_BALIGN"
        TARGET_CCFLAGS="-lang-c++ -fomit-frame-pointer -fno-inline-functions \
                        -fno-exceptions -fno-rtti -DASM_SH4 -DHAVE_POSIX_THREADS"
        TARGET_LIBS="-lsocket"
        TARGET_DOCFILES="docs/readme._ix"
        TARGET_TARBALL="nto2-sh4le"
        TARGET_GENMAN=
        TARGET_IS_CROSSCOMPILE=1
        add_sources "nto2" "sh4"
        ;;

    *sh4be-nto2)
        TARGET_AS="qcc -Vgcc_ntoshbe -c"
        TARGET_CC="qcc -Vgcc_ntoshbe"
        TARGET_STRIP="/usr/gcc/bin/ntoshbe-strip"
        TARGET_ASFLAGS="-DNO_BALIGN"
        TARGET_CCFLAGS="-lang-c++ -fomit-frame-pointer -fno-inline-functions \
                        -fno-exceptions -fno-rtti -DASM_SH4 -DHAVE_POSIX_THREADS"
        TARGET_LIBS="-lsocket"
        TARGET_DOCFILES="docs/readme._ix"
        TARGET_TARBALL="nto2-sh4be"
        TARGET_GENMAN=
        TARGET_IS_CROSSCOMPILE=1
        add_sources "nto2" "sh4"
        ;;

###### Intel X86


    *x86-linux*)                # generic. works everywhere
        ### ***RELEASE*** targets - mt for all
        ### use of -Xlinker -omagic (for the SMC core) forces -static
        ### so which lib (libc4/libc5/glibc20/glibc21) the binary is linked
        ### against is fairly moot. HOWEVER, you _should_ add resolv.c
        ### to TARGET_ADDSRCS to be truly binary compatible. If you don't,
        ### dns lookup will either not work (or not work reliably), or segfault.
        ### The rest of the client is unaffected by the choice of libc, ie a
        ### client built on the newest-and-greatest linux will work even on 2.0.x
        ###
        infer_arch_and_version "Linux"
        if [ $inferred_ver_major -lt 2 ]; then # [jlawson] aout, no lurk
          isaout="aout"
          TARGET_NASM_FMT="aout"
          TARGET_CC="gcc"               # old gcc doesn't know .cpp
          TARGET_LD="gcc"
          OPTS_GCC="-x c++ -O2 -fomit-frame-pointer"
        else
          isaout=""
          TARGET_NASM_FMT="elf"
          TARGET_AS="gcc -c"          # can make aout if TARGET_CCFLAGS+=-aout
          TARGET_CC="gcc"
          generate_gcc_opts "${inferred_arch}" "linux"
        fi
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="$TARGET_LDFLAGS -static"
        TARGET_LIBS=""
        TARGET_TARBALL="linux-${inferred_arch}-${TARGET_NASM_FMT}"
        TARGET_DOCFILES="docs/readme.linux"   #platform specific docfile
        TARGET_USES_GNUMAKE="yes"
        add_sources "linux" "x86" $isaout
        case "internal-$1" in
          internal-*pthread*)
            TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_POSIX_THREADS"
            TARGET_LIBS="$TARGET_LIBS -lpthread"
            TARGET_TARBALL="${TARGET_TARBALL}-pthreads"
          ;;
        esac
        case "internal-$1" in
          internal-*static-nss*)                [andreasb] release clients are built with static-nss
          # the glibc in /usr/dnet has been compiled with --with-static-nss
          TARGET_LIBS="-L/usr/dnet/lib -Xlinker --whole-archive -lnss_files -lnss_dns -Xlinker --no-whole-archive -lresolv $TARGET_LIBS"
          ;;
        esac
        ;;

    *freebsd*)              # FreeBSD (autoselect Alpha/x86 and aout/elf)
                            # FreeBSD x86-elf >=2.2.4, cyp
                            # FreeBSD x86-aout 2.x, snake (experimental)
                            # FreeBSD sparc-elf 5.0, snake (experimental)
                            # FreeBSD alpha-elf 4.x, snake (experimental)
        infer_arch_and_version "FreeBSD"
        inferred_bf="elf"
        if [ $inferred_ver_major -lt 3 ]; then
          inferred_bf="aout"
          TARGET_NASM_FMT="aoutb"
        fi
        TARGET_AS="gcc -c"
        TARGET_CC="g++"
        generate_gcc_opts "${inferred_arch}" "freebsd"
        TARGET_CCFLAGS="$OPTS_GCC -Werror"
        TARGET_LDFLAGS="$TARGET_LDFLAGS -static"
        TARGET_LIBS="-lc" # NOT libc_r
        # note: we NEED to link against libc, and NOT libc_r because the libc_r
        # in 3.4 and above is incompatible with the pre-3.4 (specifically,
        # the >=3.4 libc_r versions of select() and nanosleep() syscalls
        # have their own new syscall numbers; they were emulated before).
        # We don't really need the libc_r stuff anyway because the "threads"
        # are really rfork()'d children.    -cyp Feb/13/2000
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="freebsd-${inferred_arch}-${inferred_bf}"
        add_sources "freebsd" "${inferred_arch}"
        ;;

    *x86-netbsd-aout)	# NetBSD 1.4.x, aout [bernd]
        TARGET_AS="gcc -c"
        TARGET_CC="g++"
        generate_gcc_opts "x86" "netbsd"
        TARGET_CCFLAGS="$OPTS_GCC -Werror"
        TARGET_LDFLAGS="-static"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_NASM_FMT="aoutb"
        TARGET_TARBALL="netbsd-x86-aout"
        add_sources "netbsd" "x86"
        ;;

    *x86-netbsd-elf)       # NetBSD > 1.4.x, elf, [bernd], snake
        TARGET_AS="gcc -c"
        TARGET_CC="g++"
        generate_gcc_opts "x86" "netbsd"
        TARGET_CCFLAGS="$OPTS_GCC -Werror"
        TARGET_LDFLAGS="-static"
        TARGET_LIBS="-lc"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="netbsd-x86-elf"
        add_sources "netbsd" "x86"
        ;;

    *x86-openbsd)	# snake
        TARGET_CC="g++"
        generate_gcc_opts "x86" "openbsd"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="-static"
        TARGET_NASM_FMT="aoutb"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="openbsd-x86-aout"
        add_sources "openbsd" "x86"
        ;;

    *x86-bsdos-aout)                        # BSD/OS 2.x,3.x (aout) -snake
        TARGET_AS="g++ -c -DNO_BALIGN"
        TARGET_CC="g++"
        generate_gcc_opts "x86" "bsdos"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="-static"
        TARGET_NASM_FMT="" #<- no nasm support
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="bsdos2-x86-aout"
        add_sources "bsdos" "x86"
        ;;

    *x86-bsdos-elf)                        # BSD/OS 4.x+ (ELF) -snake
        # bsdos-4 client is still experimental, found a severe bug with 
        # PentiumII now under BSD/OS 4.1 it seems to run except for rc5 core #9
        TARGET_AS="g++ -g -c -DNO_BALIGN"
        TARGET_CC="g++ -g "
        generate_gcc_opts "x86" "bsdos"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="-static"
        TARGET_NASM_FMT="elf"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="bsdos4-x86-elf"
        TARGET_STRIP="touch"                #for debugging
        add_sources "bsdos" "x86"
        ;;

    *x86-qnx4)
        TARGET_AS="cc -c"
        TARGET_CC="cc"
        TARGET_CCFLAGS="$OPTS_WATCOMCC -DSINGLE_CRUNCHER_ONLY"
        TARGET_LDFLAGS="-M"
        TARGET_STRIP="ls -l"
        TARGET_NASM="nasm"
        TARGET_NASM_FMT="obj"
        TARGET_LIBS="-lsocket"
        TARGET_ADDASMS=""
        TARGET_DOCFILES="docs/readme._ix"
        TARGET_GENMAN=
        TARGET_TARBALL="qnx4-x86"
        add_sources "qnx" "x86"
        ;;

    *x86-nto2)
        TARGET_AS="qcc -Vgcc_ntox86 -c"
        TARGET_CC="qcc -Vgcc_ntox86"
        TARGET_STRIP="strip"
        TARGET_NASM="nasm"
        TARGET_ASFLAGS="-DNO_BALIGN"
        TARGET_CCFLAGS="-lang-c++ -fomit-frame-pointer -fno-inline-functions \
                        -fcaller-saves -fstrict-aliasing -O2 \
                        -Wc,-mpentiumpro \
                        -fforce-addr -Wc,-malign-functions=5 \
                        -Wc,-malign-loops=4 -funroll-loops \
                        -fno-exceptions -fno-rtti -DHAVE_POSIX_THREADS \
                        -DASM_X86"
        TARGET_LIBS="-lsocket"
        TARGET_DOCFILES="docs/readme._ix"
        TARGET_TARBALL="nto2-x86"
        TARGET_GENMAN=
        add_sources "nto2" "x86"
        ;;

    *x86-sco5)
        TARGET_AS="g++ -c"
        TARGET_CC="g++"
        generate_gcc_opts "x86" "sco"
        TARGET_CCFLAGS="$OPTS_GCC -belf -Dsco5"
        TARGET_LDFLAGS="-static"
        TARGET_LIBS="-lsocket"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "sco" "x86"
        ;;

    *x86-dynix4)
        TARGET_CC="g++"
        TARGET_CCFLAGS="-DASM_X86"
        TARGET_LIBS="-lsocket -lnsl -lseq"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "dynix" "x86"
        ;;

    *x86-dynix2)
        TARGET_CC="g++"
        generate_gcc_opts "x86" "dynix"
        TARGET_CCFLAGS="$OPTS_GCC -D_SEQUENT_"
        TARGET_LDFLAGS="-L."
        # Don't panic; -lXbsd is for gettimeofday()
        TARGET_LIBS="-lsocket -linet -lnsl -lXbsd -lseq"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "dynix" "x86"
        ;;

###### NeXT (x86, m68k, sparc, hppa)

    *x86-next)
        TARGET_AS="gcc -c"
        TARGET_CC="gcc"
        generate_gcc_opts "x86" "next"
        TARGET_CCFLAGS="-static $OPTS_GCC -D_NeXT_ -Iplat/next"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="next-x86"
        add_sources "next" "x86"
        ;;

    *x86-macosx)
        # this one's for X86-Rhapsody which is quite similar to NeXTstep
        # but not completely identical     - snake
        TARGET_AS="cc -c"
        TARGET_CC="cc"
        TARGET_ASFLAGS="-DNO_BALIGN"
        TARGET_CCFLAGS="-DNO_BALIGN"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="rhapsody-x86"
        add_sources "macosx" "x86"
        ;;

    *m68k-next)
        TARGET_CC="gcc"
        generate_gcc_opts "68k" "next"
        TARGET_CCFLAGS="-static $OPTS_GCC -m68040 -D_NeXT_ -Iplat/next"
        TARGET_ASFLAGS="$OPTS_GAS"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="next-m68k"
        add_sources "next" "68k"
        ;;

    *sparc-next)
        TARGET_CC="cc++"
        generate_gcc_opts "generic" "next"
        TARGET_CCFLAGS="$OPTS_GCC -O6 -DASM_SPARC -arch sparc -D_NeXT_ -D_OLD_NEXT_ -Iplat/next"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "next" "sparc"
        ;;

    *hppa-next)
        TARGET_CC="cc++"
        generate_gcc_opts "generic" "next"
        TARGET_CCFLAGS="$OPTS_GCC -O6 -DASM_HPPA -arch hppa -D_NeXT_ -D_OLD_NEXT_ -Iplat/next"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "next" "hppa"
        ;;

    *m68k-openbsd)     # snake
        # this target does probably not work with a default system, you
        # will need to update gas and ld to > 2.0
        TARGET_CC="g++"
        #TARGET_CCFLAGS="-O6 -fno-exceptions -fomit-frame-pointer \
        #                -m68020-40 -DASM_68K -DLURK -DHAVE_OGR_CORES"
        generate_gcc_opts "68k" "openbsd"
        TARGET_CCFLAGS="$OPTS_GCC -m68020-40"
        TARGET_LDFLAGS="-static"
        TARGET_ASFLAGS="$OPTS_GAS"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="openbsd-m68k"
        add_sources "openbsd" "68k"
        ;;

    *m68k-netbsd) # NetBSD on NeXT, 68k Macs, 68k Amiga, sun3 etc, [snake]
        TARGET_CC="g++"
        TARGET_CCFLAGS="-O6 -fno-exceptions -fomit-frame-pointer \
                        -m68020-40 -DASM_68K -DLURK -DHAVE_OGR_CORES"
        TARGET_LDFLAGS="-static"
        TARGET_ASFLAGS="$OPTS_GAS"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="netbsd-m68k-elf"
        add_sources "netbsd" "68k"
        ;;

    *vax-netbsd)  # [snake]
        TARGET_CC="g++"
        generate_gcc_opts "vax" "netbsd"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="-static"
        TARGET_LIBS="-ltermcap"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="netbsd-vax"
        add_sources "netbsd" "vax"
        ;;

    *hppa32-linux)              # [friedbait]  fb@baiti.net,patch+rc5@zabbadoz.net
        TARGET_AS="gcc -c"
        TARGET_CC="gcc"
        generate_gcc_opts "hppa" "linux"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LIBS=""
        TARGET_DOCFILES="docs/readme._ix"
        TARGET_TARBALL="linux-hppa32"
        add_sources "linux" "hppa"
        ;;
    *hppa32-linux-static)       # [friedbait]  fb@baiti.net,patch+rc5@zabbadoz.net
        TARGET_AS="gcc -c"
        TARGET_CC="gcc"
        generate_gcc_opts "hppa" "linux"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="-static"
        TARGET_LIBS=""
        TARGET_DOCFILES="docs/readme._ix"
        TARGET_TARBALL="linux-hppa32-static"
        add_sources "linux" "hppa"
        ;;

    *s390-linux)	        # [pstadt] 31 Bit Linux on G5/G6 or older
        TARGET_AS="gcc -c"
        TARGET_CC="gcc"
        generate_gcc_opts "s390" "linux"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LIBS=""
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="linux-s390"
        add_sources "linux" "s390"
        ;;

    *s390-linux-static)	        # [pstadt] 31 Bit Linux on G5/G6 or older
        TARGET_AS="gcc -c"
        TARGET_CC="gcc"
        generate_gcc_opts "s390" "linux"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="-static"
        TARGET_LIBS=""
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="linux-s390-static"
        add_sources "linux" "s390"
        ;;

    *s390-linux-z)		# [pstadt] 31 Bit Linux on z/Architecture
        TARGET_AS="gcc -c"
        TARGET_CC="gcc"
        generate_gcc_opts "s390" "linux"
        TARGET_CCFLAGS="$OPTS_GCC -DS390_Z_ARCH -Wa,-Aesame"
        TARGET_LIBS=""
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="linux-s390-z"
        add_sources "linux" "s390"
        ;;

    *s390-linux-z-static)	# [pstadt] 31 Bit Linux on z/Architecture
        TARGET_AS="gcc -c"
        TARGET_CC="gcc"
        generate_gcc_opts "s390" "linux"
        TARGET_CCFLAGS="$OPTS_GCC -DS390_Z_ARCH -Wa,-Aesame"
        TARGET_LDFLAGS="-static"
        TARGET_LIBS=""
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="linux-s390-z-static"
        add_sources "linux" "s390"
        ;;

    *s390x-linux)	        # [pstadt] 64 Bit Linux on z/Architecture
        TARGET_AS="gcc -c"
        TARGET_CC="gcc"
        generate_gcc_opts "s390x" "linux"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LIBS=""
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="linux-s390x"
        add_sources "linux" "s390x"
        ;;

    *s390x-linux-static)        # [pstadt] 64 Bit Linux on z/Architecture
        TARGET_AS="gcc -c"
        TARGET_CC="gcc"
        generate_gcc_opts "s390x" "linux"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="-static"
        TARGET_LIBS=""
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="linux-s390x-static"
        add_sources "linux" "s390x"
        ;;

    *s390-os390)                     # [friedbait]  fb@baiti.net
        TARGET_CC="gcc"
        TARGET_AS=""
        generate_gcc_opts "s390" "os390"
        TARGET_CCFLAGS="$OPTS_GCC -D_ALL_SOURCE" #-D__STRING_CODE_SET__="ISO8859-1"
        TARGET_ADDASMS=""
        TARGET_LIBS="$SOCKS_LIBS"
        TARGET_DOCFILES="docs/readme.os390"   #platform specific docfile
        TARGET_TARBALL="os390-s390"
        add_sources "os390" "s390"
        ;;

    *x86-beos)
        TARGET_AS="gcc -c"
        TARGET_CC="gcc"
        generate_gcc_opts "x86" "beos"
        TARGET_CCFLAGS="$OPTS_GCC -fno-pic -O3 -Wno-multichar"
        TARGET_LDFLAGS="-static"
        TARGET_TARBALL="beos-x86"
        TARGET_DOCFILES="docs/readme.beos"   #platform specific docfile
        add_sources "beos" "x86"
        ;;

    *ppc-beos)
        TARGET_AS="mwcc -c"
        TARGET_CC="mwcc"
        TARGET_CCFLAGS="$OPTS_MWCC_PPC604"
        TARGET_STRIP="touch"
        TARGET_TARBALL="beos-ppc"
        TARGET_DOCFILES="docs/readme.beos"   #platform specific docfile
        add_sources "beos" "ppc"
        ;;

####### OS/2 (x86, emx)

    *x86-os2)          # [pfeffi] <pfeffi@distributed.net>
        basename ()
        {
        export parm=$1
        ksh -c 'echo ${parm##*/}'
        }
        TARGET_AS="gcc -c"
        TARGET_CC="gcc"
        generate_gcc_opts "x86" "os2"
        TARGET_CCFLAGS="-Zmt -pipe $OPTS_GCC -fexceptions -pedantic -Wno-long-long -I. -I${C_INCLUDE_PATH}"
        TARGET_LDFLAGS="-Zmt"
        TARGET_NASM_FMT="aout"
        TARGET_STRIP="emxbind -s"
        TARGET_ARCTYPE="zip"
        TARGET_NASM="nasm.exe"
        TARGET_LIBS="-lsocket -lvideo"
        TARGET_DOCFILES="docs/readme.os2"   #platform specific docfile
        TARGET_TARBALL="os2-x86-emx"
        TARGET_BINNAME_SUFFIX=".exe"
        TARGET_GENMAN=                               #no manpage
        TARGET_USES_GNUMAKE="yes"
        add_sources "os2" "x86"
        ;;

###### AmigaOS (m68k, PPC)
    *m68k-amigaos)              # [oliver] <oliver@futaura.co.uk>
        TARGET_AS="plat/amigaos/tools/genam_wrapper"
        TARGET_CC="g++"
        generate_gcc_opts "68k" "amigaos"
        TARGET_CCFLAGS="$OPTS_GCC -m68000 -fpermissive -I./ -I./plat/amigaos/guilib \
                        -D__AMIGADATE__=\`plat/amigaos/tools/amigadate\` \
                        -DDYN_TIMESLICE -Wno-unknown-pragmas"
        TARGET_LDFLAGS="-noixemul"
        TARGET_ASFLAGS="$OPTS_GAS"
        TARGET_ADDOBJS="/gg/lib/libnix/swapstack.o"
        TARGET_TARBALL="amigaos-68k"
        TARGET_DOCFILES="docs/readme.amiga"   #platform specific docfile
        TARGET_BINNAME_SUFFIX="_68k"
        TARGET_GENMAN=
        TARGET_ARCTYPE="amigaosgui"
        TARGET_MAKEARC="68k ${TARGET_BINNAME}_68k"
        add_sources "amigaos" "68k"
        ;;


    *ppc-amigaos-wos)           # [oliver] <oliver@futaura.co.uk>
        TARGET_AS="ppc-amigaos-gas"
        TARGET_CC="ppc-amigaos-g++"
        TARGET_ASFLAGS="-m603"
        generate_gcc_opts "ppc603e" "amigaos"
        TARGET_CCFLAGS="$OPTS_GCC -mmultiple -mstring -I./ -I./plat/amigaos/guilib \
                        -D__AMIGADATE__=\`plat/amigaos/tools/amigadate\` \
                        -DDYN_TIMESLICE"
        TARGET_TARBALL="amigaos-ppc-wos"
        TARGET_DOCFILES="docs/readme.amiga"   #platform specific docfile
        TARGET_STRIP="touch"
        TARGET_BINNAME_SUFFIX="_ppc"
        TARGET_GENMAN=
        TARGET_ARCTYPE="amigaosgui"
        TARGET_MAKEARC="ppc ${TARGET_BINNAME}_wos"
        add_sources "amigaos" "ppc"
        ;;

    *ppc-amigaos-pup)           # [oliver] <oliver@futaura.co.uk>
        TARGET_AS="ppc-amigaos-gas"
        TARGET_CC="ppc-amigaos-g++"
        TARGET_ASFLAGS="-m603"
        generate_gcc_opts "ppc603e" "amigaos"
        TARGET_CCFLAGS="$OPTS_GCC -pup -D__POWERUP__ -mmultiple -mstring \
                        -D__AMIGADATE__=\`plat/amigaos/tools/amigadate\` \
                        -I./ -I./plat/amigaos/guilib -DDYN_TIMESLICE"
        TARGET_LDFLAGS="-pup"
        TARGET_TARBALL="amigaos-ppc-pup"
        TARGET_DOCFILES="docs/readme.amiga"   #platform specific docfile
        TARGET_STRIP="plat/amigaos/tools/strip_pup"
        TARGET_BINNAME_SUFFIX="_ppc"
        TARGET_GENMAN=
        TARGET_ARCTYPE="amigaosgui"
        TARGET_MAKEARC="ppc ${TARGET_BINNAME}_pup"
        add_sources "amigaos" "ppc"
        ;;

###### Unknown
    *list)
	egrep "^[ ]*\*" $0 | grep -v internal | more
	echo ""
	exit 1
	;;
    *)
	echo "Unknown target platform \"$1\" specified."
	echo "Run with 'list' as an argument to see available platforms."
	echo ""
	exit 1
esac
echo "Platform target for \"$1\" recognized."

# -------------------------------------------------------------------

#
# Parse the rest of the command line
#
TARGET_CONFIGUREFLAGS=""
if [ "X$2" = "Xdebug" ]; then
  TARGET_CONFIGUREFLAGS="${TARGET_CONFIGUREFLAGS} debug"
  if [ $gccver -ne 0 ]; then
    TARGET_STRIP="touch"      # do not strip
    TARGET_CCFLAGS="${TARGET_CCFLAGS} -g"
    TARGET_TARBALL="${TARGET_TARBALL}-debug"
  else
    echo "Don't know how to add debug things for this compiler"
  fi
fi

#
# Build the test program
#
if [ -z "${TARGET_IS_CROSSCOMPILE}" ]; then
  echo "Building test program..."
  echo "${TARGET_CC} ${TARGET_CCFLAGS} common/testplat.cpp ${TARGET_LDFLAGS} ${TARGET_LIBS} -o testplat"
  ${SHELL} -c "${TARGET_CC} ${TARGET_CCFLAGS} common/testplat.cpp ${TARGET_LDFLAGS} ${TARGET_LIBS} -o testplat"
  if [ $? -ne 0 ]; then
    echo "Compilation failed.  Check your target options."
    echo " ---------------------------------------------"
    echo "${TARGET_CC} ${TARGET_CCFLAGS} common/testplat.cpp ${TARGET_LDFLAGS} ${TARGET_LIBS} -DOGRDIR=${OGR} -o testplat"
    echo " ---------------------------------------------"
    exit 1
  fi
  ${TARGET_STRIP} testplat
else
  cc common/testplat.cpp -o testplat
fi

#
# Finalize the NASM compilation options.
#
if [ -z "$TARGET_NASM_FMT" ]; then
  TARGET_NASM_FMT="elf"
fi
TARGET_NASMFLAGS="-f $TARGET_NASM_FMT" # -i rc5/x86/ -i des/x86/ -i csc/x86/"
if [ "$TARGET_NASM_FMT" = "elf" ]; then
  TARGET_NASMFLAGS="$TARGET_NASMFLAGS -d__ELF__"
elif [ "$TARGET_NASM_FMT" = "obj" ]; then
  TARGET_NASMFLAGS="$TARGET_NASMFLAGS -d__OMF__"
else
  TARGET_NASMFLAGS="$TARGET_NASMFLAGS -d__AOUT__" #for both aout and aoutb
fi


#
# Finalize the LD that will be used.
#
if [ -z "${TARGET_LD}" ]; then
  TARGET_LD="${TARGET_CC}"
fi


#
# Generate full doc file list.
#
if [ -f docs/readme.1st ]; then
  TARGET_DOCFILES="docs/readme.1st ${TARGET_DOCFILES}"
fi
TARGET_DOCFILES="${TARGET_DOCFILES} docs/CHANGES.txt docs/${TARGET_BINNAME}.txt"
if [ -n "$TARGET_IS_CROSSCOMPILE" ]; then
  TARGET_GENMAN=""
elif [ -n "$TARGET_GENMAN" ]; then
  TARGET_DOCFILES="${TARGET_DOCFILES} ${TARGET_BINNAME}.1"
fi

#
# Construct include paths
#
TARGET_INCSWITCHES=""
for incdir in ${TARGET_HDIRS}; do
  TARGET_INCSWITCHES="${TARGET_INCSWITCHES} -I${incdir}"
done

#
# Generate the list of output objects
#
TARGET_ALLOBJS=""        # obj, obj, obj, obj, ...
TARGET_SRCOBJLIST="none" # type1, src, obj, src, obj, ... type2, src, obj ...
                         # the "none" in there initially is a dummy to squelch
                         # leading space (and serve as a reset indicator)

#note that the order is common ... asm ... additional,
#and since speed sensitive common files are last in 'common'
#common-fast,asm,additional are all close together

if [ -n "${COMMON_SRCS}" ]; then
  echo "Scanning common C/C++ dependencies..."
  TARGET_SRCOBJLIST="${TARGET_SRCOBJLIST} cc"
  for target in ${COMMON_SRCS}; do
      TARGETOBJECT=`basename $target .c`
      TARGETOBJECT=output/`basename $TARGETOBJECT .cpp`.o
      echo "  ${target} -> ${TARGETOBJECT}"
      TARGET_ALLOBJS="${TARGET_ALLOBJS} ${TARGETOBJECT}"
      TARGET_SRCOBJLIST="${TARGET_SRCOBJLIST} $target ${TARGETOBJECT}"
  done
fi
if [ -n "${TARGET_ADDASMS}" ]; then
  echo "Scanning output AS dependencies..."
  TARGET_SRCOBJLIST="${TARGET_SRCOBJLIST} as"
  for target in ${TARGET_ADDASMS}; do
      TARGETOBJECT=`basename $target .s`
      TARGETOBJECT=output/`basename $TARGETOBJECT .S`.s.o
      echo "  $target -> $TARGETOBJECT"
      TARGET_ALLOBJS="${TARGET_ALLOBJS} ${TARGETOBJECT}"
      TARGET_SRCOBJLIST="${TARGET_SRCOBJLIST} $target ${TARGETOBJECT}"
  done
fi
if [ -n "${TARGET_ADDNASMS}" ]; then
  echo "Scanning output NASM dependencies..."
  TARGET_SRCOBJLIST="${TARGET_SRCOBJLIST} nasm"
  for target in ${TARGET_ADDNASMS}; do
      TARGETOBJECT=`basename $target .asm`
      TARGETOBJECT=output/`basename $target .asm`.o
      echo "  $target -> $TARGETOBJECT"
      TARGET_ALLOBJS="${TARGET_ALLOBJS} ${TARGETOBJECT}"
      TARGET_SRCOBJLIST="${TARGET_SRCOBJLIST} $target ${TARGETOBJECT}"
  done
fi
if [ -n "${TARGET_ADDSRCS}" ]; then
  echo "Scanning additional C/C++ dependencies..."
  TARGET_SRCOBJLIST="${TARGET_SRCOBJLIST} cc"
  for target in ${TARGET_ADDSRCS}; do
      TARGETOBJECT=`basename $target .c`
      TARGETOBJECT=output/`basename $TARGETOBJECT .cpp`.o
      echo "  ${target} -> ${TARGETOBJECT}"
      TARGET_ALLOBJS="${TARGET_ALLOBJS} ${TARGETOBJECT}"
      TARGET_SRCOBJLIST="${TARGET_SRCOBJLIST} $target ${TARGETOBJECT}"
  done
fi

#
# Generate the targets for supplementary resource files.
#
TARGET_RESBIND_CMD=""
if [ "$BUILDNAME" = "x86-os2" ]; then
  TARGET_RESBIND_CMD="rc output\\${TARGET_BINNAME}.res ${TARGET_BINNAME}${TARGET_BINNAME_SUFFIX}"
fi

# remove superfluous tabs and spaces             ( v-- that's a tab ! )
TARGET_CCFLAGS=`echo ${TARGET_CCFLAGS} | sed -e 's/	/ /g' -e 's/  */ /g'`

#
# Start building the output makefile.
#
echo "Generating output Makefile prologue code..."
rm -f Makefile

echo "# Autogenerated $TARGET_BINNAME client makefile ($1)" > Makefile
echo "# see http://www.distributed.net/ for details." >> Makefile
echo "" >> Makefile

echo "CC = ${TARGET_CC}" >> Makefile
echo "CP = ${TARGET_CP}" >> Makefile
echo "HPATHS = ${TARGET_INCSWITCHES}" >> Makefile
echo "CCFLAGS = ${TARGET_CCFLAGS} \${HPATHS}" >> Makefile
if [ "${BUILDNAME}" = "aix-all" ]; then
  echo "PPC601FLAGS = ${AIXPPC601FLAGS} \${HPATHS}" >> Makefile
  echo "PPC604FLAGS = ${AIXPPC604FLAGS} \${HPATHS}" >> Makefile
  echo "POWERFLAGS = ${AIXPOWERFLAGS} \${HPATHS}" >> Makefile
fi
if [ "${BUILDNAME}" = "aix-powerandppc" ]; then
  echo "POWERFLAGS = ${AIXPOWERFLAGS} \${HPATHS}" >> Makefile
fi
echo "LD = ${TARGET_LD}" >> Makefile
echo "LDFLAGS = ${TARGET_LDFLAGS}" >> Makefile
echo "LIBS = ${TARGET_LIBS}" >> Makefile
echo "AS = ${TARGET_AS}" >> Makefile
echo "ASFLAGS = ${TARGET_ASFLAGS}" >> Makefile
echo "NASM = ${TARGET_NASM}" >> Makefile
echo "NASMFLAGS = ${TARGET_NASMFLAGS}" >> Makefile
echo "STRIP = ${TARGET_STRIP}" >> Makefile
echo "ALLOBJS = ${TARGET_ALLOBJS}" >> Makefile
echo "ADDOBJS = ${TARGET_ADDOBJS}" >> Makefile
echo "BUILDNAME = $1" >> Makefile
echo "DOCFILES = ${TARGET_DOCFILES}" >>Makefile
if [ "$TARGET_USES_GNUMAKE" = "yes" ]; then
  # GNUMake $(shell ) evaluates only once - but this isn't supported by BSD make etc ...
  echo "BUILDNUM:= \$(shell grep \" CLIENT_BUILD_FRAC \" common/version.h|$TARGET_TR -dc 0123456789)" >>Makefile
else
  # this should work with every make ... hmm, except gnumake under os/2
  echo "BUILDNUM = \`grep \" CLIENT_BUILD_FRAC \" common/version.h|$TARGET_TR -dc 0123456789\`" >>Makefile
fi
echo "" >> Makefile


#
# Generate the main production targets in the makefile
#
echo "Generating Makefile production targets..."
echo "# Regular targets follow" >> Makefile

#
# Generate the main client binary target.
#
if [ "$BUILDNAME" = "x86-os2" ]; then
        # should be more generic... pfeffi 2002-11-03
        echo "${TARGET_BINNAME}${TARGET_BINNAME_SUFFIX}:	\${ALLOBJS} \${ADDOBJS} output/dnetc.res" >> Makefile
else
        echo "${TARGET_BINNAME}${TARGET_BINNAME_SUFFIX}:	\${ALLOBJS} \${ADDOBJS}" >> Makefile
fi
echo "	\${LD} \${LDFLAGS} \${ALLOBJS} \${ADDOBJS} \${LIBS} -o ${TARGET_BINNAME}${TARGET_BINNAME_SUFFIX}" >> Makefile
echo "	\${STRIP} ${TARGET_BINNAME}${TARGET_BINNAME_SUFFIX}" >> Makefile
if [ -n "$TARGET_RESBIND_CMD" ]; then
  echo "	$TARGET_RESBIND_CMD" >> Makefile
fi
if [ -n "$TARGET_GENMAN" ]; then
  echo "	./${TARGET_BINNAME}${TARGET_BINNAME_SUFFIX} -genman" >> Makefile
fi
if [ -n "$TARGET_TARBALL" ]; then
  if [ -f ./upload.sh ]; then
    FULLTARNAME="${TARGET_BINNAME}\${BUILDNUM}-${TARGET_TARBALL}\${ARCHIVENAME_APPEND}"
    if [ "$TARGET_ARCTYPE" = "zip" ]; then
      echo "	zip -9 $FULLTARNAME.zip ${TARGET_BINNAME}${TARGET_BINNAME_SUFFIX} \${DOCFILES}" >> Makefile
      if [ "$BUILDNAME" = "x86-os2" ]; then
        # add icon to zipfile
        echo "	zip -9j $FULLTARNAME.zip plat\\os2\\dnetc.ico" >> Makefile
      fi
    elif [ "$TARGET_ARCTYPE" = "zipflat" ]; then
      # zip file with flat directory structure.
      echo "	zip -9 -j $FULLTARNAME.zip ${TARGET_BINNAME}${TARGET_BINNAME_SUFFIX} \${DOCFILES}" >> Makefile
    elif [ "$TARGET_ARCTYPE" = "tgz" ]; then
      # tar.gz, with base+doc directory structure.
      echo "	tar -cvf - ${TARGET_BINNAME} \${DOCFILES} | gzip -9 > $FULLTARNAME.tar.gz" >> Makefile
    elif [ "$TARGET_ARCTYPE" = "tgzdir" ]; then
      # tar.gz, with buildname(base+doc) directory structure.
      echo "	-rm -rf $FULLTARNAME" >> Makefile
      echo "	mkdir $FULLTARNAME" >> Makefile
      echo "	mkdir $FULLTARNAME/docs" >> Makefile
      echo "	for file in ${TARGET_BINNAME} \${DOCFILES} ; do cp \$\$file $FULLTARNAME/\$\$file ; done" >> Makefile
      echo "	tar -cvf - $FULLTARNAME | gzip -9 > $FULLTARNAME.tar.gz" >> Makefile
      echo "	rm -rf $FULLTARNAME" >> Makefile
    elif [ "$TARGET_ARCTYPE" = "lha" ]; then
      echo "	rm -f $FULLTARNAME.lha" >> Makefile
      echo "	lha a $FULLTARNAME.lha ${TARGET_BINNAME}${TARGET_BINNAME_SUFFIX} \${DOCFILES}" >> Makefile
    elif [ "$TARGET_ARCTYPE" = "amigaosgui" ]; then
      echo "	rm -f $FULLTARNAME.lha" >> Makefile
      echo "	sh plat/amigaos/tools/makearchive $FULLTARNAME.lha $TARGET_MAKEARC \${DOCFILES}" >> Makefile
    elif [ "$TARGET_ARCTYPE" = "riscoszip" ]; then
      echo "	rm -rf $FULLTARNAME" >> Makefile
      echo "	rm -f $FULLTARNAME.zip" >> Makefile
      echo "	mkdir $FULLTARNAME" >> Makefile
      echo "	cp $TARGET_BINNAME$TARGET_BINNAME_SUFFIX $FULLTARNAME" >> Makefile
      echo "	\$(foreach DOCFILE,\${DOCFILES},cp \${DOCFILE} $FULLTARNAME/\`basename \${DOCFILE}\`,fff;)" >> Makefile
      echo "	cp plat/riscos/package/*,??? $FULLTARNAME" >> Makefile
      echo "	mkdir -p $FULLTARNAME/!System/310/Modules" >> Makefile
      echo "	cp plat/riscos/package/!System/310/Modules/*,??? $FULLTARNAME/!System/310/Modules" >> Makefile
      echo "	/home/peter/gccsdk-2.95.4-v2/cross/bin/zip -r -, $FULLTARNAME.zip $FULLTARNAME" >> Makefile
      echo "	rm -rf $FULLTARNAME" >> Makefile
    else
      echo "Warning: Unknown TARGET_ARCTYPE ${TARGET_ARCTYPE}"
    fi
  fi
fi
echo "" >> Makefile

#
# Create the rule to ftp the packaged tarball.
#
if [ -n "$TARGET_TARBALL" ]; then
  echo "ftp:" >> Makefile
  if [ "$BUILDNAME" = "x86-os2" -a -f upload.cmd ] ; then
    echo "	\$(SHELL) /C .\\upload.cmd ${TARGET_BINNAME}\${BUILDNUM}-${TARGET_TARBALL}" >>Makefile
  elif [ -f ./upload.sh ]; then
    if [ -n "$TARGET_TARBALL_COMMENT" ]; then
      echo "	echo \"${TARGET_TARBALL_COMMENT}\">${TARGET_BINNAME}\${BUILDNUM}-${TARGET_TARBALL}.comment" >>Makefile
    fi
    echo "	\$(SHELL) ./upload.sh ${TARGET_BINNAME}\${BUILDNUM}-${TARGET_TARBALL}" >>Makefile
    if [ -n "$TARGET_TARBALL_COMMENT" ]; then
      echo "	rm -f ${TARGET_BINNAME}\${BUILDNUM}-${TARGET_TARBALL}.comment" >>Makefile
    fi
  else
    echo "	echo Sorry, cannot do that." >> Makefile
  fi
  echo "" >> Makefile
fi

#
# Create the dependencies and reconfigure rules.
#
echo "dep: $0" >> Makefile
echo "	\$(SHELL) $0 \${BUILDNAME} ${TARGET_CONFIGUREFLAGS}" >> Makefile
echo "" >> Makefile
echo "reconfigure: dep" >> Makefile
echo "" >> Makefile


#
#  Clean, Superclean, Distclean, and Ident targets.
#
echo "clean:" >> Makefile
echo "	rm -f \${ALLOBJS}" >> Makefile
if [ "$BUILDNAME" = "x86-os2" ]; then
  echo "	rm -f output/dnetc.res" >> Makefile
fi
echo "	rm -f ${TARGET_BINNAME}${TARGET_BINNAME_SUFFIX}" >> Makefile
if [ -n "$TARGET_GENMAN" ]; then
  echo "	rm -f ${TARGET_BINNAME}.1" >> Makefile
fi
if [ -n "$TARGET_TARBALL" ]; then
  echo "	rm -f ${TARGET_BINNAME}???-${TARGET_TARBALL}.*" >> Makefile
fi
echo "" >> Makefile

echo "superclean: clean" >> Makefile
echo "	rm -f Makefile buff-in.* buff-out.* *.ini testplat" >> Makefile
echo "	find . -name '*~' -exec rm {} \\;" >> Makefile
echo "" >> Makefile

echo "distclean: superclean $0" >> Makefile
echo "	find . -name '.#*' -exec rm {} \\;" >> Makefile
echo "	rm -f \`egrep \"^[ ]*\\*\" $0 | sed -e 's/\(^.*\*\)\(.*\)\().*\$\$\)/\2/'\`" >> Makefile
echo "" >> Makefile

echo "ident:	${TARGET_BINNAME}${TARGET_BINNAME_SUFFIX}" >> Makefile
echo "	ident ${TARGET_BINNAME}${TARGET_BINNAME_SUFFIX} | awk '{ printf(\"%-30s %12s %s %s %s %s%c\", \$\$2,\$\$3,\$\$4,\$\$5,\$\$6,\$\$7,10)}'" >> Makefile
echo "" >> Makefile

#
# Generate the dependency targets in the makefile
#

if [ -n "${TARGET_SRCOBJLIST}" ]; then
  echo "Generating Makefile dependency targets..."
  #
  # _SRCOBJLIST goes ... type1, src, obj, src, obj, ... type2, src, obj ...
  # the 'types' are defined where _SRCOBJLIST is added to
  #
  echo "# Dependency targets follow" >> Makefile
  TARGETTYP=""
  TARGETSRC=""
  for target in $TARGET_SRCOBJLIST; do
    if [ "${target}X" = "X" ]; then # shouldn't happen
      target=$target
    # ------------------------------------
    elif [ "${target}" = "none" ]; then
      TARGETTYP="$target"
    elif [ "${target}" = "cc" ]; then
      TARGETTYP="$target"
    elif [ "${target}" = "as" ]; then
      TARGETTYP="$target"
    elif [ "${target}" = "nasm" ]; then
      TARGETTYP="$target"
    # ------------------------------------
    elif [ "${TARGETSRC}X" = "X" ]; then
      TARGETSRC="$target"
    # ------------------------------------
    elif [ "${TARGETTYP}" = "cc" -o "${TARGETTYP}" = "cc-decunix" ]; then
      TARGET_HDEPS=`./testplat build_dependancies ${TARGETSRC} ${TARGET_INCSWITCHES}`
      has_problem_h=0
      has_client_h=0
      has_ogr_h=0
      has_ccoreio_h=0
      has_lurk_h=0
      deplist=""
      for dep in $TARGET_HDEPS; do
        if [ $dep = "$OGR/ogr.h" ]; then
          dep="$OGR/ansi/ogr.h"
          has_ogr_h=1
        elif [ $dep = "common/ccoreio.h" ]; then
          has_ccoreio_h=1
        elif [ $dep = "common/problem.h" ]; then
          has_problem_h=1
        elif [ $dep = "common/client.h" ]; then
          has_client_h=1
        elif [ $dep = "common/lurk.h" ]; then
          has_lurk_h=1
        fi
        deplist="$deplist $dep"
      done
      if [ $has_client_h -eq 1 ]; then
        if [ $has_lurk_h -eq 0 ]; then
          deplist="$deplist common/lurk.h"
        fi
        if [ $has_problem_h -eq 0 ]; then
          deplist="$deplist common/problem.h"
          has_problem_h=1
        fi
      fi
      if [ $has_problem_h -eq 1 ]; then
        if [ $has_ccoreio_h -eq 0 ]; then
          deplist="$deplist common/ccoreio.h"
        fi
        if [ $has_ogr_h -eq 0 ]; then
          deplist="$deplist $OGR/ansi/ogr.h"
        fi
      fi
      #----------------
      CCFLAGS_SELECT="\${CCFLAGS}"
      if [ "$target" = "output/ev67.o" ]; then
        if [ $gccver -ge 3000000 ]; then # works only for gcc > 3 
          if [ "$TARGET_CC" = "g++" ] ; then
            CCFLAGS_SELECT="${CCFLAGS_SELECT} -mcpu=ev67"
          else
            CCFLAGS_SELECT="${CCFLAGS_SELECT} -march=ev67"
          fi
        else
          # works for NetBSD/FreeBSD and probably also OpenBSD
          CCFLAGS_SELECT="-Wa,-mev6 ${CCFLAGS_SELECT}"
        fi
      elif [ "${BUILDNAME}" = "aix-powerandppc" ]; then
        if [ "$target" = "output/problem.o" ]; then 
          CCFLAGS_SELECT="\${POWERFLAGS}" 
        fi
        if [ "$target" = "output/ogr.o" ]; then
          # default is to compile for a POWERPC based CPU,
          # we have to add POWER here
          echo "output/ogr_power.o:    ${TARGETSRC} ${deplist}" >> Makefile
          echo "	\${CC} -c \${POWERFLAGS} -D_AIXALL ${TARGETSRC} -o output/ogr_power.o" >> Makefile
          echo "" >> Makefile
        fi
      elif [ "${BUILDNAME}" = "aix-all" ]; then
        if [ "$target" = "output/rc5ansi_2-rg.o" ]; then
          CCFLAGS_SELECT="\${POWERFLAGS}"
        elif [ "$target" != "${target%%allitnil*}" ]; then
          CCFLAGS_SELECT="\${PPC601FLAGS}"
        elif [ "$target" != "${target%%lintilla*}" ]; then
          CCFLAGS_SELECT="\${PPC604FLAGS}"
        fi
        if [ "$target" = "output/ogr.o" ]; then
          # default is to compile for a POWERPC based CPU, 
          # we have to add POWER here
          echo "output/ogr_power.o:    ${TARGETSRC} ${deplist}" >> Makefile
          echo "	\${CC} -c \${POWERFLAGS} -D_AIXALL ${TARGETSRC} -o output/ogr_power.o" >> Makefile
          echo "" >> Makefile
          CCFLAGS_SELECT="\${PPC601FLAGS}"
        fi
      fi
      echo "$target:	${TARGETSRC} ${deplist}" >> Makefile
      echo "	\${CC} -c ${CCFLAGS_SELECT} ${TARGETSRC} -o $target" >> Makefile
      echo "" >> Makefile
      TARGETSRC=""
    # ------------------------------------
    elif [ "${TARGETTYP}" = "as" ]; then
      echo "$target:	${TARGETSRC}" >> Makefile
      echo "	\${AS} \${ASFLAGS} ${TARGETSRC} -o $target" >> Makefile
      echo "" >> Makefile
      TARGETSRC=""
    # ------------------------------------
    elif [ "${TARGETTYP}" = "nasm" ]; then
      dirlist=`echo "${TARGETSRC}"|tr '/' ' '`
      incswitch=""
      prevdir=""
      for subdir in $dirlist; do
        if [ -n "$prevdir" ]; then
          incswitch="$incswitch$prevdir/"
        fi
        prevdir="$subdir"
      done
      if [ -d "$incswitch" ]; then
        incswitch="-i $incswitch"
      fi
      echo "$target:	${TARGETSRC}" >> Makefile
      echo "	\${NASM} \${NASMFLAGS} ${incswitch} ${TARGETSRC} -o $target" >> Makefile
      echo "" >> Makefile
      TARGETSRC=""
    # ------------------------------------
    else
      echo "Unknown target type ${TARGETTYP}"
      exit 1
    fi
  done
fi

if [ "$TARGET_OGR_MULTI" = "68k" ]; then
  echo "Generating Makefile 68k multi-core OGR dependency targets..."
  TARGETSRC="$OGR/ansi/ogr.cpp"
  TARGET_HDEPS=`./testplat build_dependancies ${TARGETSRC} ${TARGET_INCSWITCHES}`
  OGR68K="000 020 030 040 060"
  for targetext in ${OGR68K}; do
    echo "output/ogr${targetext}.o:	${TARGETSRC} ${TARGET_HDEPS}" >> Makefile
    if [ "$targetext" = "020" -o "$targetext" = "030" ]; then
      echo "	\$(CC) \$(CCFLAGS) -m68${targetext} -fno-unroll-loops -c -o output/ogr${targetext}.o $OGR/ansi/ogr.cpp \\" >> Makefile
    else
      echo "	\$(CC) \$(CCFLAGS) -m68${targetext} -c -o output/ogr${targetext}.o $OGR/ansi/ogr.cpp \\" >> Makefile
    fi
    echo "	-DOGR_GET_DISPATCH_TABLE_FXN=ogr_get_dispatch_table_${targetext}" >> Makefile
    echo "" >> Makefile
  done
fi

if [ "$BUILDNAME" = "x86-os2" ]; then
 echo "Generating rules for .res and .rc"
 echo "output/${TARGET_BINNAME}.res:	plat/os2/dnetc.rc"         >>Makefile
 echo "	rc -r plat\os2\dnetc.rc output\\${TARGET_BINNAME}.res" >>Makefile
 echo "" >> Makefile
fi


#
# Print out successful result and exit without error.
#
echo "Makefile auto-generation complete!"
if [ -z "$TARGET_TARBALL" ]; then
  if [ -f ./upload.sh ]; then
    echo "TARGET_TARBALL was not defined."
    echo "Upload-ready tarballs will not be auto-generated"
    echo "and Makefile does not have an 'ftp' target"
  fi
fi
rm -f testplat
echo ""
exit 0

#!/bin/sh
#
# Copyright distributed.net 1998-1999 - All Rights Reserved
# For use in distributed.net projects only.
# Any other distribution or use of this source violates copyright.
#
# @(#)$Id: configure,v 1.222.2.222 2001/01/17 00:16:27 cyp Exp $

# *** Notes for v2.8001+ ***
#
# - Adding CSC to the target:
#   a) Add ${CSC_ANSI_SRCS} to your target's TARGET_ADDSRCS
#      (x86 clients also have nasm cores. See linux/freebsd.)
#   b) Add -DHAVE_CSC_CORES to your target's TARGET_CCFLAGS
#
# - Adding OGR to the targer:
#   (with $OGR_ANSI_SRCS and -DHAVE_OGR_CORES of course :)
#
# - If you wish to continue supporting DES, *AND*YOU*DO*NOT*USE*MEGGS*,
#   add -DHAVE_DES_CORES, otherwise remove all DES cores/references
#
# - If you wish to have the build automatically generate a .tar.gz ready
#   for upload, then add  TARGET_TARBALL="<os>-<cpu>-<limitations>"
#   for example: TARGET_TARBALL="linux-x86-libc4"
#
# - Avoid building separate MT and non-MT clients. MT is always preferred
#   (from the client's perspective), and the user can always force non-MT
#   by setting numcpu=0

#####################################################################
# Note to people making changes..  Do not put spaces around the '=' #
# signs in the variable definitions below.  Some sh implementations #
# will interpret such lines as statements rather than assignments.  #
#####################################################################

if [ -z "$1" ]; then
  echo "No platform specified on command line.";
  echo "Run with 'list' as an argument to see available platforms."
  exit 1
fi

# -------------------------------------------------------------------

#
# Binary's name.
#
TARGET_BINNAME="dnetc"
TARGET_BINNAME_SUFFIX=""
BUILDNAME=$1
#
# Define the default compilation options
#
TARGET_CC="cc"
TARGET_CP="cp"
TARGET_CCFLAGS=""
TARGET_LD=""          # blank implies TARGET_CC
TARGET_LDFLAGS=""
TARGET_LIBS=""
TARGET_AS="as"
TARGET_NASM="nasm"     #<- set this to "" if you have no nasm
TARGET_NASM_FMT="elf"  #<- set this to "" if you have no nasm
TARGET_ASFLAGS=""
TARGET_STRIP="strip"
TARGET_OS=""           #<-may be needed for cross-compile or special handling
TARGET_OGR_MULTI=""    #<-can be used to compile ogr.cpp with differing gcc opts

TARGET_ADDSRCS=""
TARGET_ADDASMS=""
TARGET_ADDNASMS=""
TARGET_ADDOBJS=""

# Certain source files need to be compiled without optimization
# to get a working client. *sigh* This flag will get set in the
# target to -O0. See endofscript for usage. -- myshkin
OPTS_NOOPT=""

#
# Platform specific docfiles to be included in the tarball. You only need
# to specify platform specific files. Generic ones are added automatically.
#
TARGET_DOCFILES="docs/readme._ix" # override where appropriate
TARGET_GENMAN=1        # non-blank generate a man page, or not (blank)

#
# Target specific tarball options.
#
TARGET_TARBALL=""     # 'binnameNNN-' is auto prepended, ".tar.gz" is appended
TARGET_TARBALL_COMMENT="" # special comments for tarball.readme (if needed)
TARGET_ARCTYPE="tgz"  # or "zip", "zipflat", "lha" or "tgzdir"

# -----------------------------------------------------------------------

add_sources() # $1=os, $2=arch, $3=custom
{
  # additions to COMMON_SRCS need to be before ${COMMON_SRCS}
  # so that speed sensitive stuff can remain together at the 'bottom'
  if [ "$1" = "freebsd" -o "$1" = "netbsd" -o "$1" = "openbsd" \
    -o "$1" = "bsdos"   -o "$1" = "os2"    -o "$1" = "amigaos" \
    -o "$1-$3" = "macosx-" -o "$1-$3" = "linux-" ]; then
    COMMON_SRCS="common/lurk.cpp ${COMMON_SRCS}"
    TARGET_CCFLAGS="$TARGET_CCFLAGS -DLURK"
  fi  
  
  # -------------------------------------------------------------------

  # additions to COMMON_SRCS need to be before ${COMMON_SRCS}
  # so that speed sensitive stuff can remain together at the 'bottom'
  if [ "$1" = "amigaos" ]; then 
    COMMON_SRCS="platforms/amiga/amVersion.c \
                 platforms/amiga/amSupport.c \
                 platforms/amiga/amMemory.c \
                 platforms/amiga/amTime.c \
                 platforms/amiga/amNetwork.c \
                 platforms/amiga/amConsole.c \
                 ${COMMON_SRCS}"
  elif [ "$1" = "linux" ]; then 
    COMMON_SRCS="platforms/linux/li_inst.c ${COMMON_SRCS}"
    if [ "$2" = "x86" ]; then #maybe others as well
      COMMON_SRCS="platforms/linux/li_kthread.c ${COMMON_SRCS}"
      #(obsolete) TARGET_CCFLAGS="$TARGET_CCFLAGS -DUNIVERSALRESOLVER"
      COMMON_SRCS="platforms/linux/resolv.c ${COMMON_SRCS}"
    fi
  elif [ "$1" = "riscos" ]; then
    COMMON_SRCS="platforms/riscos/riscos_sup.cpp \
                 platforms/riscos/riscos_x86.cpp \
                 ${COMMON_SRCS}"
    TARGET_ADDASMS="$TARGET_ADDASMS platforms/riscos/riscos_asm.s"
  elif [ "$1" = "os2" ]; then
    COMMON_SRCS="platforms/os2cli/os2inst.cpp ${COMMON_SRCS}"
  fi  

  # -------------------------------------------------------------------

  # only generic/ansi cores are declared here. 
  # arch specific ones are declared in each arch specific section.
  #-- RC5 -- --------------------------------------------------
  RC5_ANSI2_SRCS="rc5/ansi/rc5ansi_2-rg.cpp" # 2 pipeline ("rc5/ansi/2-rg.c")
  RC5_ANSI1_SRCS="rc5/ansi/rc5ansi_1-rg.cpp" # 1 pipeline
  # -- DES -- (needs -DHAVE_DES_CORES) -------------------------
  KWAN_SLICE_SRCS1="des/deseval.cpp des/des-slice.cpp des/sboxes-kwan.cpp"
  KWAN_SLICE_SRCS2="des/deseval.cpp des/des-slice.cpp des/sboxes-kwan2.cpp"
  KWAN_SLICE_SRCS3="des/deseval.cpp des/des-slice.cpp des/sboxes-kwan3.cpp"
  KWAN_SLICE_SRCS4="des/deseval.cpp des/des-slice.cpp des/sboxes-kwan4.cpp"
  MEGGS_SLICE_SRCS1="des/deseval-meggs2.cpp des/des-slice-meggs.cpp"
  MEGGS_SLICE_SRCS2="des/deseval-meggs3.cpp des/des-slice-meggs.cpp"
  # -- CSC -- (needs -DHAVE_CSC_CORES)
  CSC_ANSI_SRCS="csc/convcsc.cpp csc/csc-common.cpp csc/csc-1k-i.cpp csc/csc-1k.cpp csc/csc-6b-i.cpp csc/csc-6b.cpp"
  # -- OGR -- (needs -DHAVE_OGR_CORES) -------------------------
  OGR_ANSI_SRCS="ogr/ansi/ogr.cpp ogr/ansi/ogr_sup.cpp ogr/ansi/ogr_dat.cpp ogr/ansi/ogr_dat2.cpp"

  # -------------------------------------------------------------------

  if [ "$2" = "x86" ]; then
    # -- des common -- mmx is nasm only
    ##des std## TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_DES_CORES"
    ##des std## TARGET_ADDASMS="$TARGET_ADDASMS des/brydgnu/bdeslow.S des/brydgnu/p1bdespro.S"
    ##des std## TARGET_ADDSRCS="$TARGET_ADDSRCS des/des-x86.cpp common/convdes.cpp" 
    ##des mt##  TARGET_ADDASMS="$TARGET_ADDASMS des/brydgnu/bbdeslow.S des/brydgnu/p2bdespro.S"
    ##des mt##  TARGET_ADDSRCS="$TARGET_ADDSRCS $KWAN_SLICE_SRCS4"
    ##des mt##  TARGET_CCFLAGS="$TARGET_CCFLAGS -DKWAN"
    TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_OGR_CORES"
    TARGET_ADDSRCS="$TARGET_ADDSRCS ogr/ansi/ogr_sup.cpp ogr/ansi/ogr_dat.cpp"
    if [ "X$TARGET_NASM" = "X" -o "X$TARGET_NASM_FMT" = "X" ]; then #no NASM
      TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_NO_NASM"  # ****NOTE****
      TARGET_ADDASMS="$TARGET_ADDASMS platforms/x86ident.S"
      # -- non-nasm/csc --
      ##csc## TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_CSC_CORES"
      ##csc## TARGET_ADDSRCS="$TARGET_ADDSRCS $CSC_ANSI_SRCS"
      # -- non-nasm/rc5 --
      TARGET_ADDSRCS="$TARGET_ADDSRCS \
                      rc5/x86/rc5-486-rg.cpp rc5/x86/rc5-6x86-rg.cpp \
                      rc5/x86/rc5p5brf.cpp   rc5/x86/rc5-p6-rg.cpp \
                      rc5/x86/rc5-k5-rg.cpp  rc5/x86/rc5-k6-rg.cpp"
      # -- non-nasm/ogr --
      TARGET_ADDASMS="$TARGET_ADDASMS ogr/x86/ogr.S"
    else
      TARGET_ADDNASMS="$TARGET_ADDNASMS platforms/x86ident.asm"
      TARGET_ADDNASMS="$TARGET_ADDNASMS $NASM_RC5X86_SRCS"
      if [ "$1-$3" = "linux-" \
           -o "$1" = "freebsd" -o "$1" = "netbsd" \
           -o "$1" = "openbsd" -o "bsdos" ]; then # has SMC
        TARGET_ADDSRCS="$TARGET_ADDSRCS rc5/x86/rc5-486-smc-rg.cpp"
        TARGET_CCFLAGS="$TARGET_CCFLAGS -DSMC"
        #obsolete linux: TARGET_LDFLAGS="$TARGET_LDFLAGS -static -Xlinker -omagic"
        #obsolete linux: -Xlinker -omagic implies -static
      fi
      # -- nasm/des mmx --
      ##des mmx## TARGET_ADDSRCS="$TARGET_ADDSRCS des/des-slice-meggs.cpp"
      ##des mmx## TARGET_ADDNASMS="$TARGET_ADDNASMS des/mmx-bitslice/deseval-mmx.asm"
      ##des mmx## TARGET_CCFLAGS="$TARGET_CCFLAGS -DMMX_BITSLICER -DMEGGS"
      # -- nasm/csc --
      ##csc## TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_CSC_CORES"
      ##csc## TARGET_ADDNASMS="$TARGET_ADDNASMS \
      #                       csc/x86/convcsc.asm csc/x86/csc-1k-i.asm \
      #                       csc/x86/csc-1k.asm  csc/x86/csc-6b-i.asm \
      #                       csc/x86/csc-6b.asm  csc/x86/csc-comm.asm \
      #                       csc/x86/mmx/csc-mmx.asm"
      # -- nasm/rc5 --
      TARGET_ADDNASMS="$TARGET_ADDNASMS rc5/x86/nasm/rg486.asm \
                       rc5/x86/nasm/rc5-rgk5.asm   rc5/x86/nasm/brfp5.asm \
                       rc5/x86/nasm/rc5-rgk6.asm   rc5/x86/nasm/rc5-rgp6.asm \
                       rc5/x86/nasm/rg6x86.asm     rc5/x86/nasm/rc5mmx.asm \
                       rc5/x86/nasm/rc5-hbk7.asm"
      # -- nasm/ogr --
      TARGET_ADDNASMS="$TARGET_ADDNASMS ogr/x86/ogr.asm"
    fi  
  #-----------------------------------------------------------------  
  elif [ "$2" = "sparc" ]; then
    if [ "$1" = "solaris" -o "$1" = "sunos" ]; then
      TARGET_ADDSRCS="$TARGET_ADDSRCS rc5/ultra/rc5-ultra-crunch.cpp"
    else  
      TARGET_ADDSRCS="$TARGET_ADDSRCS $RC5_ANSI2_SRCS"
    fi  
    TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_OGR_CORES"
    TARGET_ADDSRCS="$TARGET_ADDSRCS $OGR_ANSI_SRCS"
    if [ "X$3" = "Xultra" ]; then
      DESULTRA_SRCS_C="des/ultrasparc/des-slice-ultrasparc.cpp \
                       des/ultrasparc/simple.c \
                       des/ultrasparc/des_ultra_crunch.c \
                       des/ultrasparc/kwan_from_to.c \
                       des/ultrasparc/do_all.c \
                       des/ultrasparc/do_all_fancy.c \
                       des/ultrasparc/do_s1.c \
                       des/ultrasparc/do_s1_s3.c \
                       des/ultrasparc/do_s2.c \
                       des/ultrasparc/do_s3.c \
                       des/ultrasparc/do_s4.c \
                       des/ultrasparc/do_s5.c \
                       des/ultrasparc/do_s6.c \
                       des/ultrasparc/do_s7.c \
                       des/ultrasparc/do_s8.c"
      DESULTRA_SRCS_ASM="des/ultrasparc/des-slice-ultrasparc.cpp \
                       des/ultrasparc/des_ultra_crunch.c"
      ##des## TARGET_ADDASMS="des/ultrasparc/simple.handopt.s"
      ##des## TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_DES_CORES"
      ##des## TARGET_ADDSRCS="$TARGET_ADDSRCS $DESULTRA_SRCS_ASM"
    else
      DESSPARC_SRCS_C="des/des-slice.cpp des/deseval.cpp"
      ##des## TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_DES_CORES"
      ##des## TARGET_ADDSRCS="$TARGET_ADDSRCS $DESSPARC_SRCS_C"
    fi
  #-----------------------------------------------------------------  
  elif [ "$2" = "mips" ]; then
    #-- rc5 --
    if [ "$TARGET_CC" = "CC" ]; then # mips-crunch doesn't compile with IRIX CC
      TARGET_ADDSRCS="$TARGET_ADDSRCS $RC5_ANSI2_SRCS"
    else                             # gcc targets. mips-crunch.cpp is faster
      TARGET_ADDSRCS="$TARGET_ADDSRCS rc5/mips/mips-crunch.cpp"
    fi
    #-- ogr --
    TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_OGR_CORES"
    TARGET_ADDSRCS="$TARGET_ADDSRCS $OGR_ANSI_SRCS"
	  ##des## TARGET_CCFLAGS="$TARGET_CCFLAGS -DKWAN -DMEGGS -DHAVE_DES_CORES"
    ##des## TARGET_ADDSRCS="$TARGET_ADDSRCS $MEGGS_SLICE_SRCS2"
  #-----------------------------------------------------------------  
  elif [ "$2" = "hppa" ]; then
    if [ "$TARGET_CC" = "CC" ]; then
      TARGET_ADDASMS="$TARGET_ADDASMS rc5/parisc/parisc.s"
    else
      TARGET_ADDSRCS="$TARGET_ADDSRCS $RC5_ANSI2_SRCS"
    fi
    ##des## TARGET_CCFLAGS="$TARGET_CCFLAGS -DKWAN -DMEGGS -DHAVE_DES_CORES"
    ##des## TARGET_ADDSRCS="$TARGET_ADDSRCS $MEGGS_SLICE_SRCS2"
    TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_OGR_CORES"
    TARGET_ADDSRCS="$TARGET_ADDSRCS $OGR_ANSI_SRCS"
  #-----------------------------------------------------------------  
  elif [ "$2" = "68k" ]; then
    if [ "$1" = "amigaos" ]; then
      TARGET_ADDASMS="$TARGET_ADDASMS rc5/68k/rc5-000_010-jg.s \
                                      rc5/68k/rc5-020_030-jg.s \
                                      rc5/68k/rc5-040_060-jg.s"
    else
      TARGET_ADDASMS="$TARGET_ADDASMS rc5/68k/crunch.68k.gcc.s"
      TARGET_ADDSRCS="$TARGET_ADDSRCS rc5/68k/rc5_68k_gcc_crunch.c"
    fi  
    TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_OGR_CORES"
    TARGET_ADDSRCS="$TARGET_ADDSRCS ogr/ansi/ogr_sup.cpp \
                                    ogr/ansi/ogr_dat.cpp"
    TARGET_ADDOBJS="$TARGET_ADDOBJS output/ogr000.o output/ogr020.o \
                                    output/ogr030.o output/ogr040.o \
                                    output/ogr060.o"
    TARGET_OGR_MULTI="68k"
    ##des## TARGET_CCFLAGS="$TARGET_CCFLAGS -DKWAN"
    ##des## TARGET_ADDSRCS="$TARGET_ADDSRCS $SLICE_SRCS3"
  #-----------------------------------------------------------------  
  elif [ "$2" = "alpha" ]; then
    if [ "${1}" = "digital-unix" ]; then  
      TARGET_ADDSRCS="${TARGET_ADDSRCS} rc5/alpha/axp-bmeyer.cpp"
      TARGET_ADDASMS="${TARGET_ADDASMS} rc5/alpha/axp-bmeyer-osf.s"
      TARGET_ADDSRCS="${TARGET_ADDSRCS} rc5/alphaasm/rc5-digital-unix-alpha-ev4.cpp"
      if [ "${1}-${3}" = "digital-unix-mt" ]; then  
        TARGET_ADDSRCS="${TARGET_ADDSRCS} rc5/alphaasm/rc5-digital-unix-alpha-ev5.cpp"
        ##des## TARGET_CCFLAGS="$TARGET_CCFLAGS -Ddes_alpha_osf_ev5=des_alpha_osf_ev4"
      fi  
      ##des## TARGET_CCFLAGS="$TARGET_CCFLAGS -DMEGGS -DKWAN -DHAVE_DES_CORES"
      ##des## TARGET_ADDSRCS="$TARGET_ADDSRCS $MEGGS_SLICE_SRCS2"
    else  
      TARGET_ADDSRCS="${TARGET_ADDSRCS} rc5/alpha/axp-bmeyer.cpp"
      TARGET_ADDASMS="${TARGET_ADDASMS} rc5/alpha/axp-bmeyer.s"
      #DWORZ_SLICE_SRCS="des/alpha-asm/deseval-dworz3.S des/alpha-asm/des-slice-dworz.cpp"
      ##des## TARGET_CCFLAGS="$TARGET_CCFLAGS -DKWAN -DDWORZ -DHAVE_DES_CORES"
      ##des## TARGET_ADDSRCS="$TARGET_ADDSRCS $DWORZ_SLICE_SRCS"
    fi  
    ##csc## TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_CSC_CORES"
    ##csc## TARGET_ADDSRCS="$TARGET_ADDSRCS $CSC_ANSI_SRCS"
    TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_OGR_CORES"
    TARGET_ADDSRCS="$TARGET_ADDSRCS $OGR_ANSI_SRCS"
  #-----------------------------------------------------------------  
  elif [ "$2" = "ppc" -o "$2" = "power" ]; then
    XLC_LINTILLA_ASMS="rc5/ppc/crunch_lintilla.ppcxlc.s \
		   rc5/ppc/crunch_allitnil_552.ppcxlc.s"
    RC5PPC_SRCS="rc5/ppc/crunch_lintilla_296.ppc.s \
       rc5/ppc/crunch_lintilla_296-604.ppc.s \
	     rc5/ppc/crunch_allitnil_552.ppc.s \
	     rc5/ppc/rc5_unit_func_lintilla.cpp \
	     rc5/ppc/rc5_unit_func_lintilla-604.cpp \
	     rc5/ppc/rc5_unit_func_allitnil.cpp"
    RC5PPC_MWCC_SRCS="rc5/ppc/crunch_lintilla_296.ppc.c \
       rc5/ppc/crunch_lintilla_296-604.ppc.c \
	     rc5/ppc/crunch_allitnil_552.ppc.c \
	     rc5/ppc/rc5_unit_func_lintilla.cpp \
	     rc5/ppc/rc5_unit_func_lintilla-604.cpp \
	     rc5/ppc/rc5_unit_func_allitnil.cpp"
    RC5PPC_APPLE_SRCS="rc5/ppc/crunch_lintilla_296_apple.ppc.s \
       rc5/ppc/crunch_lintilla_296-604_a.ppc.s \
	     rc5/ppc/crunch_allitnil_552_apple.ppc.s \
	     rc5/ppc/rc5_unit_func_lintilla.cpp \
	     rc5/ppc/rc5_unit_func_lintilla-604.cpp \
	     rc5/ppc/rc5_unit_func_allitnil.cpp"
    RC5ALTIVEC_SRCS="rc5/ppc/rc5loopX.s \
		   rc5/ppc/rc5_unit_func_vec.cpp"
       
    if [ "$2" = "power" ]; then
      TARGET_ADDSRCS="$TARGET_ADDSRCS $RC5_ANSI2_SRCS"
      if [ "$1-$3" = "aix-aixall" ]; then
        TARGET_ADDSRCS="$TARGET_ADDSRCS $RC5PPC_SRCS"  
      fi  
    elif [ "$TARGET_CC" = "mwcc" ]; then
      TARGET_ADDSRCS="$TARGET_ADDSRCS $RC5PPC_MWCC_SRCS"
    elif [ "$TARGET_CC" = "xlC" ]; then
      if [ "X$3" = "aix32" ]; then
        TARGET_ADDASMS="$TARGET_ADDASMS rc5/ppc/crunch_allitnil_552.ppc.s \
                                        rc5/ppc/crunch_lintilla_296.ppc.s \
                                        rc5/ppc/crunch_lintilla_296-604.ppc.s"
      else # aix4
        TARGET_ADDASMS="$TARGET_ADDASMS $XLC_LINTILLA_ASMS"
      fi  
    elif [ "${1}" = "macosx" ]; then  #... and macosxserver (apple cc)
      TARGET_ADDSRCS="$TARGET_ADDSRCS $RC5PPC_APPLE_SRCS"
      if [ "X$3" = "X" ]; then #mach3+
        TARGET_ADDSRCS="$TARGET_ADDSRCS $RC5ALTIVEC_SRCS"  
      fi
    else
      TARGET_ADDSRCS="$TARGET_ADDSRCS $RC5PPC_SRCS"  
    fi
    ##des## TARGET_CCFLAGS="$TARGET_CCFLAGS -DMEGGS -DKWAN -DHAVE_DES_CORES"
    ##des## TARGET_ADDSRCS="$TARGET_ADDSRCS $MEGGS_SLICE_SRCS2"
    ##csc## TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_CSC_CORES"
    ##csc## TARGET_ADDSRCS="$TARGET_ADDSRCS $CSC_ANSI_SRCS"
    TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_OGR_CORES"
    TARGET_ADDSRCS="$TARGET_ADDSRCS $OGR_ANSI_SRCS"

    if [ "${1}" = "macosx" ]; then  #... and macosxserver (apple cc)
     if [ "X$3" = "X" ]; then #mach3+
       TARGET_ADDSRCS="$TARGET_ADDSRCS ogr/ppc/ogr-vec.cpp"  
     fi
    fi
  #-----------------------------------------------------------------  
  elif [ "$2" = "arm" ]; then
    if [ "$1" = "riscos" ]; then
      TARGET_ADDASMS="$TARGET_ADDASMS rc5/arm/rc5-arm-1.s rc5/arm/rc5-arm-2.s rc5/arm/rc5-arm-3.s"
      ##des## TARGET_ADDASMS="$TARGET_ADDASMS des/arm/des-slice-arm.s des/arm/des-slice-sa.s"
      ##des## TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_DES_CORES"
    elif [ "$1-$3" = "linux-" ]; then  #linux-elf
      TARGET_ADDASMS="$TARGET_ADDASMS rc5/arm/rc5-arm-1-gnu-elf.s \
                                      rc5/arm/rc5-arm-2-gnu-elf.s \
                                      rc5/arm/rc5-arm-3-gnu-elf.s"
      ##des## TARGET_CCFLAGS="$TARGET_CCFLAGS -HAVE_DES_CORES -DKWAN"
      ##des## TARGET_ADDASMS="$TARGET_ADDASMS des/arm/des-slice-sa-gnu-elf.s des/arm/des-slice-arm-gnu-elf.s"
    else      
      TARGET_ADDASMS="$TARGET_ADDASMS rc5/arm/rc5-arm-1-gnu.s \
                                      rc5/arm/rc5-arm-2-gnu.s \
                                      rc5/arm/rc5-arm-3-gnu.s "
      ##des## TARGET_CCFLAGS="$TARGET_CCFLAGS -HAVE_DES_CORES -DKWAN"
      ##des## TARGET_ADDASMS="$TARGET_ADDASMS des/arm/des-slice-sa-gnu.s des/arm/des-slice-arm-gnu.s"
    fi
    ##csc## TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_CSC_CORES"
    ##csc## TARGET_ADDSRCS="$TARGET_ADDSRCS $CSC_ANSI_SRCS"
    TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_OGR_CORES"
    TARGET_ADDSRCS="$TARGET_ADDSRCS $OGR_ANSI_SRCS"
  #-----------------------------------------------------------------  
  elif [ "$2" = "88k" -o "$2" = "sh4" -o "$2" = "vax" -o "$2" = "s390" ]; then
    # pure ansi targets. (2 pipeline RC5 core)
    TARGET_ADDSRCS="$TARGET_ADDSRCS $RC5_ANSI2_SRCS"
    ##des## TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_DES_CORES -DMEGGS -DKWAN"
    ##des## TARGET_ADDSRCS="$TARGET_ADDSRCS $MEGGS_SLICE_SRCS2"
    ##csc## TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_CSC_CORES"
    ##csc## TARGET_ADDSRCS="$TARGET_ADDSRCS $CSC_ANSI_SRCS"
    TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_OGR_CORES"
    TARGET_ADDSRCS="$TARGET_ADDSRCS $OGR_ANSI_SRCS"
  #-----------------------------------------------------------------  
  else
    echo "Warning. Unknown arch '$2' to add_sources. Using all-ANSI cores."
    TARGET_ADDSRCS="$TARGET_ADDSRCS $RC5_ANSI2_SRCS"
    ##des## TARGET_CCFLAGS="$TARGET_CCFLAGS -DKWAN -DMEGGS -DHAVE_DES_CORES"
    ##des## TARGET_ADDSRCS="$TARGET_ADDSRCS $MEGGS_SLICE_SRCS2"
    ##csc## TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_CSC_CORES"
    ##csc## TARGET_ADDSRCS="$TARGET_ADDSRCS $CSC_ANSI_SRCS"
    TARGET_CCFLAGS="$TARGET_CCFLAGS -DHAVE_OGR_CORES"
    TARGET_ADDSRCS="$TARGET_ADDSRCS $OGR_ANSI_SRCS"
  fi  
}

# -------------------------------------------------------------------

OPTS_GCC=""   # for TARGET_CCFLAGS, constructed from generate_gcc_opts()
OPTS_GAS=""   # for TARGET_ASFLAGS, constructed from generate_gcc_opts()

# ----------------------------------------------------------------------

gccver=0
gcc_get_ver() {

  gccver=0
  if [ "${1}X" = "X" ]; then
    if [ "${TARGET_CC}X" = "X" ]; then  # should not happen
      TARGET_CC="gcc"                   # since TARGET_CC is set by default
    fi
    gcc_v=`$TARGET_CC -v 2>&1`
    #gcc_v="gcc version 2.7.2.1"
    #gcc_v="Reading specs from blah\ngcc version 2.96 19991004 (experimental)"
    #gcc_v="gcc version egcs-2.91.66 19990314 (egcs-1.1.2 release)"
    #gcc_v="gcc driver version 2.7.2.3 executing gcc version 2.95.2"

    gccver_line=`echo $gcc_v|tail -1`
    #echo "gccver_line=#$gccver_line#"
    lastwas=""
    ver_num=""
    for ver_word in $gccver_line ; do
      if [ "${ver_num}X" = "X" ]; then
        #echo "verword=#$ver_word#,ver_num=#$ver_num#,laswas=#$lastwas#"
        if [ "$lastwas" = "version" ]; then
          ver_num="$ver_word"
        else
          if [ "$ver_word" = "version" ]; then
            if [ "$lastwas" = "driver" ]; then
	            lastwas="driver"
      	    else  
	            lastwas="version"
      	    fi
          else
	          lastwas="$ver_word"
          fi
        fi
      fi	
    done  	  
    echo "ver_num=#$ver_num#"  
    if [ "${ver_num}X" = "X" ]; then
      gccver=0
    else  
      #can't use cut -d- -f2
      gccver=`echo $ver_num|tr '-' '\n'|tail -1|tr '.' ' '`
      gcc_get_ver $gccver
    fi
  else
    a1=$1
    a2=$2
    a3=$3
    a4=$4
    #echo "1=$1,2=$2,3=$3,4=$4"
    if [ -z "$a1" ]; then
      a1=0
    fi
    if [ -z "$a2" ]; then
      a2=0
    fi
    if [ -z "$a3" ]; then
      a3=0
    fi
    if [ -z "$a4" ]; then
      a4=0
    fi 
    #2.7.2.1 = 2000000 +  70000 +  200 + 1 = 2070201
    #2.95.1  = 2000000 + 950000 +  100     = 2950100
    #2.91.66 = 2000000 + 910000 + 6600     = 2916600
    gccver=`echo "($a1 * 1000000)+($a2 * 10000)+($a3 * 100)+$a4" | bc`
    #echo $gccver
  fi
} 

generate_gcc_opts() {  

# GCC: warn as much as we can for maximum portability
  OPTS_GCC_WARN="-W -Wall -Wtraditional -Wpointer-arith -Wcast-align \
  	         -Wmissing-declarations -Wmissing-prototypes \
	         -Wstrict-prototypes -Wconversion -Winline \
	         -Waggregate-return -Wcast-qual -Woverloaded-virtual \
	         -Wnested-externs" #-Wshadow shows std header errors
  OPTS_GCC_BASE="-fcaller-saves -fomit-frame-pointer \
                 -fno-inline-functions" 
  OPTS_272_PLUS="-fno-handle-exceptions -fno-rtti"
  #WARNING WARNING: 2.95.x (at least x<=.3) will cause problem.cpp to mis-
  # compile if using -fno-exceptions and/or -fno-rtti. On x86 selftest will
  # miscompile if using an -O level greater than -O2 _and_ -funroll-loops
  #WARNING WARNING: don't use 2.8.x at all.
  OPTS_295_PLUS="-fstrict-aliasing" #-fno-exceptions -fno-rtti
  OPTS_GCC272="${OPTS_GCC_WARN} ${OPTS_GCC_BASE} ${OPTS_272_PLUS}"
  OPTS_GCC295="${OPTS_GCC_WARN} ${OPTS_GCC_BASE} ${OPTS_295_PLUS}"


  #this is a list of which -O does what for 2.72.x - 2.95.2
  #(see <gccsrc>/gcc/toplev.c; grep for "optimize ")
  #(-O? is always handled first, regardless of where it occurs on the cmdline)
  # == O0: -fno-inline -Winline
  # >= 01: -fdefer-pop -fomit-frame-pointer 
  #        2.95 only: -fthread-jumps (-fdelayed-branch)
  # >= 02: -frerun-cse-after-loop -fcse-follow-jumps -fcse-skip-blocks 
  #        -fexpensive-optimizations -fstrength-reduce 
  #        2.72 only: -fthread-jumps -felide-constructors (-fdelayed-branch)
  #        2.95 only: -fgcse -frerun-loop-opt -fcaller-saves
  #                   -fforce-mem (-fschedule-insns), 
  #                   -fflag-regmove (-fschedule-insns-after-reload)
  # >= 03: -finline-functions

  #
  # old option list
  #OPTS_GCC272="-fcaller-saves -fcse-follow-jumps -fcse-skip-blocks \
  #	     -fexpensive-optimizations -fomit-frame-pointer \
  #	     -frerun-cse-after-loop -fstrength-reduce -fthread-jumps \
  #	     -funroll-loops -fno-inline-functions -fno-handle-exceptions \
  #          -fno-rtti ${OPTS_GCC_WARN}"
  #OPTS_GCC295="-fomit-frame-pointer -fno-inline-functions \
  #	     -fstrict-aliasing -fno-exceptions -fno-rtti ${OPTS_GCC_WARN}"


  gcc_get_ver
  if [ $gccver -lt 2000000 ]; then
    echo "gcc version less than 2, or something strange happened"
    exit 1
  fi
  
  # ------

  opts272=""
  opts295=""
  arch="internal-$1"  # do it this way to hide from "./configure list"
  case "$arch" in      
   
    *internal-generic)
        opts272="$OPTS_GCC272"
        opts295="$OPTS_GCC295"
        ;;

    *internal-mips)
        opts272="$OPTS_GCC272 -O6 -DASM_MIPS -funroll-loops"
        opts295="$OPTS_GCC295 -Os -DASM_MIPS -funroll-loops"
        ;;

    *internal-hppa)
        opts272="$OPTS_GCC272 -O6 -DASM_HPPA -funroll-loops -static"
        opts295="$OPTS_GCC295 -O2 -DASM_HPPA -funroll-loops -static"
        #OPTS_EGCS="$OPTS_EGCS -O2 -D_HPUX_M68K -static"
        ;;
 
    *internal-88k)
        opts272="$OPTS_GCC272 -O6 -DCPU_ID=CPU_88K -funroll-loops"
        opts295="$OPTS_GCC295 -O2 -DCPU_ID=CPU_88K -funroll-loops"
        ;;

    *internal-s390)
        opts272="$OPTS_GCC272 -O6 -D__S390__ -U__i386__ -funroll-loops"
        opts295="$OPTS_GCC295 -O2 -D__S390__ -U__i386__ -funroll-loops \
	         -fno-caller-saves"
        ;;

    *internal-vax)
        opts272="$OPTS_GCC272 -O2 -DASM_VAX -funroll-loops"
        opts295="$OPTS_GCC295 -O2 -DASM_VAX -funroll-loops"
        ;;

    *internal-arm)
        opts272="$OPTS_GCC272 -DARM -DASM_ARM -funroll-loops"
        opts295="$OPTS_GCC295 -O2 -mtune=strongarm -DARM -DASM_ARM -funroll-loops"
        ;;

    *internal-sparc)  # (sparc/v7 [SS1/2/IPX]) (v8 [supersparc] is below)
        opts272="$OPTS_GCC272 -O6 -mcypress -DASM_SPARC -funroll-loops"
        opts295="$OPTS_GCC295 -O2 -mcypress -DASM_SPARC -funroll-loops"
        ;;

    *internal-supersparc)  # (sparc/v8 [SS5+])
        opts272="$OPTS_GCC272 -O6 -msupersparc -DASM_SPARC -funroll-loops"
        opts295="$OPTS_GCC295 -O2 -mtune=supersparc -DASM_SPARC -funroll-loops"
        ;;

    *internal-ultrasparc)  # (sparc/v9 [Ultra])
        opts272="$OPTS_GCC272 -O6 -msupersparc -DASM_SPARC -funroll-loops"
        opts295="$OPTS_GCC295 -Os -mtune=ultrasparc -fforce-mem -mvis \
		-fcall-used-g4 -fcall-used-g5 -fcall-used-g6 \
		-fstrict-aliasing -funroll-loops"
        ;;

    *internal-68k) #the 68k targets all have different -m68xxx switches
        opts272="$OPTS_GCC272 -O6 -DASM_68K -funroll-loops"
        opts295="$OPTS_GCC295 -O2 -DASM_68K -funroll-loops"
        OPTS_GAS="-v -V --register-prefix-optional" #only used by HPUX
        ;;

    *internal-ppc)
        opts272="$OPTS_GCC272 -O6 -DASM_PPC -funroll-loops"
        opts295="$OPTS_GCC295 -O3 -DASM_PPC -funroll-loops"
        ;;

    *internal-ppc603e)
        opts272="$OPTS_GCC272 -O6 -DASM_PPC -mcpu=603e -funroll-loops"
        opts295="$OPTS_GCC295 -O2 -DASM_PPC -mcpu=603e -funroll-loops"
	;;

    *internal-ppc604)
        opts272="$OPTS_GCC272 -O6 -DASM_PPC -mcpu=604 -funroll-loops"
        opts295="$OPTS_GCC295 -O2 -DASM_PPC -mcpu=604 -funroll-loops"
	;;

    *internal-power)
        opts272="$OPTS_GCC272 -O6 -DASM_POWER -mcpu=power -funroll-loops"
        opts295="$OPTS_GCC295 -O6 -DASM_POWER -mcpu=power -funroll-loops"
        ;;

    *internal-aixcommon)
        opts272="$OPTS_GCC272 -O6 -DASM_COM -mcpu=common -funroll-loops"
        opts295="$OPTS_GCC295 -O6 -DASM_COM -mcpu=common -funroll-loops"
        ;;

    *internal-alpha)
        opts272="$OPTS_GCC272 -O6 -DASM_ALPHA -static -funroll-loops"
        opts295="$OPTS_GCC295 -O3 -DASM_ALPHA -funroll-loops"
        ;;
           
    *internal-x86)
        opts272="$OPTS_GCC272 -O6 -DASM_X86 -funroll-loops"
        opts295="$OPTS_GCC295 -O2 -DASM_X86 -mcpu=pentiumpro -fforce-addr \
                 -malign-functions=5 -malign-loops=4 -funroll-loops"
        ;;

    *) # no default needed
        ;;        

  esac

  # ------

  gccopts="$opts295" # 3.0
  if [ $gccver -lt 2960000 ]; then
    gccopts="$opts295"
    if [ $gccver -lt 2900000 ]; then
      gccopts="$opts272"
    fi
  fi
  OPTS_GCC="$gccopts"
} 

if [ "$1" = "-gccver" ]; then   # this won't work if you don't have gcc/g++
  gcc_get_ver
  echo "Interpreted GCC version: $gccver"
  exit 1
fi

# ----------------------------------------------------------------------
# non-GCC
# ----------------------------------------------------------------------

#-- Sparc, Sun CC 

OPTS_CC_SPARC='-fast -xO4 -xtarget=ultra1/140 -DASM_SPARC'
OPTS_AS_ULTRA="-xarch=v8plusa"

#-- MIPS, Irix MIPSpro compilers

# ABI specific options
OPTS_MIPSPRO_ABI_32="-n32 -mips3 -r4000"
OPTS_MIPSPRO_ABI_64="-64 -mips4 -r10000"
OPTS_CC_MIPSPRO="-O3 -IPA -LNO:opt=1 -xansi -DMIPSpro"

# Common across all MIPSpro compiles:
OPTS_MIPSPRO_CCFLAGS="${OPTS_CC_MIPSPRO} -DMULTITHREAD -DHAVE_OGR_CORES"
OPTS_MIPSPRO_DOCS="docs/readme._ix"

# Common to a specific ABI:
OPTS_MIPSPRO_CCFLAGS_32="${OPTS_MIPSPRO_CCFLAGS} ${OPTS_MIPSPRO_ABI_32}"
OPTS_MIPSPRO_CCFLAGS_64="${OPTS_MIPSPRO_CCFLAGS} ${OPTS_MIPSPRO_ABI_64}"
OPTS_LD_MIPSPRO_32="${OPTS_MIPSPRO_CCFLAGS} ${OPTS_MIPSPRO_ABI_32}"
OPTS_LD_MIPSPRO_64="${OPTS_MIPSPRO_CCFLAGS} ${OPTS_MIPSPRO_ABI_64}"

#-- Alpha, DEC cc

OPTS_CC_ALPHA_EV4='-O4 -tune ev4 -inline all'
OPTS_CC_ALPHA_EV5='-O4 -tune ev5 -inline all'
OPTS_CC_ALPHA='-O4 -fast -arch ev56 -tune ev56 -inline all'

#-- PPC, IBM xlC

#OPTS_XLC is being referred to but was nowhere to be found.
OPTS_XLC_PPC601="$OPTS_XLC -qarch=ppc -qtune=601 -D_AIX -D_ARCH_PPC"
OPTS_XLC_PPC="$OPTS_XLC -qarch=ppc -qtune=604 -D_AIX -D_ARCH_PPC"
OPTS_XLC_POWER="$OPTS_XLC -qarch=pwr -qtune=pwr -D_AIX -D_ARCH_PWR"
OPTS_XLC_POWER2="$OPTS_XLC -qarch=pwr2 -qtune=pwr2 -D_AIX -D_ARCH_PWR2"
OPTS_XLC3="-O3 -qansialias -qlibansi"
OPTS_XLC3_PPC601="$OPTS_XLC3 -qarch=ppc -qtune=601 -D_AIX -D_ARCH_PPC"
OPTS_XLC3_POWER="$OPTS_XLC3 -qarch=pwr -qtune=pwr -D_AIX -D_ARCH_PWR"

#-- PPC, MetroWerks 

OPTS_MWCC="-O7 -lang cplus"
OPTS_MWCC_PPC603="$OPTS_MWCC -proc 603e"
OPTS_MWCC_PPC604="$OPTS_MWCC -proc 604e"

# -------------------------------------------------------------------------

#
# Source C++ files making up the base client code.
#
# ---- speed sensitive things come last ----
COMMON_SRCS="\
	     common/iniread.cpp  \
	     common/buffbase.cpp \
	     common/mail.cpp     \
	     common/convdes.cpp  \
	     common/clicdata.cpp \
	     common/clitime.cpp  \
	     common/disphelp.cpp \
	     common/clievent.cpp \
	     common/cpucheck.cpp \
	     common/pathwork.cpp \
	     common/cliident.cpp \
	     common/logstuff.cpp \
	     common/triggers.cpp \
	     common/selcore.cpp  \
	     common/cmdline.cpp  \
	     common/selftest.cpp \
	     common/pollsys.cpp  \
	     common/setprio.cpp  \
	     common/console.cpp  \
	     common/modereq.cpp  \
	     common/confmenu.cpp \
	     common/confrwv.cpp  \
	     common/confopt.cpp  \
	     common/checkpt.cpp  \
	     common/util.cpp     \
	     common/random.cpp   \
	     common/base64.cpp   \
	     common/netbase.cpp  \
	     common/netconn.cpp  \
	     common/client.cpp   \
	                         \
	     common/bench.cpp    \
	     common/probman.cpp  \
	     common/probfill.cpp \
	     common/clirun.cpp   \
	     common/problem.cpp" #speed sensitive things come last

# conditional addition if files are present
#
if [ -f "common/scram.cpp" -o -f "common/scram.h" -o \
     -f "common/buffpriv.cpp" -o -f "common/buffupd.cpp" ]; then
COMMON_SRCS="common/buffpriv.cpp \
             common/scram.cpp    \
	     common/buffupd.cpp  \
	     ${COMMON_SRCS}"
else
COMMON_SRCS="common/buffpub.cpp
	     ${COMMON_SRCS}"
fi
if [ -f "common/minihttp.cpp" -o -f "common/netio.cpp" -o \
     -f "common/xmlserve.cpp" ]; then
COMMON_SRCS="common/minihttp.cpp \
	     common/netio.cpp    \
	     common/xmlserve.cpp \
	     ${COMMON_SRCS}"
fi

# **********************************************************************

case "$1" in

    # IRIX w/MIPSpro compilers.
    #
    # The following targets generate builds targetted to specific
    # SGI platforms, taking into account CPU type, L1/L2 cache
    # sizes, etc. Targets ending in -64 are for the 64 bit ABI,
    # otherwise the build is for the n32 ABI.
    #
    # The code currently compiles multithreaded, however I expect to
    # be able to get performance as good as (or better than) the
    # rc5 mips-crunch core by running single threaded and using the
    # MIPSpro compiler internal multithreading support against a
    # generic ANSI core.  This will require Makefile modifications to
    # allow us to compile C code with the C compiler (vs. running it
    # through the C++ front-end); in order to get the optimizations
    # only available to native C code.
    #
    # The targets assume MIPSpro compilers at release 7.2 or newer,
    # and an Irix 6.3 or newer build platform. All compiler
    # optimizations are guarded with "#ifdef MIPSpro". Use
    # _COMPILER_VERSION if you need to check the exact version of the
    # compiler.
    #
    # Run "hinv -c processor" to see which binary is applicable for
    # your platform.
    #
    # lyndon@orthanc.ab.ca (Nov 28, 1999)

    *mips-cc-n32)	# [lyndon]	Generic 32 bit client
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_32} \
			         -DCLIENT_OS_NAME=\"\\\"Irix (generic-n32)\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO_32}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES="${OPTS_MIPSPRO_DOCS} readme.irix"
       TARGET_TARBALL="irix6.5-mips-n32"
       add_sources "irix" "mips"
	     ;;

    *mips-cc-64)	# [lyndon]	Generic 64 bit client
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_64} \
			    -DCLIENT_OS_NAME=\"\\\"Irix (generic-64)\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO_64}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES="${OPTS_MIPSPRO_DOCS} readme.irix"
       TARGET_TARBALL="irix6.5-mips-64"
       add_sources "irix" "mips"
       ;;

    *mips-cc-ip19)	# [lyndon]
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_32} -TARG:platform=ip19 \
            -DCLIENT_OS_NAME=\"\\\"Irix IP19\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip19"
       add_sources "irix" "mips"
	     ;;

    *mips-cc-ip20)	# [lyndon]
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_32} -TARG:platform=ip20 \
			    -DCLIENT_OS_NAME=\"\\\"Irix IP20\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip20"
       add_sources "irix" "mips"
       ;;

    *mips-cc-ip21)	# [lyndon]
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_32} -TARG:platform=ip21 \
			         -DCLIENT_OS_NAME=\"\\\"Irix IP21\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip21"
       add_sources "irix" "mips"
	     ;;

    *mips-cc-ip22_4k)	# [lyndon]
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_32} -TARG:platform=ip22_4k \
			         -DCLIENT_OS_NAME=\"\\\"Irix IP22/R4K\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip22_4k"
       add_sources "irix" "mips"
       ;;

    *mips-cc-ip22_5k)	# [lyndon]
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_32} -TARG:platform=ip22_5k \
			       -DCLIENT_OS_NAME=\"\\\"Irix IP22/R5K\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip22_5k"
       add_sources "irix" "mips"
	     ;;

    *mips-cc-ip24)	# [lyndon]
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_32} -TARG:platform=ip24 \
			            -DCLIENT_OS_NAME=\"\\\"Irix IP24\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip24"
       add_sources "irix" "mips"
       ;;

    *mips-cc-ip25)	# [lyndon]
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_32} -TARG:platform=ip25 \
			    -DCLIENT_OS_NAME=\"\\\"Irix IP25\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip25"
       add_sources "irix" "mips"
	     ;;

    *mips-cc-ip26)	# [lyndon]
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_32} -TARG:platform=ip26 \
			    -DCLIENT_OS_NAME=\"\\\"Irix IP26\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip26"
       add_sources "irix" "mips"
	     ;;

    *mips-cc-ip27)	# [lyndon]
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_32} -TARG:platform=ip27 \
			     -DCLIENT_OS_NAME=\"\\\"Irix IP27\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip27"
       add_sources "irix" "mips"
	     ;;

    *mips-cc-ip27-64)	# [lyndon]
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_64} -TARG:platform=ip27 \
			     -DCLIENT_OS_NAME=\"\\\"Irix IP27-64\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO_64}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip27-64"
       add_sources "irix" "mips"
       ;;

    *mips-cc-ip28)	# [lyndon]
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_32} -TARG:platform=ip28 \
			    -DCLIENT_OS_NAME=\"\\\"Irix IP28\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip28"
       add_sources "irix" "mips"
       ;;

    *mips-cc-ip30)	# [lyndon]
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_32} -TARG:platform=ip30 \
			         -DCLIENT_OS_NAME=\"\\\"Irix IP30\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip30"
       add_sources "irix" "mips"
       ;;

    *mips-cc-ip32_5k)	# [lyndon]
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_32} -TARG:platform=ip32_5k \
               -DCLIENT_OS_NAME=\"\\\"Irix IP32/R10K\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip32_5k"
       add_sources "irix" "mips"
       ;;

    *mips-cc-ip32_10k)	# [lyndon]
       TARGET_CC="CC"
       TARGET_CCFLAGS="-ISA -LNO ${OPTS_MIPSPRO_CCFLAGS_32} -TARG:platform=ip32_10k \
			        -DCLIENT_OS_NAME=\"\\\"Irix IP32/R10K\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip32_10k"
       add_sources "irix" "mips"
       ;;

    *mips-cc-ip32_10k-64)	# [lyndon]
       TARGET_CC="CC"
       TARGET_CCFLAGS="${OPTS_MIPSPRO_CCFLAGS_64} -TARG:platform=ip32_10k \
			        -DCLIENT_OS_NAME=\"\\\"Irix IP32/R10K-64\\\"\""
       TARGET_LDFLAGS="${OPTS_LD_MIPSPRO_64}"
       TARGET_LIBS="-lpthread"
       TARGET_DOCFILES=${OPTS_MIPSPRO_DOCS}   #platform specific docfile
       TARGET_TARBALL="irix6-mips-ip32_10k-64"
       add_sources "irix" "mips"
       ;;

# END of MIPSpro targets.

    *mips-linux)	#
        TARGET_CC="gcc"
        generate_gcc_opts "mips" "linux"
        TARGET_CCFLAGS="$OPTS_GCC -mcpu=r3000 -DMULTITHREAD"
        TARGET_LDFLAGS=""
        TARGET_LIBS="-lpthread"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="linux-mips"
        add_sources "linux" "mips"
	      ;;

    *mips-sni)	   #For MIPS SINIX
        TARGET_CC="g++"
        generate_gcc_opts "mips" "sinix"
        TARGET_CCFLAGS="$OPTS_GCC -Dsinix"
        TARGET_LIBS="-lsocket -lnsl -lc -L/usr/ucblib -lucb"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "sni" "mips"
	      ;;

    *mips-irix5-gcc)	# gcc is faster because it can use mips-crunch.cpp
        # If compiling on Irix 5 you must -D_irix5_ now to get the usleep()
        # replacement.
        TARGET_CC="g++"
        generate_gcc_opts "mips" "irix" 
        TARGET_CCFLAGS="$OPTS_GCC -D_irix5_"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "irix" "mips"
	      ;;

    *mips-irix64-gcc)     #needs "very recent" egcs
        TARGET_CC="g++"
        generate_gcc_opts "mips" "irix"
        TARGET_CCFLAGS="$OPTS_GCC -mabi=64 -DMULTITHREAD"
        TARGET_LDFLAGS="-mabi=64"
        TARGET_LIBS="-lpthread"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "irix" "mips"
        ;;

    *mips-irix32-gcc)	   # [lyndon] Irix 6, gcc, threaded (assumes n32 ABI)
        TARGET_CC="gcc"
        generate_gcc_opts "mips" "irix"
        TARGET_CCFLAGS="$OPTS_GCC -mabi=n32 -DMULTITHREAD"
        TARGET_LIBS="-lpthread"
        TARGET_TARBALL="irix6-mips-n32"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "irix" "mips"
        ;;

    *mipsel-netbsd)
        TARGET_CC="g++"
        generate_gcc_opts "mips" "netbsd"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="-static"
        TARGET_LIBS="-ltermcap"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="netbsd-mipsel"
        add_sources "netbsd" "mips"
        ;;

    *mipseb-netbsd)
        TARGET_CC="g++"
        generate_gcc_opts "mips" "netbsd"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="-static"
        TARGET_LIBS="-ltermcap"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="netbsd-mipseb"
        add_sources "netbsd" "mips"
        ;;

    #*mips-ultrix-gcc)	# For mips based DEC Ultrix machines
    #    TARGET_CC="g++"
    #    generate_gcc_opts "mips" "irix"
    #    TARGET_CCFLAGS="$OPTS_GCC"
    #    TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
    #    add_sources "ultrix" "mips"
    #    ;;

    *mipsle-nto2)
        TARGET_AS="qcc -Vgcc_ntomipsle -c"
        TARGET_CC="qcc -Vgcc_ntomipsle"
        TARGET_STRIP="/usr/gcc/bin/ntomipsle-strip"
        TARGET_ASFLAGS="-DNO_BALIGN"
        TARGET_CCFLAGS="-lang-c++ -fomit-frame-pointer -fno-inline-functions \
                        -fno-exceptions -fno-rtti \
                        -DASM_MIPS -DMULTITHREAD"
        TARGET_LIBS="-lsocket"
        TARGET_DOCFILES="docs/readme._ix"
        TARGET_TARBALL="nto2-mipsle"
        TARGET_GENMAN=
        TARGET_OS="NTO2"     # cross-compilation
        add_sources "nto2" "mips"
        ;;

    *mipsbe-nto2)
        TARGET_AS="qcc -Vgcc_ntomipsbe -c"
        TARGET_CC="qcc -Vgcc_ntomipsbe"
        TARGET_STRIP="/usr/gcc/bin/ntomipsbe-strip"
        TARGET_ASFLAGS="-DNO_BALIGN"
        TARGET_CCFLAGS="-lang-c++ -fomit-frame-pointer -fno-inline-functions \
                        -fno-exceptions -fno-rtti \
                        -DASM_MIPS -DMULTITHREAD"
        TARGET_LIBS="-lsocket"
        TARGET_DOCFILES="docs/readme._ix"
        TARGET_TARBALL="nto2-mipsbe"
        TARGET_GENMAN=
        TARGET_OS="NTO2"     # cross-compilation
        add_sources "nto2" "mips"
        ;;

    *hpux-hppa-CC) # obsolete? Not used by Ivo...
        TARGET_CC="CC"
        TARGET_CCFLAGS="+a1 +O3 -D_HPUX -DASM_HPPA"
        TARGET_LDFLAGS='+A +DA2.0'
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "hpux" "hppa"
        ;;

    *hpux-hppa-gcc)  # [ivo]
        TARGET_CC="g++"
        generate_gcc_opts "hppa" "hpux"
        TARGET_CCFLAGS="$OPTS_GCC" #-DMULTITHREAD
        TARGET_LDFLAGS="" #-lpthread"
        TARGET_TARBALL="hpux1020-hppa11-nomt"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "hpux" "hppa"
        ;;

    *hpux-m68k-gcc)
        TARGET_CC="g++"
        generate_gcc_opts "68k" "hpux"
        TARGET_CCFLAGS="$OPTS_GCC -m68030 -D_HPUX_M68K -static"
        TARGET_LDFLAGS="-static"
        TARGET_AFLAGS="$OPTS_GAS -m68030"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "hpux" "68k"
        ;;

    *88k-dgux)     # DGUX (Data General Unix)
        TARGET_CC="/usr/local/bin/g++"
        generate_gcc_opts "88k" "dgux"
        TARGET_CCFLAGS="$OPTS_GCC -D_POSIX4A_DRAFT6_SOURCE -D_DGUX -DMULTITHREAD"
        TARGET_LIBS="-lthread"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "hpux" "88k"
        ;;

###### Sparc/UltraSparc

    *sparc-openbsd)                   # snake, now without DES
        TARGET_CC="g++"
        generate_gcc_opts "sparc" "openbsd"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="-static"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="openbsd-sparc-aout"
        add_sources "openbsd" "sparc"
        ;;

    *sparc-netbsd)
        TARGET_CC="g++"
        generate_gcc_opts "sparc" "netbsd"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="-static"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="netbsd-sparc-elf"
        add_sources "netbsd"
        ;;

    *sparc-linux)	# [remi]
        TARGET_CC="gcc295"
        TARGET_AS="gcc295 -c"
        generate_gcc_opts "supersparc" "linux"
        TARGET_CCFLAGS="$OPTS_GCC -g -DMULTITHREAD"
	      TARGET_LDFLAGS="-g -static"
	      TARGET_LIBS="-lpthread"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="linux-sparc"
        add_sources "linux" "sparc"
        ;;

    *sparc-sunos-gcc-nomt)   # [ivo sunos413/nomt]
        TARGET_CC="gcc"
        generate_gcc_opts "sparc" "sunos"
        TARGET_CCFLAGS="$OPTS_GCC -Dsunos"
        TARGET_LIBS="-lnsl -ldl"
        TARGET_LDFLAGS=""
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TRAGET_TARBALL="sunos413-sparc-nomt"
        add_sources "sunos" "sparc"
        ;;

    *sparc-solaris-gcc-nomt)   # [ivo solaris/nomt]
        TARGET_CC="gcc"
        generate_gcc_opts "supersparc" "solaris"
        TARGET_CCFLAGS="-pipe $OPTS_GCC -Dsolaris"
        TARGET_LIBS="-lnsl -lsocket -ldl"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TRAGET_TARBALL="solaris26-sparc-nomt"
        add_sources "solaris" "sparc"
        ;;

    *sparc-solaris-gcc)   # [ivo solaris/mt] fastest rc5 <- production target
        TARGET_CC="gcc"
        generate_gcc_opts "supersparc" "solaris"
        TARGET_CCFLAGS="-pipe $OPTS_GCC -Dsolaris -DMULTITHREAD"
        TARGET_LIBS="-lnsl -lsocket -ldl -lpthread"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="solaris26-sparc"
        add_sources "sunos" "sparc"
        ;;

    *sparc-solaris-gcc-ultra)   # [ivo ultra] very fast DES -> hence obsolete
        TARGET_CC="gcc"
        # See Also: platforms/ultrasparc/s_paramaters.h
        #OPTS_DES_ULTRA_C="-DDES_ULTRA -DINLINE=' ' -DIN_DCTI_CLIENT \
        #	  -DLOW_WORD_VALID -DMANUAL_REGISTER_ALLOCATION  \
        #	  -DKWAN_LOOP_SLICE='unsigned long' -Iplatforms/ultrasparc"
        generate_gcc_opts "generic" "solaris"
        OPTS_DES_ULTRA_ASM="-DIN_DCTI_CLIENT -DDES_ULTRA -DINLINE=inline \
                            -DFULL_64_BIT_VALID -DASM \
		                        -DMANUAL_REGISTER_ALLOCATION -DDO_FLOAT_PIPE  \
		                        -DUSE_IDENTICAL_FLOAT_REGISTERS \
                            -DUSE_64_BIT_SENTINEL \
                            -DKWAN_LOOP_SLICE='unsigned long' \
                            -Iplatforms/ultrasparc \
		                        -mtune=ultrasparc -fforce-mem -fstrict-aliasing\
		                        -mv8plus -mvis -mepilogue -Wa,-xarch=v8plusa \
                            -mflat -Os -fcall-used-g4 -fcall-used-g5 \
                            -fcall-used-g6"
        TARGET_CCFLAGS="${OPTS_GCC} -pipe $OPTS_DES_ULTRA_ASM -Dsolaris \
                        -DMULTITHREAD"
        TARGET_ASFLAGS="$OPTS_AS_ULTRA"
        TARGET_LIBS="-lnsl -lsocket -ldl -lpthread"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="solaris26-ultrasparc"
        add_sources "solaris" "sparc" "ultra"
        ;;

    #####

    *x86-solaris)    # gcc, mt, dynamic
        TARGET_CC="g++"
        generate_gcc_opts "x86" "solaris"
        TARGET_CCFLAGS="$OPTS_GCC -Dsolaris -DMULTITHREAD -D_REENTRANT"
        TARGET_LIBS="-lnsl -lsocket -ldl -lthread"
        TARGET_DOCFILES="docs/readme._ix docs/readme.x86-solaris libstdc++.so.2.8.1"
        TARGET_TARBALL="x86-solaris"
        add_sources "solaris" "x86"
        ;;

###### Alpha


    *alpha-digital_unix-mt)
        TARGET_CC="g++"
        generate_gcc_opts "alpha" "decunix"
        TARGET_CCFLAGS="-Wa,-02 $OPTS_GCC -O6 -DDEC_UNIX_CPU_SELECT \
                        -DMULTITHREAD -D_THREAD_SAFE -D_REENTRANT"
        TARGET_LIBS="-lpthread -lexc"
        TARGET_OS="DIGITAL_UNIX" # need to treat some cores specially
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "digital-unix" "alpha" "mt"
        ;;

    *alpha-digital_unix)
        TARGET_CC="g++"
        TARGET_AS="as"
        generate_gcc_opts "alpha" "decunix"
        TARGET_CCFLAGS="-Wa,-02 $OPTS_GCC -O6 -DDEC_UNIX_CPU_SELECT"
        TARGET_LIBS="-static"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_OS="DIGITAL_UNIX" # need to treat some cores specially
        TARGET_TARBALL="digital_unix-alpha"
        add_sources "digital-unix" "alpha"
        ;;

    *alpha-netbsd)
        TARGET_CC="g++"
        generate_gcc_opts "alpha" "netbsd"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="-static"
        TARGET_LIBS="-ltermcap"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="netbsd-alpha"
        add_sources "netbsd" "alpha"
        ;;

    *alpha-openbsd)                  # snake
        TARGET_AS="g++ -c"
        TARGET_CC="g++"
        generate_gcc_opts "alpha" "openbsd"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="-static"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="openbsd-alpha"
        add_sources "openbsd" "alpha"
        ;;

    *alpha-linux)               # [dworz/jlawson]
        TARGET_AS="as"
        TARGET_CC="g++"
        generate_gcc_opts "alpha" "linux"
        TARGET_CCFLAGS="$OPTS_GCC -DMULTITHREAD"
        TARGET_LDFLAGS=""
        TARGET_LIBS="-lpthread -ldl"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="linux-alpha"
        add_sources "linux" "alpha"
	      ;;

###### PowerPC/POWER

    *ppc-linux)		             # [myshkin] linux-ppc
        TARGET_CC="g++"
        generate_gcc_opts "ppc" "linux"
        TARGET_CCFLAGS="$OPTS_GCC -DMULTITHREAD"
        TARGET_LDFLAGS="-static"
        TARGET_LIBS="-lpthread"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="linux-ppc"
        add_sources "linux" "ppc"
	      ;;

    *ppc-netbsd)
        TARGET_CC="g++"
        generate_gcc_opts "ppc" "netbsd"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="-static"
        TARGET_LIBS="-ltermcap"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "netbsd" "ppc"
        ;;

    *ppc-macosxserver) # [mfeiri] (MACH 2.x based: MXS 1.x, Darwin 0.x, Rhapsody)
	      TARGET_CC="cc"
        #generate_gcc_opts "ppc" "macosx"
        TARGET_CCFLAGS="-O6"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="macosxserver-ppc"
        add_sources "macosx" "ppc" "mach2"
        ;;

    *ppc-macosx)       # [mfeiri] (MACH 3.x based: MacOSXDP, Darwin 1.0)
        TARGET_CC="cc"
        generate_gcc_opts "ppc" "macosx"
        TARGET_CCFLAGS="$OPTS_GCC -DMULTITHREAD -force_cpusubtype_ALL -faltivec"
        TARGET_LDFLAGS="-framework IOKit -framework CoreFoundation"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="macosx-ppc"
        add_sources "macosx" "ppc"
        ;;

  ### AIX PPC targets
	# classes are buggy with AIX !

    *ppc-aix4-xlc)	 # This is the fastest build for AIX 4.x PPC machines
        TARGET_CC="xlC"
        TARGET_CCFLAGS="$OPTS_XLC_PPC"
        TARGET_LIBS="-lCns"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "aix" "ppc" "aix4"
	      ;;

    *ppc601-aix4-xlc)      # AIX 4.x PPC, 601 chip
        TARGET_CC="xlC"
        TARGET_CCFLAGS="$OPTS_XLC_PPC601"
        TARGET_LIBS="-lCns"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "aix" "ppc" "aix4"
	      ;;

    *ppc-aix32-xlc)	   # AIX 3.2.x PPC
        TARGET_CC="xlC"
        TARGET_CCFLAGS="$OPTS_XLC3_PPC601"
        TARGET_LIBS="-lCns"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "aix" "ppc" "aix32"
        ;;

    *ppc-aix32-gcc)	   # AIX 3.2.x gcc/egcs [patrick] <patrick@mail4you.de>
        TARGET_CC="g++"
        generate_gcc_opts "ppc" "aix"
        TARGET_CCFLAGS="$OPTS_GCC -D_AIX"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "ppc" "aix" "aix32"
        ;;

  ### AIX POWER targets
        # AIX POWER this one works for all platforms (AIX 3.x, 4.[1-3])!

    *power-aix)           # gcc/egcs [patrick] <patrick@mail4you.de>
        TARGET_CC="g++"
        generate_gcc_opts "power" "aix"
        TARGET_CCFLAGS="$OPTS_GCC -D_AIX"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "aix" "power"
        ;;

    *aix-all)                       # [patrick] new all in one AIX target
        # WARNING: the code will show a PPC CPU even though also POWER
        # CPUs are supported !
        TARGET_CC="g++"
        generate_gcc_opts "power" "aix"
        AIXPOWERFLAGS="$OPTS_GCC -mthreads -D_AIX"
        generate_gcc_opts "ppc" "aix"
        AIXPPC601FLAGS="$OPTS_GCC -mthreads -mcpu=601 -D_AIX"
        generate_gcc_opts "ppc604" "aix"
        AIXPPC604FLAGS="$OPTS_GCC -mthreads -D_AIX"
        generate_gcc_opts "aixcommon" "aix"
        TARGET_CCFLAGS="$OPTS_GCC -mthreads -D_AIX -D_AIXALL"
	# ogr_power.o uses the same source as ogr.o, 
	# only different compiler seetings
	TARGET_ADDOBJS="output/ogr_power.o $TARGET_ADDOBJS"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_LIBS=$TARGET_LIBS
        TARGET_LDFLAGS="$TARGET_LDFLAGS -mthreads"
        TARGET_TARBALL="aix-all-aix4.1"
        add_sources "aix" "power" "aixall" #easier to do under power than ppc
        ;;

  ### QNX PPC targets
    *ppc-nto2)
        TARGET_AS="qcc -Vgcc_ntoppcbe -c"
        TARGET_CC="qcc -Vgcc_ntoppcbe"
        TARGET_STRIP="/usr/gcc/bin/ntoppc-strip"
        TARGET_ASFLAGS="-DNO_BALIGN"
        TARGET_CCFLAGS="-lang-c++ -fomit-frame-pointer -fno-inline-functions \
	                -fno-exceptions -fno-rtti -DASM_PPC -DMULTITHREAD"
        TARGET_LIBS="-lsocket"
        TARGET_DOCFILES="docs/readme._ix"
        TARGET_TARBALL="nto2-ppcbe"
        TARGET_GENMAN=
        TARGET_OS="NTO2"     # cross-compilation
        add_sources "nto2" "ppc"
        ;;

###### SH4 platforms

  ### SH4 QNX targets

    *sh4le-nto2)
        TARGET_AS="qcc -Vgcc_ntoshle -c"
        TARGET_CC="qcc -Cgcc_ntoshle"
        TARGET_STRIP="/usr/gcc/bin/ntoshle-strip"
        TARGET_ASFLAGS="-DNO_BALIGN" 
        TARGET_CCFLAGS="-lang-c++ -fomit-frame-pointer -fno-inline-functions \
                        -fno-exceptions -fno-rtti -DASM_SH4 -DMULTITHREAD"
        TARGET_LIBS="-lsocket"
        TARGET_DOCFILES="docs/readme._ix"
        TARGET_TARBALL="nto2-sh4le"
        TARGET_GENMAN=
        TARGET_OS="NTO2"     # cross-compilation
        add_sources "nto2" "sh4" 
        ;;

    *sh4be-nto2)
        TARGET_AS="qcc -Vgcc_ntoshbe -c"
        TARGET_CC="qcc -Vgcc_ntoshbe"
        TARGET_STRIP="/usr/gcc/bin/ntoshbe-strip"
        TARGET_ASFLAGS="-DNO_BALIGN" 
        TARGET_CCFLAGS="-lang-c++ -fomit-frame-pointer -fno-inline-functions \
                        -fno-exceptions -fno-rtti -DASM_SH4 -DMULTITHREAD"
        TARGET_LIBS="-lsocket"
        TARGET_DOCFILES="docs/readme._ix"
        TARGET_TARBALL="nto2-sh4be"
        TARGET_GENMAN=
        TARGET_OS="NTO2"     # cross-compilation
        add_sources "nto2" "sh4"
        ;;

###### Intel X86

    ### ***RELEASE*** targets - mt for all
    ### use of -Xlinker -omagic (for the SMC core) forces -static
    ### so which lib (libc4/libc5/glibc20/glibc21) the binary is linked
    ### against is fairly moot. HOWEVER, you _should_ add resolv.c
    ### to TARGET_ADDSRCS to be truly binary compatible. If you don't,
    ### dns lookup will either not work (or not work reliably), or segfault.
    ### The rest of the client is unaffected by the choice of libc, ie a
    ### client built on the newest-and-greatest linux will work even on 2.0.x

    *x86-linux)	                    # generic. multithreaded. works everywhere
        TARGET_AS="gcc -c"          # can make aout if TARGET_CCFLAGS+=-aout
        TARGET_CC="gcc"             
        generate_gcc_opts "x86" "linux"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="$TARGET_LDFLAGS -static"
        TARGET_NASM_FMT="elf"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="linux-x86-elf"
        add_sources "linux" "x86" 
	      ;;

    *x86-linux-pthread)         # not for distribution
        TARGET_AS="gcc -c"      
        TARGET_CC="gcc"
        generate_gcc_opts "x86" "linux"
        TARGET_CCFLAGS="$OPTS_GCC -DMULTITHREAD"
        TARGET_NASM_FMT="elf"
        TARGET_LDFLAGS="$TARGET_LDFLAGS -static"
        TARGET_LIBS="-lpthread"
        TARGET_DOCFILES="docs/readme._ix"
        TARGET_TARBALL="" # not for distribution
        TARGET_GENMAN=    # too many unexplainable issues (with glibc?)
        if [ -f /usr/include/pthread/mit/kthread.h ]; then
          TARGET_CCFLAGS="$TARGET_CCFLAGS -D_MIT_POSIX_THREADS=1"
        fi  
        #TARGET_CCFLAGS="-g $TARGET_CCFLAGS" #for debugging
        #TARGET_STRIP="touch"                #for debugging
        add_sources "linux" "x86" 
	      ;;

    *x86-linux-aout)	              # [jlawson] aout, no threads/smc/lurk
        TARGET_CC="gcc"               # old gcc doesn't know .cpp
        TARGET_CCFLAGS="-x c++ -O2 -fomit-frame-pointer -DHAVE_OGR_CORES"
        TARGET_LD="gcc"
        TARGET_NASM_FMT="aout"
        TARGET_LIBS=""
        TARGET_LDFLAGS="$TARGET_LDFLAGS -static"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="linux-x86-aout"
        add_sources "linux" "x86" "aout"
	      ;;

    *x86-linux-debug)	              # test/debug target
        TARGET_AS="gcc -c"
        TARGET_CC="gcc"
        generate_gcc_opts "x86" "linux"  # -g for debug
        TARGET_CCFLAGS="-g $OPTS_GCC -DMULTITHREAD"
        TARGET_NASM_FMT="elf"
        TARGET_STRIP="touch"      # do not strip
        TARGET_LIBS="-lpthread"
        TARGET_LDFLAGS="$TARGET_LDFLAGS -static"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="linux-x86-debug"
        add_sources "linux" "x86" 
	      ;;

    *x86-freebsd-aout)             # FreeBSD 2.x experimental, snake
        TARGET_AS="gcc -c"
        TARGET_CC="g++"
        generate_gcc_opts "x86" "freebsd"
        TARGET_CCFLAGS="$OPTS_GCC -Werror"
        TARGET_LDFLAGS="$TARGET_LDFLAGS -static"
        TARGET_NASM_FMT="aoutb"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="freebsd-x86-aout"
        add_sources "freebsd" "x86" 
        ;;

    *x86-freebsd-elf)       # FreeBSD >=3.x, elf, "threaded", cyp
        # note: although this client supports SMP (and is thus threaded),
        # we NEED to link against libc, and NOT libc_r because the libc_r
        # in 3.4 and above is incompatible with the pre-3.4 (specifically,
        # the >=3.4 libc_r versions of select() and nanosleep() syscalls
        # have their own new syscall numbers; they were emulated before).
        # We don't really need the libc_r stuff anyway because the "threads"
        # are really rfork()'d children.    -cyp Feb/13/2000
        TARGET_AS="gcc -c"
        TARGET_CC="g++"
        generate_gcc_opts "x86" "freebsd"
        TARGET_CCFLAGS="$OPTS_GCC -Werror"
        TARGET_LDFLAGS="$TARGET_LDFLAGS -static"
        TARGET_LIBS="-lc" # NOT libc_r
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="freebsd-x86-elf"
        add_sources "freebsd" "x86" 
	      ;;

    *x86-netbsd-aout)	# NetBSD 1.4.x, aout [bernd]
        TARGET_AS="gcc -c"
        TARGET_CC="g++"
        generate_gcc_opts "x86" "netbsd"
        TARGET_CCFLAGS="$OPTS_GCC -Werror"
        TARGET_LDFLAGS="-static"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_NASM_FMT="aoutb"
        TARGET_TARBALL="netbsd-i386-aout"
        add_sources "netbsd" "x86" 
	      ;;

    *x86-netbsd-elf)       # NetBSD > 1.4.x, elf, [bernd]
        TARGET_AS="gcc -c"
        TARGET_CC="g++"
        generate_gcc_opts "x86" "netbsd"
        TARGET_CCFLAGS="$OPTS_GCC -Werror"
        TARGET_LDFLAGS="-static"
        TARGET_LIBS="-lc"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="netbsd-i386-elf"
        add_sources "netbsd" "x86" 
	      ;;

    *x86-openbsd)	# snake
        TARGET_CC="g++"
        generate_gcc_opts "x86" "openbsd"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="-static"
        TARGET_NASM_FMT="aoutb"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="openbsd-x86-aout"
        add_sources "openbsd" "x86" 
	      ;;

    *x86-bsdos-aout)                        # BSD/OS 2.x,3.x (aout) -snake
        TARGET_AS="g++ -c -DNO_BALIGN"
        TARGET_CC="g++"
        generate_gcc_opts "x86" "bsdos"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="-static"
        TARGET_NASM_FMT="" #<- no nasm support
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="bsdos2-x86-aout"
        add_sources "bsdos" "x86" 
	      ;;

    *x86-bsdos-elf)                        # BSD/OS 4.x+ (ELF) -snake
        # bsdos-4 client is still experimental, found a severe bug with 
        # PentiumII now under BSD/OS 4.1 it seems to run and compile correctly
        TARGET_AS="g++ -c -DNO_BALIGN"
        TARGET_CC="g++"
        generate_gcc_opts "x86" "bsdos"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="-static"
        TARGET_NASM_FMT="elf"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="bsdos4-x86-elf"
        add_sources "bsdos" "x86" 
	      ;;

    *x86-qnx4)
        TARGET_AS="g++ -c -DNO_BALIGN"
        TARGET_CC="g++"
        generate_gcc_opts "x86" "qnx"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_NASM="/home/jbaker/nasm.qnx4"
        #TARGET_NASM="nasm"
        TARGET_LIBS="-lsocket"
        TARGET_ADDASMS=""
        TARGET_DOCFILES="docs/readme._ix"
        TARGET_TARBALL="qnx4-x86"
        add_sources "qnx" "x86" 
        ;;

    *x86-nto2)
    	  TARGET_AS="qcc -Vgcc_ntox86 -c"
        TARGET_CC="qcc -Vgcc_ntox86"
        TARGET_STRIP="/usr/gcc/bin/ntox86-strip"
        TARGET_NASM="//55/home/jbaker/nasm.qnx4"
        #TARGET_NASM="nasm"
        TARGET_ASFLAGS="-DNO_BALIGN"
        TARGET_CCFLAGS="-lang-c++ -fomit-frame-pointer -fno-inline-functions \
                        -fno-exceptions -fno-rtti -DMULTITHREAD -DASM_X86"
	      TARGET_LIBS="-lsocket"
        TARGET_DOCFILES="docs/readme._ix"
        TARGET_TARBALL="nto2-x86"
        TARGET_GENMAN=
        TARGET_OS="NTO2"     # cross-compilation
        add_sources "nto2" "x86" 
	      ;;

    *x86-sco5)
        TARGET_AS="g++ -c"
        TARGET_CC="g++"
        generate_gcc_opts "x86" "sco"
        TARGET_CCFLAGS="$OPTS_GCC -belf -Dsco5"
        TARGET_LDFLAGS="-static"
        TARGET_LIBS="-lsocket"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "sco" "x86" 
	      ;;

    *x86-dynix4)
        TARGET_CC="ec++"
        TARGET_CCFLAGS="-relax -D_SEQUENT_"
        TARGET_LIBS="-lsocket -lnsl -lseq -L/opt/epc/ec++/lib -lec++"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "dynix" "x86" 
	      ;;

    *x86-dynix2)
        TARGET_CC="g++"
        generate_gcc_opts "x86" "dynix" 
        TARGET_CCFLAGS="$OPTS_GCC -D_SEQUENT_"
        TARGET_LDFLAGS="-L."
        # Don't panic; -lXbsd is for gettimeofday()
        TARGET_LIBS="-lsocket -linet -lnsl -lXbsd -lseq"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "dynix" "x86" 
	      ;;

###### NeXT (x86, m68k, sparc, hppa)

    *x86-next)
        TARGET_AS="gcc -c"
        TARGET_CC="gcc"
        generate_gcc_opts "x86" "next"
        TARGET_CCFLAGS="-static $OPTS_GCC -D_NeXT_"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="next-x86"
        add_sources "next" "x86" 
	      ;;

    *x86-macosx)
        # this one's for X86-Rhapsody which is quite similar to NeXTstep
        # but not completely identical     - snake
        TARGET_AS="cc -c"
        TARGET_CC="cc"
        TARGET_ASFLAGS="-DNO_BALIGN"
        TARGET_CCFLAGS="-DNO_BALIGN"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="rhapsody-x86"
        add_sources "macosx" "x86" 
	      ;;

    *m68k-next)
        TARGET_CC="gcc"
        generate_gcc_opts "68k" "next"
        TARGET_CCFLAGS="-static $OPTS_GCC -m68040 -D_NeXT_"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="next-m68k"
        add_sources "next" "68k" 
	      ;;

    *sparc-next)
        TARGET_CC="cc++"
        generate_gcc_opts "generic" "next"
        TARGET_CCFLAGS="$OPTS_GCC -O6 -DASM_SPARC -arch sparc -D_NeXT_ -D_OLD_NEXT_"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "next" "sparc" 
	      ;;

    *hppa-next)
        TARGET_CC="cc++"
        generate_gcc_opts "generic" "next"
        TARGET_CCFLAGS="$OPTS_GCC -O6 -DASM_HPPA -arch hppa -D_NeXT_ -D_OLD_NEXT_"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "next" "hppa" 
	      ;;

    *m68k-netbsd) # NetBSD on NeXT, 68k Macs, 68k Amiga, sun3 etc, -snake
        # needs gas 2.9.1 to compile OGR
        TARGET_CC="g++"
        TARGET_CCFLAGS="-O6 -fno-exceptions -fomit-frame-pointer \
                        -m68020-40 -DASM_68K -DLURK -DHAVE_OGR_CORES"
        TARGET_LDFLAGS="-static"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="netbsd-68k"
        add_sources "netbsd" "68k" 
        ;;

    *arm-riscos)
        TARGET_CC="armcpp -aif -nodebug -littleend -apcs 3/26bit/swst/hardfp/fpe2 -zps1 -nounusedareas -l/home/cberry/play/riscoslib/CLib/stubs.o"
        TARGET_AS="armasm"
        TARGET_ASFLAGS="-apcs 3/26bit"
        TARGET_CCFLAGS="-Icommon -Irc5/arm -Ides -Iogr -Iplatforms -I/home/cberry/play/riscoslib/OSLib -I/home/cberry/play/riscoslib/TCPIPLibs -J/home/cberry/play/riscoslib/CLib -DCOMPAT_INET4 -D__riscos -DHAVE_OGR_CORES"
        TARGET_LIBS="-lcpplib /home/cberry/play/riscoslib/TCPIPLibs/unixlib.o /home/cberry/play/riscoslib/TCPIPLibs/inetlib.o /home/cberry/play/riscoslib/TCPIPLibs/socklib.o"
        TARGET_DOCFILES="docs/readme.riscos"   #platform specific docfile
        TARGET_STRIP=touch
        TARGET_BINNAME_SUFFIX=",ff8"
        TARGET_OS="RISCOS"     # cross-compilation
        add_sources "riscos" "arm"
	      ;; 
    *arm-riscos-prepare) #create tar archive for native compilation
        rm -rf dnetc_riscos
        mkdir dnetc_riscos
        mkdir dnetc_riscos/common
        mkdir dnetc_riscos/common/c++
        mkdir dnetc_riscos/common/h
        mkdir dnetc_riscos/rc5
        mkdir dnetc_riscos/rc5/arm
        mkdir dnetc_riscos/rc5/arm/s
        mkdir dnetc_riscos/ogr
	mkdir dnetc_riscos/ogr/h
        mkdir dnetc_riscos/ogr/ansi
        mkdir dnetc_riscos/ogr/ansi/c++
        mkdir dnetc_riscos/ogr/ansi/h
        mkdir dnetc_riscos/platforms
        mkdir dnetc_riscos/platforms/riscos
        mkdir dnetc_riscos/platforms/riscos/c++
        mkdir dnetc_riscos/platforms/riscos/h
        mkdir dnetc_riscos/platforms/riscos/s
        mkdir dnetc_riscos/o
        for file in common/*.h; do
          cp $file dnetc_riscos/common/h/`basename $file | sed -e s/[.]h//`
        done
        for file in common/*.cpp; do
          cp $file dnetc_riscos/common/c++/`basename $file | sed -e s/[.]cpp//`
        done
        for file in rc5/arm/rc5-arm-?.s; do
          cp $file dnetc_riscos/rc5/arm/s/`basename $file | sed -e s/[.]s//`
        done
        for file in ogr/*.h; do
          cp $file dnetc_riscos/ogr/h/`basename $file | sed -e s/[.]h//`
        done
        for file in ogr/ansi/*.h; do
          cp $file dnetc_riscos/ogr/ansi/h/`basename $file | sed -e s/[.]h//`
        done
        for file in ogr/ansi/*.cpp; do
          cp $file dnetc_riscos/ogr/ansi/c++/`basename $file | sed -e s/[.]cpp//`
        done
        for file in platforms/riscos/*.cpp; do
          cp $file dnetc_riscos/platforms/riscos/c++/`basename $file | sed -e s/[.]cpp//`
        done
        for file in platforms/riscos/*.s; do
          cp $file dnetc_riscos/platforms/riscos/s/`basename $file | sed -e s/[.]s//`
        done
        for file in platforms/riscos/*.h; do
          cp $file dnetc_riscos/platforms/riscos/h/`basename $file | sed -e s/[.]h//`
        done
        cp Makefile.riscos dnetc_riscos/Makefile
        rm -f riscos.tar.gz
        tar cf - dnetc_riscos | gzip -rc - > riscos.tar.gz
        rm -rf dnetc_riscos
        echo "Now transfer the riscos.tar.gz file to your RiscOS machine and compile!"
        exit 0
        ;;                              

    *arm-linux-aout)					# chrisb
        TARGET_CC="gcc"
        TARGET_AS="as"
        generate_gcc_opts "arm" "linux"
        TARGET_CCFLAGS="$OPTS_GCC -Dlinux"
        TARGET_LIBS="-lm"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="linux-arm-aout"
        add_sources "linux" "arm" "aout"
	      ;;

    *arm-linux-elf)				# andrewm
        TARGET_CC="gcc"
        TARGET_AS="as"
        generate_gcc_opts "arm" "linux"
        TARGET_CCFLAGS="$OPTS_GCC -Dlinux"
        TARGET_LIBS=""
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="linux-arm-elf"
        add_sources "linux" "arm"

        rm -f $TARGET_ADDASMS
        echo 'Converting GNU a.out cores to ELF'
        for file in $TARGET_ADDASMS ; do
          BASENAME=`basename $file`
          echo "  $file -> `basename $file -elf.s`.s"
          DIR=`echo $file | sed -e s/$BASENAME//`
          ( cd $DIR ; sed -e 's/_\([a-zA-Z0-9_]\{1,\}\)/\1/g' \
               < `basename $file -elf.s`.s > $BASENAME )
        done
        ;;

    *arm-netbsd)				# chrisb
        TARGET_CC="gcc"
        TARGET_AS="as"
        generate_gcc_opts "arm" "netbsd"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LIBS="-lm"
        TARGET_TARBALL="netbsd-arm32"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "netbsd" "arm"
	      ;;

    *arm-nto2)
        TARGET_AS="qcc -Vgcc_ntoarmle -c"
        TARGET_CC="qcc -Vgcc_ntoarmle"
        TARGET_STRIP="/usr/gcc/bin/ntoarmle-strip"
        TARGET_ASFLAGS="-DNO_BALIGN"
        TARGET_CCFLAGS="-lang-c++ -fomit-frame-pointer -fno-inline-functions \
                        -fno-exceptions -fno-rtti -DASM_ARM -DMULTITHREAD"
        TARGET_LIBS="-lsocket"
        TARGET_DOCFILES="docs/readme._ix"
        TARGET_TARBALL="nto2-arm"
        TARGET_GENMAN=
        TARGET_OS="NTO2"     # cross-compilation
        add_sources "nto2" "arm"
        ;;

    *vax-netbsd)
        TARGET_CC="g++"
        generate_gcc_opts "vax" "netbsd"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LIBS="-ltermcap"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        add_sources "netbsd" "vax" 
        ;;

    *s390-linux-pthread)	# [friedbait]  fb@baiti.net
        TARGET_AS="gcc -c"
        TARGET_CC="gcc"
        generate_gcc_opts "s390" "linux"
        TARGET_CCFLAGS="$OPTS_GCC -DMULTITHREAD"
        TARGET_LIBS="-lpthread"
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="linux-s390"
        add_sources "linux" "s390" 
        ;;

    *s390-linux)	        # [friedbait]  fb@baiti.net
        TARGET_AS="gcc -c"
        TARGET_CC="gcc"
        generate_gcc_opts "s390" "linux"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LIBS=""
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="linux-s390"
        add_sources "linux" "s390" 
        ;;

    *s390-linux-static)	        # [friedbait]  fb@baiti.net
        TARGET_AS="gcc -c"
        TARGET_CC="gcc"
        generate_gcc_opts "s390" "linux"
        TARGET_CCFLAGS="$OPTS_GCC"
        TARGET_LDFLAGS="-static"
        TARGET_LIBS=""
        TARGET_DOCFILES="docs/readme._ix"   #platform specific docfile
        TARGET_TARBALL="linux-s390-static"
        add_sources "linux" "s390" 
        ;;

    *s390-os390)                     # [friedbait]  fb@baiti.net
        TARGET_CC="gcc"
        TARGET_AS=""
        generate_gcc_opts "s390" "os390"
        TARGET_CCFLAGS="$OPTS_GCC -D_ALL_SOURCE" #-D__STRING_CODE_SET__="ISO8859-1"
        TARGET_ADDASMS=""
        TARGET_LIBS="$SOCKS_LIBS"
        TARGET_DOCFILES="docs/readme.os390"   #platform specific docfile
        TARGET_TARBALL="os390-s390"
        add_sources "os390" "s390" 
	      ;;

    *x86-beos)
        TARGET_AS="gcc -c"
        TARGET_CC="gcc"
        generate_gcc_opts "x86" "beos"
        TARGET_CCFLAGS="$OPTS_GCC -fno-pic -O3 -Wno-multichar -DMULTITHREAD"
        TARGET_LDFLAGS="-static"
        TARGET_TARBALL="beos-x86"
        TARGET_DOCFILES="docs/readme.beos"   #platform specific docfile
        add_sources "beos" "x86" 
	      ;;

    *ppc-beos)
        TARGET_AS="mwcc -c"
        TARGET_CC="mwcc"
        TARGET_CCFLAGS="$OPTS_MWCC_PPC604 -DMULTITHREAD"
        TARGET_STRIP="touch"
        TARGET_TARBALL="beos-ppc"
        TARGET_DOCFILES="docs/readme.beos"   #platform specific docfile
        add_sources "beos" "ppc" 
        ;;

####### OS/2 (x86, emx)

    *x86-os2)          # [patrick] <patrick@skarabeus.de>
        basename ()
        {
        export parm=$1
        ksh -c 'echo ${parm##*/}'
        }
        TARGET_AS="gcc -c"
        TARGET_CC="gcc"
        generate_gcc_opts "x86" "os2"
        TARGET_CCFLAGS="-Zmt -pipe $OPTS_GCC -fexceptions -pedantic -Wno-long-long -I. -I${C_INCLUDE_PATH}"
        TARGET_LDFLAGS="-Zmt"
        TARGET_NASM_FMT="aout"
        TARGET_STRIP="touch"
        TARGET_ARCTYPE="zipflat"
        TARGET_NASM="nasm097.exe"
        TARGET_LIBS="-lsocket -lvideo"
        TARGET_DOCFILES="docs/readme.os2"   #platform specific docfile
        TARGET_OS="OS2"
        TARGET_TARBALL="os2-x86"
        TARGET_BINNAME_SUFFIX=".exe"
        add_sources "os2" "x86"
        ;;

###### AmigaOS (m68k, PPC)
    *m68k-amigaos)              # [oliver] <oliver@futaura.co.uk>
        TARGET_AS="platforms/amiga/tools/genam_wrapper"
        TARGET_CC="g++ -V 2.95.2"
        generate_gcc_opts "68k" "amigaos"
        TARGET_CCFLAGS="$OPTS_GCC -m68000 -fpermissive -O6 -I./ -noixemul \
                        -D__AMIGADATE__=\`platforms/amiga/tools/amigadate\` \
                        -DDYN_TIMESLICE"
        TARGET_LDFLAGS="-noixemul"
        TARGET_ADDOBJS="/gg/lib/libnix/swapstack.o"
        TARGET_TARBALL="amigaos-68k"
        TARGET_DOCFILES="docs/readme.amiga"   #platform specific docfile
        TARGET_BINNAME_SUFFIX="_68k"
        TARGET_GENMAN=
        TARGET_ARCTYPE="lha"
        add_sources "amigaos" "68k"
	      ;;


    *ppc-amigaos-wos)           # [oliver] <oliver@futaura.co.uk>
        TARGET_AS="ppc-amigaos-gas"
        TARGET_CC="ppc-amigaos-g++ -V 2.95.2"
        TARGET_ASFLAGS="-m603"
        generate_gcc_opts "ppc603e" "amigaos"
        TARGET_CCFLAGS="$OPTS_GCC -O6 -mmultiple -mstring -I./ \
                        -D__AMIGADATE__=\`platforms/amiga/tools/amigadate\` \
                        -DDYN_TIMESLICE"
        TARGET_TARBALL="amigaos-ppc-wos"
        TARGET_DOCFILES="docs/readme.amiga"   #platform specific docfile
        TARGET_STRIP="platforms/amiga/tools/strip_wos"
        TARGET_BINNAME_SUFFIX="_ppc"
        TARGET_OS="AMIGAOS_PPC"
        TARGET_GENMAN=
        TARGET_ARCTYPE="lha"
        add_sources "amigaos" "ppc"
	      ;;

    *ppc-amigaos-pup)           # [oliver] <oliver@futaura.co.uk>
        TARGET_AS="ppc-amigaos-gas"
        TARGET_CC="ppc-amigaos-g++ -V 2.95.2" 
        TARGET_ASFLAGS="-m603"
        generate_gcc_opts "ppc603e" "amigaos"
        TARGET_CCFLAGS="$OPTS_GCC -pup -D__POWERUP__ -O6 -mmultiple -mstring \
                        -D__AMIGADATE__=\`platforms/amiga/tools/amigadate\` \
                        -I./ -DDYN_TIMESLICE"
        TARGET_LDFLAGS="-pup"
        TARGET_TARBALL="amigaos-ppc-pup"
        TARGET_DOCFILES="docs/readme.amiga"   #platform specific docfile
        TARGET_STRIP="platforms/amiga/tools/strip_pup"
        TARGET_BINNAME_SUFFIX="_ppc"
        TARGET_OS="AMIGAOS_PPC"
        TARGET_GENMAN=
        TARGET_ARCTYPE="lha"
        add_sources "amigaos" "ppc"
        ;;


###### Unknown
    *list)
	egrep "^[ ]*\*" $0 | grep -v internal | more
	echo ""
	exit 1
	;;
    *)
	echo "Unknown target platform \"$1\" specified."
	echo "Run with 'list' as an argument to see available platforms."
	echo ""
	exit 1
esac
echo "Platform target for \"$1\" recognized."


#
# Build the test program
#
if [ "${TARGET_OS}" = "NTO2" -o "${TARGET_OS}" = "OS2" \
  -o "${TARGET_OS}" = "RISCOS" ]; then  #cross-compile
  gcc common/testplat.cpp -o testplat
else  
  echo "Building test program..."
  echo "${TARGET_CC} ${TARGET_CCFLAGS} common/testplat.cpp ${TARGET_LDFLAGS} ${TARGET_LIBS} -o testplat"
  ${SHELL} -c "${TARGET_CC} ${TARGET_CCFLAGS} common/testplat.cpp ${TARGET_LDFLAGS} ${TARGET_LIBS} -o testplat"
  if [ $? -ne 0 ]; then
    echo "Compilation failed.  Check your target options."
    echo " ---------------------------------------------"
    echo "${TARGET_CC} ${TARGET_CCFLAGS} common/testplat.cpp ${TARGET_LDFLAGS} ${TARGET_LIBS} -o testplat"
    echo " ---------------------------------------------"
    exit 1
  fi
  if [ "$TARGET_OS" = "OS2" ]; then
     emxbind testplat
  else
     ${TARGET_STRIP} testplat
  fi
fi

#
# Finalize the NASM compilation options.
#
if [ -z "$TARGET_NASM_FMT" ]; then
  TARGET_NASM_FMT="elf"
fi
TARGET_NASMFLAGS="-f $TARGET_NASM_FMT \
                  -i rc5/x86/nasm/ -i des/mmx-bitslice/ -i csc/x86/"
if [ "$TARGET_NASM_FMT" = "elf" ]; then
  TARGET_NASMFLAGS="$TARGET_NASMFLAGS -d__ELF__"
else
  TARGET_NASMFLAGS="$TARGET_NASMFLAGS -d__AOUT__" #for both aout and aoutb
fi


#
# Finalize the LD that will be used.
#
if [ -z "${TARGET_LD}" ]; then
  TARGET_LD="${TARGET_CC}"
fi


#
# Generate full doc file list.
#
if [ -f docs/readme.1st ]; then
  TARGET_DOCFILES="docs/readme.1st ${TARGET_DOCFILES}"
fi
TARGET_DOCFILES="${TARGET_DOCFILES} docs/CHANGES.txt docs/${TARGET_BINNAME}.txt"
if [ -n "$TARGET_GENMAN" ]; then
  TARGET_DOCFILES="${TARGET_DOCFILES} ${TARGET_BINNAME}.1"
fi


#
# Generate the list of output objects
#

TARGET_ALLOBJS=""        # obj, obj, obj, obj, ...
TARGET_SRCOBJLIST="none" # type1, src, obj, src, obj, ... type2, src, obj ... 
                         # the "none" in there initially is a dummy to squelch
		         # leading space (and serve as a reset indicator)

#note that the order is common ... asm ... additional,
#and since speed sensitive common files are last in 'common'
#common-fast,asm,additional are all close together

if [ -n "${COMMON_SRCS}" ]; then
  echo "Scanning common C/C++ dependencies..."
  TARGET_SRCOBJLIST="${TARGET_SRCOBJLIST} cc"
  for target in ${COMMON_SRCS}; do
      TARGETOBJECT=`basename $target .c`
      TARGETOBJECT=output/`basename $TARGETOBJECT .cpp`.o
      echo "  ${target} -> ${TARGETOBJECT}"
      TARGET_ALLOBJS="${TARGET_ALLOBJS} ${TARGETOBJECT}"
      TARGET_SRCOBJLIST="${TARGET_SRCOBJLIST} $target ${TARGETOBJECT}"
  done
fi
if [ -n "${TARGET_ADDASMS}" ]; then
  echo "Scanning output AS dependencies..."
  TARGET_SRCOBJLIST="${TARGET_SRCOBJLIST} as"
  for target in ${TARGET_ADDASMS}; do
      TARGETOBJECT=`basename $target .s`
      TARGETOBJECT=output/`basename $TARGETOBJECT .S`.o
      echo "  $target -> $TARGETOBJECT"
      TARGET_ALLOBJS="${TARGET_ALLOBJS} ${TARGETOBJECT}"
      TARGET_SRCOBJLIST="${TARGET_SRCOBJLIST} $target ${TARGETOBJECT}"
  done
fi
if [ -n "${TARGET_ADDNASMS}" ]; then
  echo "Scanning output NASM dependencies..."
  TARGET_SRCOBJLIST="${TARGET_SRCOBJLIST} nasm"
  for target in ${TARGET_ADDNASMS}; do
      TARGETOBJECT=`basename $target .asm`
      TARGETOBJECT=output/`basename $target .asm`.o
      echo "  $target -> $TARGETOBJECT"
      TARGET_ALLOBJS="${TARGET_ALLOBJS} ${TARGETOBJECT}"
      TARGET_SRCOBJLIST="${TARGET_SRCOBJLIST} $target ${TARGETOBJECT}"
  done
fi
if [ -n "${TARGET_ADDSRCS}" ]; then
  echo "Scanning additional C/C++ dependencies..."
  TARGET_SRCOBJLIST="${TARGET_SRCOBJLIST} cc"
  for target in ${TARGET_ADDSRCS}; do
      TARGETOBJECT=`basename $target .c`
      TARGETOBJECT=output/`basename $TARGETOBJECT .cpp`.o
      echo "  ${target} -> ${TARGETOBJECT}"
      TARGET_ALLOBJS="${TARGET_ALLOBJS} ${TARGETOBJECT}"
      TARGET_SRCOBJLIST="${TARGET_SRCOBJLIST} $target ${TARGETOBJECT}"
  done
fi

#
# Generate the targets for supplementary resource files.
#
TARGET_RESBIND_CMD=""
if [ "$TARGET_OS" = "OS2" ]; then
  TARGET_RESBIND_CMD="emxbind -b -r platforms/os2cli/rc5des.res \${BUILDNAME}"
fi

#
# Start building the output makefile.
#
echo "Generating output Makefile prologue code..."
rm -f Makefile

echo "# Autogenerated $TARGET_BINNAME client makefile ($1)" > Makefile
echo "# see http://www.distributed.net/ for details." >> Makefile
echo "" >> Makefile

echo "CC = ${TARGET_CC}" >> Makefile
echo "CP = ${TARGET_CP}" >> Makefile
echo "HPATHS = -I./common -I./rc5 -I./des -I./ogr -I./csc" >> Makefile
echo "CCFLAGS = ${TARGET_CCFLAGS} \${HPATHS}" >> Makefile
if [ "${BUILDNAME}" = "aix-all" ]; then
  echo "PPC601FLAGS = ${AIXPPC601FLAGS} \${HPATHS}" >> Makefile
  echo "PPC604FLAGS = ${AIXPPC604FLAGS} \${HPATHS}" >> Makefile
  echo "POWERFLAGS = ${AIXPOWERFLAGS} \${HPATHS}" >> Makefile
fi
echo "LD = ${TARGET_LD}" >> Makefile
echo "LDFLAGS = ${TARGET_LDFLAGS}" >> Makefile
echo "LIBS = ${TARGET_LIBS}" >> Makefile
echo "AS = ${TARGET_AS}" >> Makefile
echo "ASFLAGS = ${TARGET_ASFLAGS}" >> Makefile
echo "NASM = ${TARGET_NASM}" >> Makefile
echo "NASMFLAGS = ${TARGET_NASMFLAGS}" >> Makefile
echo "STRIP = ${TARGET_STRIP}" >> Makefile
echo "ALLOBJS = ${TARGET_ALLOBJS}" >> Makefile
echo "ADDOBJS = ${TARGET_ADDOBJS}" >> Makefile
echo "BUILDNAME = $1" >> Makefile
echo "DOCFILES = ${TARGET_DOCFILES}" >>Makefile
if [ "$TARGET_OS" = "OS2" ]; then
  echo "BUILDNUM:=\$(shell grep \" CLIENT_BUILD_FRAC \" common/version.h|tr -dc 0-9)" >>Makefile
else
  echo "BUILDNUM:= \`grep \" CLIENT_BUILD_FRAC \" common/version.h|tr -dc 0-9\`" >>Makefile
fi
echo "" >> Makefile


#
# Generate the main production targets in the makefile
#
echo "Generating Makefile production targets..."
echo "# Regular targets follow" >> Makefile

#
# Generate the main client binary target.
#
echo "${TARGET_BINNAME}${TARGET_BINNAME_SUFFIX}:	\${ALLOBJS} \${ADDOBJS}" >> Makefile
echo "	\${LD} \${LDFLAGS} \${ALLOBJS} \${ADDOBJS} \${LIBS} -o ${TARGET_BINNAME}${TARGET_BINNAME_SUFFIX}" >> Makefile
if [ -n "$TARGET_RESBIND_CMD" ]; then
  echo "	$TARGET_RESBIND_CMD" >> Makefile
fi
echo "	\${STRIP} ${TARGET_BINNAME}${TARGET_BINNAME_SUFFIX}" >> Makefile
if [ -n "$TARGET_GENMAN" ]; then
  echo "	./${TARGET_BINNAME}${TARGET_BINNAME_SUFFIX} -genman" >> Makefile
fi
if [ -n "$TARGET_TARBALL" ]; then
  FULLTARNAME="${TARGET_BINNAME}\${BUILDNUM}-${TARGET_TARBALL}"
  if [ "$TARGET_ARCTYPE" = "zip" ]; then
    echo "	zip -9 $FULLTARNAME.zip ${TARGET_BINNAME}${TARGET_BINNAME_SUFFIX} \${DOCFILES}" >> Makefile
  elif [ "$TARGET_ARCTYPE" = "zipflat" ]; then  
    # zip file with flat directory structure.
    echo "	zip -9 -j $FULLTARNAME.zip ${TARGET_BINNAME}${TARGET_BINNAME_SUFFIX} \${DOCFILES}" >> Makefile    
  elif [ "$TARGET_ARCTYPE" = "tgz" ]; then
    # tar.gz, with base+doc directory structure.
    echo "	tar -cvf - ${TARGET_BINNAME} \${DOCFILES} | gzip -9 > $FULLTARNAME.tar.gz" >> Makefile
  elif [ "$TARGET_ARCTYPE" = "tgzdir" ]; then
    # tar.gz, with buildname(base+doc) directory structure.
    echo "	-rm -rf $FULLTARNAME" >> Makefile
    echo "	mkdir $FULLTARNAME" >> Makefile
    echo "	cp ${TARGET_BINNAME} \${DOCFILES} $FULLTARNAME" >> Makefile
    echo "	tar -cvf - $FULLTARNAME | gzip -9 > $FULLTARNAME.tar.gz" >> Makefile
    echo "	rm -rf $FULLTARNAME" >> Makefile
  elif [ "$TARGET_ARCTYPE" = "lha" ]; then
    echo "	rm -f $FULLTARNAME.lha" >> Makefile
    echo "	lha a $FULLTARNAME.lha ${TARGET_BINNAME}${TARGET_BINNAME_SUFFIX} \${DOCFILES}" >> Makefile
  else
    echo "Warning: Unknown TARGET_ARCTYPE ${TARGET_ARCTYPE}"
  fi
  echo "" >> Makefile
fi

#
# Create the rule to ftp the packaged tarball.
#
if [ -n "$TARGET_TARBALL" ]; then
  echo "ftp:" >> Makefile
  if [ -n "$TARGET_TARBALL_COMMENT" ]; then
    echo "	echo \"${TARGET_TARBALL_COMMENT}\">${TARGET_BINNAME}\${BUILDNUM}-${TARGET_TARBALL}.comment" >>Makefile
  fi
  echo "	\$(SHELL) ./upload.sh ${TARGET_BINNAME}\${BUILDNUM}-${TARGET_TARBALL}" >>Makefile
  if [ -n "$TARGET_TARBALL_COMMENT" ]; then
    echo "	rm -f ${TARGET_BINNAME}\${BUILDNUM}-${TARGET_TARBALL}.comment" >>Makefile
  fi
  echo "" >> Makefile
fi

#
# Create the dependencies and reconfigure rules.
#
echo "dep: $0" >> Makefile
echo "	\$(SHELL) $0 \${BUILDNAME}" >> Makefile
echo "" >> Makefile
echo "reconfigure: dep" >> Makefile
echo "" >> Makefile


#
#  Clean, Superclean, Distclean, and Ident targets.
#
echo "clean:" >> Makefile
echo "	rm -f \${ALLOBJS}" >> Makefile
echo "	rm -f ${TARGET_BINNAME}${TARGET_BINNAME_SUFFIX}" >> Makefile
if [ -n "$TARGET_GENMAN" ]; then
  echo "	rm -f ${TARGET_BINNAME}.1" >> Makefile
fi
if [ -n "$TARGET_TARBALL" ]; then
  echo "	rm -f ${TARGET_BINNAME}???-${TARGET_TARBALL}.*" >> Makefile
fi
echo "" >> Makefile

echo "superclean: clean" >> Makefile
echo "	rm -f Makefile buff-in.* buff-out.* *.ini testplat" >> Makefile
echo "	find . -name '*~' -exec rm {} \\;" >> Makefile
echo "" >> Makefile

echo "distclean: superclean $0" >> Makefile
echo "	find . -name '.#*' -exec rm {} \\;" >> Makefile
echo "	rm -f \`egrep \"^[ ]*\\*\" $0 | sed -e 's/\(^.*\*\)\(.*\)\().*\$\$\)/\2/'\`" >> Makefile
echo "" >> Makefile

echo "ident:	${TARGET_BINNAME}${TARGET_BINNAME_SUFFIX}" >> Makefile
echo "	ident ${TARGET_BINNAME}${TARGET_BINNAME_SUFFIX} | awk '{ printf(\"%-30s %10s %s %s %s %s%c\", \$\$2,\$\$3,\$\$4,\$\$5,\$\$6,\$\$7,10)}'" >> Makefile
echo "" >> Makefile

#
# Generate the dependency targets in the makefile
#

if [ -n "${TARGET_SRCOBJLIST}" ]; then
  echo "Generating Makefile dependency targets..."
  #
  # _SRCOBJLIST goes ... type1, src, obj, src, obj, ... type2, src, obj ...
  # the 'types' are defined where _SRCOBJLIST is added to
  #
  echo "# Dependency targets follow" >> Makefile
  TARGETTYP=""
  TARGETSRC=""
  for target in $TARGET_SRCOBJLIST; do
    if [ "${target}X" = "X" ]; then # shouldn't happen
      target=$target
    # ------------------------------------  
    elif [ "${target}" = "none" ]; then  
      TARGETTYP="$target"
    elif [ "${target}" = "cc" ]; then
      TARGETTYP="$target"
    elif [ "${target}" = "as" ]; then
      TARGETTYP="$target"
    elif [ "${target}" = "nasm" ]; then  
      TARGETTYP="$target"
    # ------------------------------------  
    elif [ "${TARGETSRC}X" = "X" ]; then
      TARGETSRC="$target"
    # ------------------------------------  
    elif [ "${TARGETTYP}" = "cc" -o "${TARGETTYP}" = "cc-decunix" ]; then
      TARGET_HDEPS=`./testplat build_dependancies ${TARGETSRC}`
      has_problem_h=0
      has_client_h=0
      has_ogr_h=0
      has_ccoreio_h=0
      has_lurk_h=0
      deplist=""
      for dep in $TARGET_HDEPS; do
        if [ $dep = "ogr/ogr.h" ]; then
          dep="ogr/ansi/ogr.h"
          has_ogr_h=1
        elif [ $dep = "common/ccoreio.h" ]; then  
          has_ccoreio_h=1
        elif [ $dep = "common/problem.h" ]; then  
          has_problem_h=1
        elif [ $dep = "common/client.h" ]; then  
          has_client_h=1
        elif [ $dep = "common/lurk.h" ]; then  
          has_lurk_h=1
        fi
        deplist="$deplist $dep"  
      done
      if [ $has_client_h -eq 1 ]; then
        if [ $has_lurk_h -eq 0 ]; then  
          deplist="$deplist common/lurk.h"
        fi  
        if [ $has_problem_h -eq 0 ]; then
          deplist="$deplist common/problem.h"
          has_problem_h=1
        fi
      fi    
      if [ $has_problem_h -eq 1 ]; then
        if [ $has_ccoreio_h -eq 0 ]; then
          deplist="$deplist common/ccoreio.h"
        fi  
        if [ $has_ogr_h -eq 0 ]; then
          deplist="$deplist ogr/ansi/ogr.h"
        fi
      fi    
      #----------------
      CCFLAGS_SELECT="\${CCFLAGS}"
      if [ "$TARGET_OS" = "DIGITAL_UNIX" ]; then
        if [ "$target" = "output/rc5-digital-unix-alpha-ev5.o" ]; then
          CCFLAGS_SELECT="-mcpu=ev5 ${CCFLAGS_SELECT}"
        else
          CCFLAGS_SELECT="-mcpu=ev4 ${CCFLAGS_SELECT}"
        fi  
      elif [ "$TARGET_OS" = "AMIGAOS_PPC" -o "$BUILDNAME" = "ppc-linux" ]; then
        # get around gcc2.8/gcc2.9/egcs bugs
        if [ "$target" = "output/problem.o" \
          -o "$target" = "output/rc5_unit_func_lintilla.o" \
          -o "$target" = "output/rc5_unit_func_lintilla-604.o" \
          -o "$target" = "output/rc5_unit_func_allitnil.o" ]; then
          CCFLAGS_SELECT="${CCFLAGS_SELECT} -O0"
        fi
      elif [ "${BUILDNAME}" = "aix-all" ]; then
        if [ "$target" = "output/rc5ansi_2-rg.o" ]; then
          CCFLAGS_SELECT="\${POWERFLAGS}"
        elif [ "$target" != "${target%%allitnil*}" ]; then
          CCFLAGS_SELECT="\${PPC601FLAGS}"
        elif [ "$target" != "${target%%lintilla*}" ]; then
          CCFLAGS_SELECT="\${PPC604FLAGS}"
        fi
        if [ "$target" = "output/ogr.o" ]; then
          # default is to compile for a POWERPC based CPU, 
	  # we have to add POWER here 
	  echo "output/ogr_power.o:    ${TARGETSRC} ${deplist}" >> Makefile
          echo "	\${CC} -c \${POWERFLAGS} -D_AIXALL ${TARGETSRC} -o output/ogr_power.o" >> Makefile
	  echo "" >> Makefile
	  CCFLAGS_SELECT="\${PPC601FLAGS}"
        fi
      fi    
      echo "$target:	${TARGETSRC} ${deplist}" >> Makefile
      echo "	\${CC} -c ${CCFLAGS_SELECT} ${TARGETSRC} -o $target" >> Makefile
      echo "" >> Makefile
      TARGETSRC=""
    # ------------------------------------  
    elif [ "${TARGETTYP}" = "as" ]; then
      echo "$target:	${TARGETSRC}" >> Makefile
      echo "	\${AS} \${ASFLAGS} ${TARGETSRC} -o $target" >> Makefile
      echo "" >> Makefile
      TARGETSRC=""
    # ------------------------------------  
    elif [ "${TARGETTYP}" = "nasm" ]; then
      echo "$target:	${TARGETSRC}" >> Makefile
      echo "	\${NASM} \${NASMFLAGS} ${TARGETSRC} -o $target" >> Makefile
      echo "" >> Makefile
      TARGETSRC=""
    # ------------------------------------  
    else
      echo "Unknown target type ${TARGETTYP}"
      exit 1
    fi
  done
fi        
      
if [ "$TARGET_OGR_MULTI" = "68k" ]; then
  echo "Generating Makefile 68k multi-core OGR dependency targets..."
  TARGETSRC="ogr/ansi/ogr.cpp"
  TARGET_HDEPS=`./testplat build_dependancies ${TARGETSRC}`
  OGR68K="000 020 030 040 060"
  for targetext in ${OGR68K}; do
    echo "output/ogr${targetext}.o:	${TARGETSRC} ${TARGET_HDEPS}" >> Makefile
    echo "	\$(CC) \$(CCFLAGS) -m68${targetext} -c -o output/ogr${targetext}.o ogr/ansi/ogr.cpp \\" >> Makefile
    echo "	-DOGR_GET_DISPATCH_TABLE_FXN=ogr_get_dispatch_table_${targetext}" >> Makefile
    echo "" >> Makefile
  done
fi

if [ "$TARGET_OS" = "OS2" ]; then
  echo "Generating rules for .res and .rc"
  echo "output/${TARGET_BINNAME}.rc:" >>Makefile
  echo "	platforms/os2cli/attachico.cmd">>Makefile
  echo "" >> Makefile
fi


#
# Print out successful result and exit without error.
#
echo "Makefile auto-generation complete!"
if [ -z "$TARGET_TARBALL" ]; then
  echo "TARGET_TARBALL was not defined."
  echo "Upload-ready tarballs will not be auto-generated"
  echo "and Makefile does not have an 'ftp' target"
fi
rm -f testplat
echo ""
exit 0




/*
 * For use in distributed.net projects only.
 * Any other distribution or use of this source violates copyright.
 *
 * This file (ogr_o_c.cor) contains the core for OGROPT_ALTERNATE_CYCLE == 1/2.
 * It was created by Dan Oetting and Chris Cox from the distributed.net version
 * of GARSP 5.13 to 
 * - use the processor cache better when many registers are available
 * - support altivec
 */
#define __OGR_CORE__ "@(#)$Id: ogr_o_c.cor,v 1.1.2.8 2001/03/19 16:51:09 andreasb Exp $"

#if ( (OGROPT_ALTERNATE_CYCLE == 1) || (OGROPT_ALTERNATE_CYCLE == 2))

const char* ogr_name()
{
  #if (OGROPT_ALTERNATE_CYCLE == 1)
  return "DO/CC";
  #elif (OGROPT_ALTERNATE_CYCLE == 2)
  return "DO/CC Vector";
  #endif
}


/***********************************************************************************
 * The following macros define the BITLIST CLASS
 * The variables defined here should only be manipulated within these class macros.
 ***********************************************************************************/

#if (OGROPT_ALTERNATE_CYCLE == 2) /* support macros for the vectorized ogr_cycle() routine */

 /* define the local variables used for the top recursion state */
#define SETUP_TOP_STATE(state,lev)                                  \
   vector unsigned int  compV0;                                     \
   vector unsigned int  compV1;                                     \
   vector unsigned int  listV0;                                     \
   vector unsigned int  listV1;                                     \
   vector unsigned int  distV0;                                     \
   vector unsigned int  distV1;                                     \
   int cnt2 = lev->cnt2;                                            \
   vector unsigned int ZEROBIT = (vector unsigned int)(0, 0, 1, 0); \
   vector unsigned int ZEROS = (vector unsigned int)(0);            \
   vector unsigned int ONES = vec_nor(ZEROS,ZEROS);                 \
   int limit;                                                       \
   union {                                                          \
      vector unsigned int V;                                        \
      unsigned int U[4];                                            \
   } VU;                                                            \
   compV0 = lev->compV0;                                            \
   compV1 = lev->compV1;                                            \
   listV0 = vec_or(lev->listV0, ZEROBIT);                           \
   listV1 = lev->listV1;                                            \
   distV0 = state->distV0;                                          \
   distV1 = state->distV1;

#define VEC_TO_INT(v,n) (VU.V = (v), VU.U[n])

/* shift the list to add or extend the first mark */
#define COMP_LEFT_LIST_RIGHT(lev, s)                                \
   VU.U[3] = s;                                                     \
   vector unsigned int Vs = vec_splat(VU.V,3);                      \
   vector unsigned int Vm = vec_sl(ONES,Vs);                        \
   vector unsigned int Vss = vec_sub(ZEROS,Vs);                     \
   compV0 = vec_rl(compV0,Vs);                                      \
   compV1 = vec_rl(compV1,Vs);                                      \
   compV0 = vec_sel(vec_sld(compV0,compV1,4),compV0,Vm);            \
   compV1 = vec_sel(vec_sld(compV1,ZEROS,4),compV1,Vm);             \
   listV1 = vec_sel(vec_sld(listV0,listV1,12),listV1,Vm);           \
   listV0 = vec_sel(vec_sld(ZEROS,listV0,12),listV0,Vm);            \
   listV1 = vec_rl(listV1,Vss);                                     \
   listV0 = vec_rl(listV0,Vss);

/* shift by word size */
#define COMP_LEFT_LIST_RIGHT_32(lev)                                \
   compV0 = vec_sld(compV0, compV1, 4);                             \
   compV1 = vec_sld(compV1, ZEROS, 4);                              \
   listV1 = vec_sld(listV0, listV1, 12);                            \
   listV0 = vec_sld(ZEROS, listV0, 12);

/* set the current mark and push a level to start a new mark */
#define PUSH_LEVEL_UPDATE_STATE(lev)                                \
   lev->listV0 = listV0;                                            \
   lev->listV1 = listV1;                                            \
   listV0 = vec_or(listV0, ZEROBIT);                                \
   distV0 = vec_or(distV0, listV0);                                 \
   distV1 = vec_or(distV1, listV1);                                 \
   lev->compV0 = compV0;                                            \
   lev->compV1 = compV1;                                            \
   compV0 = vec_or(compV0, distV0);                                 \
   compV1 = vec_or(compV1, distV1);                                 \
   lev->cnt2 = cnt2;                                                \
   lev->limit = limit;

/* pop a level to continue work on previous mark */
#define POP_LEVEL(lev)                                              \
   listV0 = lev->listV0;                                            \
   listV1 = lev->listV1;                                            \
   distV0 = vec_andc(distV0, listV0);                               \
   distV1 = vec_andc(distV1, listV1);                               \
   compV0 = lev->compV0;                                            \
   compV1 = lev->compV1;                                            \
   limit = lev->limit;                                              \
   cnt2 = lev->cnt2;

/* save the local state variables */
#define SAVE_FINAL_STATE(state,lev)                                 \
   lev->listV0 = listV0;                                            \
   lev->listV1 = listV1;                                            \
   state->distV0 = distV0;                                          \
   state->distV1 = distV1;                                          \
   lev->compV0 = compV0;                                            \
   lev->compV1 = compV1;                                            \
   lev->cnt2 = cnt2;

#elif (OGROPT_ALTERNATE_CYCLE == 1) /* support macros for the alternate ogr_cycle() routine */

#define SETUP_TOP_STATE(state,lev)                 \
   U  comp0 = lev->comp[0], comp1 = lev->comp[1], comp2 = lev->comp[2], comp3 = lev->comp[3], comp4 = lev->comp[4]; \
   U  list0 = lev->list[0], list1 = lev->list[1], list2 = lev->list[2], list3 = lev->list[3], list4 = lev->list[4]; \
   U  dist0 = state->dist[0], dist1 = state->dist[1], dist2 = state->dist[2], dist3 = state->dist[3], dist4 = state->dist[4]; \
   int cnt2 = lev->cnt2;                           \
   int newbit = 1;                                 \
   int limit;

/* shift the list to add or extend the first mark */
#if (OGROPT_ALTERNATE_COMP_LEFT_LIST_RIGHT == 2)

  #if defined(ASM_PPC) || defined(__PPC__) || defined(__POWERPC__) || \
      defined(ASM_POWER)
  #if defined(__GNUC__)
     #define __rlwinm(Rs,SH,MB,ME) \
     ({ int Ra; __asm__ ("rlwinm %0,%1,%2,%3,%4" : "=r" (Ra) : "r" (Rs), "n" (SH), "n" (MB), "n" (ME)); Ra; })
     #define __rlwimi(Ra,Rs,SH,MB,ME) \
     ({ __asm__ ("rlwimi %0,%2,%3,%4,%5" : "=r" (Ra) : "0" (Ra), "r" (Rs), "n" (SH), "n" (MB), "n" (ME)); Ra; })
  #endif /* __GNUC__ */
  #define COMP_LEFT_LIST_RIGHT(lev, s)             \
  {                                                \
    switch (s)                                     \
    {                                              \
      case 0:                                      \
         break;                                    \
      case 1:                                      \
         comp0 = __rlwinm(comp0,1,0,30);           \
         list4 = __rlwinm(list4,31,1,31);          \
         comp0 = __rlwimi(comp0,comp1,1,31,31);    \
         list4 = __rlwimi(list4,list3,31,0,0);     \
         comp1 = __rlwinm(comp1,1,0,30);           \
         list3 = __rlwinm(list3,31,1,31);          \
         comp1 = __rlwimi(comp1,comp2,1,31,31);    \
         list3 = __rlwimi(list3,list2,31,0,0);     \
         comp2 = __rlwinm(comp2,1,0,30);           \
         list2 = __rlwinm(list2,31,1,31);          \
         comp2 = __rlwimi(comp2,comp3,1,31,31);    \
         list2 = __rlwimi(list2,list1,31,0,0);     \
         comp3 = __rlwinm(comp3,1,0,30);           \
         list1 = __rlwinm(list1,31,1,31);          \
         comp3 = __rlwimi(comp3,comp4,1,31,31);    \
         list1 = __rlwimi(list1,list0,31,0,0);     \
         comp4 = __rlwinm(comp4,1,0,30);           \
         list0 = __rlwinm(list0,31,1,31);          \
         list0 = __rlwimi(list0,newbit,31,0,0);    \
         break;                                    \
      case 2:                                      \
         comp0 = __rlwinm(comp0,2,0,29);           \
         list4 = __rlwinm(list4,30,2,31);          \
         comp0 = __rlwimi(comp0,comp1,2,30,31);    \
         list4 = __rlwimi(list4,list3,30,0,1);     \
         comp1 = __rlwinm(comp1,2,0,29);           \
         list3 = __rlwinm(list3,30,2,31);          \
         comp1 = __rlwimi(comp1,comp2,2,30,31);    \
         list3 = __rlwimi(list3,list2,30,0,1);     \
         comp2 = __rlwinm(comp2,2,0,29);           \
         list2 = __rlwinm(list2,30,2,31);          \
         comp2 = __rlwimi(comp2,comp3,2,30,31);    \
         list2 = __rlwimi(list2,list1,30,0,1);     \
         comp3 = __rlwinm(comp3,2,0,29);           \
         list1 = __rlwinm(list1,30,2,31);          \
         comp3 = __rlwimi(comp3,comp4,2,30,31);    \
         list1 = __rlwimi(list1,list0,30,0,1);     \
         comp4 = __rlwinm(comp4,2,0,29);           \
         list0 = __rlwinm(list0,30,2,31);          \
         list0 = __rlwimi(list0,newbit,30,0,1);    \
         break;                                    \
      case 3:                                      \
         comp0 = __rlwinm(comp0,3,0,28);           \
         list4 = __rlwinm(list4,29,3,31);          \
         comp0 = __rlwimi(comp0,comp1,3,29,31);    \
         list4 = __rlwimi(list4,list3,29,0,2);     \
         comp1 = __rlwinm(comp1,3,0,28);           \
         list3 = __rlwinm(list3,29,3,31);          \
         comp1 = __rlwimi(comp1,comp2,3,29,31);    \
         list3 = __rlwimi(list3,list2,29,0,2);     \
         comp2 = __rlwinm(comp2,3,0,28);           \
         list2 = __rlwinm(list2,29,3,31);          \
         comp2 = __rlwimi(comp2,comp3,3,29,31);    \
         list2 = __rlwimi(list2,list1,29,0,2);     \
         comp3 = __rlwinm(comp3,3,0,28);           \
         list1 = __rlwinm(list1,29,3,31);          \
         comp3 = __rlwimi(comp3,comp4,3,29,31);    \
         list1 = __rlwimi(list1,list0,29,0,2);     \
         comp4 = __rlwinm(comp4,3,0,28);           \
         list0 = __rlwinm(list0,29,3,31);          \
         list0 = __rlwimi(list0,newbit,29,0,2);    \
         break;                                    \
      case 4:                                      \
         comp0 = __rlwinm(comp0,4,0,27);           \
         list4 = __rlwinm(list4,28,4,31);          \
         comp0 = __rlwimi(comp0,comp1,4,28,31);    \
         list4 = __rlwimi(list4,list3,28,0,3);     \
         comp1 = __rlwinm(comp1,4,0,27);           \
         list3 = __rlwinm(list3,28,4,31);          \
         comp1 = __rlwimi(comp1,comp2,4,28,31);    \
         list3 = __rlwimi(list3,list2,28,0,3);     \
         comp2 = __rlwinm(comp2,4,0,27);           \
         list2 = __rlwinm(list2,28,4,31);          \
         comp2 = __rlwimi(comp2,comp3,4,28,31);    \
         list2 = __rlwimi(list2,list1,28,0,3);     \
         comp3 = __rlwinm(comp3,4,0,27);           \
         list1 = __rlwinm(list1,28,4,31);          \
         comp3 = __rlwimi(comp3,comp4,4,28,31);    \
         list1 = __rlwimi(list1,list0,28,0,3);     \
         comp4 = __rlwinm(comp4,4,0,27);           \
         list0 = __rlwinm(list0,28,4,31);          \
         list0 = __rlwimi(list0,newbit,28,0,3);    \
         break;                                    \
      case 5:                                      \
         comp0 = __rlwinm(comp0,5,0,26);           \
         list4 = __rlwinm(list4,27,5,31);          \
         comp0 = __rlwimi(comp0,comp1,5,27,31);    \
         list4 = __rlwimi(list4,list3,27,0,4);     \
         comp1 = __rlwinm(comp1,5,0,26);           \
         list3 = __rlwinm(list3,27,5,31);          \
         comp1 = __rlwimi(comp1,comp2,5,27,31);    \
         list3 = __rlwimi(list3,list2,27,0,4);     \
         comp2 = __rlwinm(comp2,5,0,26);           \
         list2 = __rlwinm(list2,27,5,31);          \
         comp2 = __rlwimi(comp2,comp3,5,27,31);    \
         list2 = __rlwimi(list2,list1,27,0,4);     \
         comp3 = __rlwinm(comp3,5,0,26);           \
         list1 = __rlwinm(list1,27,5,31);          \
         comp3 = __rlwimi(comp3,comp4,5,27,31);    \
         list1 = __rlwimi(list1,list0,27,0,4);     \
         comp4 = __rlwinm(comp4,5,0,26);           \
         list0 = __rlwinm(list0,27,5,31);          \
         list0 = __rlwimi(list0,newbit,27,0,4);    \
         break;                                    \
      case 6:                                      \
         comp0 = __rlwinm(comp0,6,0,25);           \
         list4 = __rlwinm(list4,26,6,31);          \
         comp0 = __rlwimi(comp0,comp1,6,26,31);    \
         list4 = __rlwimi(list4,list3,26,0,5);     \
         comp1 = __rlwinm(comp1,6,0,25);           \
         list3 = __rlwinm(list3,26,6,31);          \
         comp1 = __rlwimi(comp1,comp2,6,26,31);    \
         list3 = __rlwimi(list3,list2,26,0,5);     \
         comp2 = __rlwinm(comp2,6,0,25);           \
         list2 = __rlwinm(list2,26,6,31);          \
         comp2 = __rlwimi(comp2,comp3,6,26,31);    \
         list2 = __rlwimi(list2,list1,26,0,5);     \
         comp3 = __rlwinm(comp3,6,0,25);           \
         list1 = __rlwinm(list1,26,6,31);          \
         comp3 = __rlwimi(comp3,comp4,6,26,31);    \
         list1 = __rlwimi(list1,list0,26,0,5);     \
         comp4 = __rlwinm(comp4,6,0,25);           \
         list0 = __rlwinm(list0,26,6,31);          \
         list0 = __rlwimi(list0,newbit,26,0,5);    \
         break;                                    \
      case 7:                                      \
         comp0 = __rlwinm(comp0,7,0,24);           \
         list4 = __rlwinm(list4,25,7,31);          \
         comp0 = __rlwimi(comp0,comp1,7,25,31);    \
         list4 = __rlwimi(list4,list3,25,0,6);     \
         comp1 = __rlwinm(comp1,7,0,24);           \
         list3 = __rlwinm(list3,25,7,31);          \
         comp1 = __rlwimi(comp1,comp2,7,25,31);    \
         list3 = __rlwimi(list3,list2,25,0,6);     \
         comp2 = __rlwinm(comp2,7,0,24);           \
         list2 = __rlwinm(list2,25,7,31);          \
         comp2 = __rlwimi(comp2,comp3,7,25,31);    \
         list2 = __rlwimi(list2,list1,25,0,6);     \
         comp3 = __rlwinm(comp3,7,0,24);           \
         list1 = __rlwinm(list1,25,7,31);          \
         comp3 = __rlwimi(comp3,comp4,7,25,31);    \
         list1 = __rlwimi(list1,list0,25,0,6);     \
         comp4 = __rlwinm(comp4,7,0,24);           \
         list0 = __rlwinm(list0,25,7,31);          \
         list0 = __rlwimi(list0,newbit,25,0,6);    \
         break;                                    \
      case 8:                                      \
         comp0 = __rlwinm(comp0,8,0,23);           \
         list4 = __rlwinm(list4,24,8,31);          \
         comp0 = __rlwimi(comp0,comp1,8,24,31);    \
         list4 = __rlwimi(list4,list3,24,0,7);     \
         comp1 = __rlwinm(comp1,8,0,23);           \
         list3 = __rlwinm(list3,24,8,31);          \
         comp1 = __rlwimi(comp1,comp2,8,24,31);    \
         list3 = __rlwimi(list3,list2,24,0,7);     \
         comp2 = __rlwinm(comp2,8,0,23);           \
         list2 = __rlwinm(list2,24,8,31);          \
         comp2 = __rlwimi(comp2,comp3,8,24,31);    \
         list2 = __rlwimi(list2,list1,24,0,7);     \
         comp3 = __rlwinm(comp3,8,0,23);           \
         list1 = __rlwinm(list1,24,8,31);          \
         comp3 = __rlwimi(comp3,comp4,8,24,31);    \
         list1 = __rlwimi(list1,list0,24,0,7);     \
         comp4 = __rlwinm(comp4,8,0,23);           \
         list0 = __rlwinm(list0,24,8,31);          \
         list0 = __rlwimi(list0,newbit,24,0,7);    \
         break;                                    \
      case 9:                                      \
         comp0 = __rlwinm(comp0,9,0,22);           \
         list4 = __rlwinm(list4,23,9,31);          \
         comp0 = __rlwimi(comp0,comp1,9,23,31);    \
         list4 = __rlwimi(list4,list3,23,0,8);     \
         comp1 = __rlwinm(comp1,9,0,22);           \
         list3 = __rlwinm(list3,23,9,31);          \
         comp1 = __rlwimi(comp1,comp2,9,23,31);    \
         list3 = __rlwimi(list3,list2,23,0,8);     \
         comp2 = __rlwinm(comp2,9,0,22);           \
         list2 = __rlwinm(list2,23,9,31);          \
         comp2 = __rlwimi(comp2,comp3,9,23,31);    \
         list2 = __rlwimi(list2,list1,23,0,8);     \
         comp3 = __rlwinm(comp3,9,0,22);           \
         list1 = __rlwinm(list1,23,9,31);          \
         comp3 = __rlwimi(comp3,comp4,9,23,31);    \
         list1 = __rlwimi(list1,list0,23,0,8);     \
         comp4 = __rlwinm(comp4,9,0,22);           \
         list0 = __rlwinm(list0,23,9,31);          \
         list0 = __rlwimi(list0,newbit,23,0,8);    \
         break;                                    \
      case 10:                                     \
         comp0 = __rlwinm(comp0,10,0,21);          \
         list4 = __rlwinm(list4,22,10,31);         \
         comp0 = __rlwimi(comp0,comp1,10,22,31);   \
         list4 = __rlwimi(list4,list3,22,0,9);     \
         comp1 = __rlwinm(comp1,10,0,21);          \
         list3 = __rlwinm(list3,22,10,31);         \
         comp1 = __rlwimi(comp1,comp2,10,22,31);   \
         list3 = __rlwimi(list3,list2,22,0,9);     \
         comp2 = __rlwinm(comp2,10,0,21);          \
         list2 = __rlwinm(list2,22,10,31);         \
         comp2 = __rlwimi(comp2,comp3,10,22,31);   \
         list2 = __rlwimi(list2,list1,22,0,9);     \
         comp3 = __rlwinm(comp3,10,0,21);          \
         list1 = __rlwinm(list1,22,10,31);         \
         comp3 = __rlwimi(comp3,comp4,10,22,31);   \
         list1 = __rlwimi(list1,list0,22,0,9);     \
         comp4 = __rlwinm(comp4,10,0,21);          \
         list0 = __rlwinm(list0,22,10,31);         \
         list0 = __rlwimi(list0,newbit,22,0,9);    \
         break;                                    \
      case 11:                                     \
         comp0 = __rlwinm(comp0,11,0,20);          \
         list4 = __rlwinm(list4,21,11,31);         \
         comp0 = __rlwimi(comp0,comp1,11,21,31);   \
         list4 = __rlwimi(list4,list3,21,0,10);    \
         comp1 = __rlwinm(comp1,11,0,20);          \
         list3 = __rlwinm(list3,21,11,31);         \
         comp1 = __rlwimi(comp1,comp2,11,21,31);   \
         list3 = __rlwimi(list3,list2,21,0,10);    \
         comp2 = __rlwinm(comp2,11,0,20);          \
         list2 = __rlwinm(list2,21,11,31);         \
         comp2 = __rlwimi(comp2,comp3,11,21,31);   \
         list2 = __rlwimi(list2,list1,21,0,10);    \
         comp3 = __rlwinm(comp3,11,0,20);          \
         list1 = __rlwinm(list1,21,11,31);         \
         comp3 = __rlwimi(comp3,comp4,11,21,31);   \
         list1 = __rlwimi(list1,list0,21,0,10);    \
         comp4 = __rlwinm(comp4,11,0,20);          \
         list0 = __rlwinm(list0,21,11,31);         \
         list0 = __rlwimi(list0,newbit,21,0,10);   \
         break;                                    \
      case 12:                                     \
         comp0 = __rlwinm(comp0,12,0,19);          \
         list4 = __rlwinm(list4,20,12,31);         \
         comp0 = __rlwimi(comp0,comp1,12,20,31);   \
         list4 = __rlwimi(list4,list3,20,0,11);    \
         comp1 = __rlwinm(comp1,12,0,19);          \
         list3 = __rlwinm(list3,20,12,31);         \
         comp1 = __rlwimi(comp1,comp2,12,20,31);   \
         list3 = __rlwimi(list3,list2,20,0,11);    \
         comp2 = __rlwinm(comp2,12,0,19);          \
         list2 = __rlwinm(list2,20,12,31);         \
         comp2 = __rlwimi(comp2,comp3,12,20,31);   \
         list2 = __rlwimi(list2,list1,20,0,11);    \
         comp3 = __rlwinm(comp3,12,0,19);          \
         list1 = __rlwinm(list1,20,12,31);         \
         comp3 = __rlwimi(comp3,comp4,12,20,31);   \
         list1 = __rlwimi(list1,list0,20,0,11);    \
         comp4 = __rlwinm(comp4,12,0,19);          \
         list0 = __rlwinm(list0,20,12,31);         \
         list0 = __rlwimi(list0,newbit,20,0,11);   \
         break;                                    \
      case 13:                                     \
         comp0 = __rlwinm(comp0,13,0,18);          \
         list4 = __rlwinm(list4,19,13,31);         \
         comp0 = __rlwimi(comp0,comp1,13,19,31);   \
         list4 = __rlwimi(list4,list3,19,0,12);    \
         comp1 = __rlwinm(comp1,13,0,18);          \
         list3 = __rlwinm(list3,19,13,31);         \
         comp1 = __rlwimi(comp1,comp2,13,19,31);   \
         list3 = __rlwimi(list3,list2,19,0,12);    \
         comp2 = __rlwinm(comp2,13,0,18);          \
         list2 = __rlwinm(list2,19,13,31);         \
         comp2 = __rlwimi(comp2,comp3,13,19,31);   \
         list2 = __rlwimi(list2,list1,19,0,12);    \
         comp3 = __rlwinm(comp3,13,0,18);          \
         list1 = __rlwinm(list1,19,13,31);         \
         comp3 = __rlwimi(comp3,comp4,13,19,31);   \
         list1 = __rlwimi(list1,list0,19,0,12);    \
         comp4 = __rlwinm(comp4,13,0,18);          \
         list0 = __rlwinm(list0,19,13,31);         \
         list0 = __rlwimi(list0,newbit,19,0,12);   \
         break;                                    \
      case 14:                                     \
         comp0 = __rlwinm(comp0,14,0,17);          \
         list4 = __rlwinm(list4,18,14,31);         \
         comp0 = __rlwimi(comp0,comp1,14,18,31);   \
         list4 = __rlwimi(list4,list3,18,0,13);    \
         comp1 = __rlwinm(comp1,14,0,17);          \
         list3 = __rlwinm(list3,18,14,31);         \
         comp1 = __rlwimi(comp1,comp2,14,18,31);   \
         list3 = __rlwimi(list3,list2,18,0,13);    \
         comp2 = __rlwinm(comp2,14,0,17);          \
         list2 = __rlwinm(list2,18,14,31);         \
         comp2 = __rlwimi(comp2,comp3,14,18,31);   \
         list2 = __rlwimi(list2,list1,18,0,13);    \
         comp3 = __rlwinm(comp3,14,0,17);          \
         list1 = __rlwinm(list1,18,14,31);         \
         comp3 = __rlwimi(comp3,comp4,14,18,31);   \
         list1 = __rlwimi(list1,list0,18,0,13);    \
         comp4 = __rlwinm(comp4,14,0,17);          \
         list0 = __rlwinm(list0,18,14,31);         \
         list0 = __rlwimi(list0,newbit,18,0,13);   \
         break;                                    \
      case 15:                                     \
         comp0 = __rlwinm(comp0,15,0,16);          \
         list4 = __rlwinm(list4,17,15,31);         \
         comp0 = __rlwimi(comp0,comp1,15,17,31);   \
         list4 = __rlwimi(list4,list3,17,0,14);    \
         comp1 = __rlwinm(comp1,15,0,16);          \
         list3 = __rlwinm(list3,17,15,31);         \
         comp1 = __rlwimi(comp1,comp2,15,17,31);   \
         list3 = __rlwimi(list3,list2,17,0,14);    \
         comp2 = __rlwinm(comp2,15,0,16);          \
         list2 = __rlwinm(list2,17,15,31);         \
         comp2 = __rlwimi(comp2,comp3,15,17,31);   \
         list2 = __rlwimi(list2,list1,17,0,14);    \
         comp3 = __rlwinm(comp3,15,0,16);          \
         list1 = __rlwinm(list1,17,15,31);         \
         comp3 = __rlwimi(comp3,comp4,15,17,31);   \
         list1 = __rlwimi(list1,list0,17,0,14);    \
         comp4 = __rlwinm(comp4,15,0,16);          \
         list0 = __rlwinm(list0,17,15,31);         \
         list0 = __rlwimi(list0,newbit,17,0,14);   \
         break;                                    \
      case 16:                                     \
         comp0 = __rlwinm(comp0,16,0,15);          \
         list4 = __rlwinm(list4,16,16,31);         \
         comp0 = __rlwimi(comp0,comp1,16,16,31);   \
         list4 = __rlwimi(list4,list3,16,0,15);    \
         comp1 = __rlwinm(comp1,16,0,15);          \
         list3 = __rlwinm(list3,16,16,31);         \
         comp1 = __rlwimi(comp1,comp2,16,16,31);   \
         list3 = __rlwimi(list3,list2,16,0,15);    \
         comp2 = __rlwinm(comp2,16,0,15);          \
         list2 = __rlwinm(list2,16,16,31);         \
         comp2 = __rlwimi(comp2,comp3,16,16,31);   \
         list2 = __rlwimi(list2,list1,16,0,15);    \
         comp3 = __rlwinm(comp3,16,0,15);          \
         list1 = __rlwinm(list1,16,16,31);         \
         comp3 = __rlwimi(comp3,comp4,16,16,31);   \
         list1 = __rlwimi(list1,list0,16,0,15);    \
         comp4 = __rlwinm(comp4,16,0,15);          \
         list0 = __rlwinm(list0,16,16,31);         \
         list0 = __rlwimi(list0,newbit,16,0,15);   \
         break;                                    \
      case 17:                                     \
         comp0 = __rlwinm(comp0,17,0,14);          \
         list4 = __rlwinm(list4,15,17,31);         \
         comp0 = __rlwimi(comp0,comp1,17,15,31);   \
         list4 = __rlwimi(list4,list3,15,0,16);    \
         comp1 = __rlwinm(comp1,17,0,14);          \
         list3 = __rlwinm(list3,15,17,31);         \
         comp1 = __rlwimi(comp1,comp2,17,15,31);   \
         list3 = __rlwimi(list3,list2,15,0,16);    \
         comp2 = __rlwinm(comp2,17,0,14);          \
         list2 = __rlwinm(list2,15,17,31);         \
         comp2 = __rlwimi(comp2,comp3,17,15,31);   \
         list2 = __rlwimi(list2,list1,15,0,16);    \
         comp3 = __rlwinm(comp3,17,0,14);          \
         list1 = __rlwinm(list1,15,17,31);         \
         comp3 = __rlwimi(comp3,comp4,17,15,31);   \
         list1 = __rlwimi(list1,list0,15,0,16);    \
         comp4 = __rlwinm(comp4,17,0,14);          \
         list0 = __rlwinm(list0,15,17,31);         \
         list0 = __rlwimi(list0,newbit,15,0,16);   \
         break;                                    \
      case 18:                                     \
         comp0 = __rlwinm(comp0,18,0,13);          \
         list4 = __rlwinm(list4,14,18,31);         \
         comp0 = __rlwimi(comp0,comp1,18,14,31);   \
         list4 = __rlwimi(list4,list3,14,0,17);    \
         comp1 = __rlwinm(comp1,18,0,13);          \
         list3 = __rlwinm(list3,14,18,31);         \
         comp1 = __rlwimi(comp1,comp2,18,14,31);   \
         list3 = __rlwimi(list3,list2,14,0,17);    \
         comp2 = __rlwinm(comp2,18,0,13);          \
         list2 = __rlwinm(list2,14,18,31);         \
         comp2 = __rlwimi(comp2,comp3,18,14,31);   \
         list2 = __rlwimi(list2,list1,14,0,17);    \
         comp3 = __rlwinm(comp3,18,0,13);          \
         list1 = __rlwinm(list1,14,18,31);         \
         comp3 = __rlwimi(comp3,comp4,18,14,31);   \
         list1 = __rlwimi(list1,list0,14,0,17);    \
         comp4 = __rlwinm(comp4,18,0,13);          \
         list0 = __rlwinm(list0,14,18,31);         \
         list0 = __rlwimi(list0,newbit,14,0,17);   \
         break;                                    \
      case 19:                                     \
         comp0 = __rlwinm(comp0,19,0,12);          \
         list4 = __rlwinm(list4,13,19,31);         \
         comp0 = __rlwimi(comp0,comp1,19,13,31);   \
         list4 = __rlwimi(list4,list3,13,0,18);    \
         comp1 = __rlwinm(comp1,19,0,12);          \
         list3 = __rlwinm(list3,13,19,31);         \
         comp1 = __rlwimi(comp1,comp2,19,13,31);   \
         list3 = __rlwimi(list3,list2,13,0,18);    \
         comp2 = __rlwinm(comp2,19,0,12);          \
         list2 = __rlwinm(list2,13,19,31);         \
         comp2 = __rlwimi(comp2,comp3,19,13,31);   \
         list2 = __rlwimi(list2,list1,13,0,18);    \
         comp3 = __rlwinm(comp3,19,0,12);          \
         list1 = __rlwinm(list1,13,19,31);         \
         comp3 = __rlwimi(comp3,comp4,19,13,31);   \
         list1 = __rlwimi(list1,list0,13,0,18);    \
         comp4 = __rlwinm(comp4,19,0,12);          \
         list0 = __rlwinm(list0,13,19,31);         \
         list0 = __rlwimi(list0,newbit,13,0,18);   \
         break;                                    \
      case 20:                                     \
         comp0 = __rlwinm(comp0,20,0,11);          \
         list4 = __rlwinm(list4,12,20,31);         \
         comp0 = __rlwimi(comp0,comp1,20,12,31);   \
         list4 = __rlwimi(list4,list3,12,0,19);    \
         comp1 = __rlwinm(comp1,20,0,11);          \
         list3 = __rlwinm(list3,12,20,31);         \
         comp1 = __rlwimi(comp1,comp2,20,12,31);   \
         list3 = __rlwimi(list3,list2,12,0,19);    \
         comp2 = __rlwinm(comp2,20,0,11);          \
         list2 = __rlwinm(list2,12,20,31);         \
         comp2 = __rlwimi(comp2,comp3,20,12,31);   \
         list2 = __rlwimi(list2,list1,12,0,19);    \
         comp3 = __rlwinm(comp3,20,0,11);          \
         list1 = __rlwinm(list1,12,20,31);         \
         comp3 = __rlwimi(comp3,comp4,20,12,31);   \
         list1 = __rlwimi(list1,list0,12,0,19);    \
         comp4 = __rlwinm(comp4,20,0,11);          \
         list0 = __rlwinm(list0,12,20,31);         \
         list0 = __rlwimi(list0,newbit,12,0,19);   \
         break;                                    \
      case 21:                                     \
         comp0 = __rlwinm(comp0,21,0,10);          \
         list4 = __rlwinm(list4,11,21,31);         \
         comp0 = __rlwimi(comp0,comp1,21,11,31);   \
         list4 = __rlwimi(list4,list3,11,0,20);    \
         comp1 = __rlwinm(comp1,21,0,10);          \
         list3 = __rlwinm(list3,11,21,31);         \
         comp1 = __rlwimi(comp1,comp2,21,11,31);   \
         list3 = __rlwimi(list3,list2,11,0,20);    \
         comp2 = __rlwinm(comp2,21,0,10);          \
         list2 = __rlwinm(list2,11,21,31);         \
         comp2 = __rlwimi(comp2,comp3,21,11,31);   \
         list2 = __rlwimi(list2,list1,11,0,20);    \
         comp3 = __rlwinm(comp3,21,0,10);          \
         list1 = __rlwinm(list1,11,21,31);         \
         comp3 = __rlwimi(comp3,comp4,21,11,31);   \
         list1 = __rlwimi(list1,list0,11,0,20);    \
         comp4 = __rlwinm(comp4,21,0,10);          \
         list0 = __rlwinm(list0,11,21,31);         \
         list0 = __rlwimi(list0,newbit,11,0,20);   \
         break;                                    \
      case 22:                                     \
         comp0 = __rlwinm(comp0,22,0,9);           \
         list4 = __rlwinm(list4,10,22,31);         \
         comp0 = __rlwimi(comp0,comp1,22,10,31);   \
         list4 = __rlwimi(list4,list3,10,0,21);    \
         comp1 = __rlwinm(comp1,22,0,9);           \
         list3 = __rlwinm(list3,10,22,31);         \
         comp1 = __rlwimi(comp1,comp2,22,10,31);   \
         list3 = __rlwimi(list3,list2,10,0,21);    \
         comp2 = __rlwinm(comp2,22,0,9);           \
         list2 = __rlwinm(list2,10,22,31);         \
         comp2 = __rlwimi(comp2,comp3,22,10,31);   \
         list2 = __rlwimi(list2,list1,10,0,21);    \
         comp3 = __rlwinm(comp3,22,0,9);           \
         list1 = __rlwinm(list1,10,22,31);         \
         comp3 = __rlwimi(comp3,comp4,22,10,31);   \
         list1 = __rlwimi(list1,list0,10,0,21);    \
         comp4 = __rlwinm(comp4,22,0,9);           \
         list0 = __rlwinm(list0,10,22,31);         \
         list0 = __rlwimi(list0,newbit,10,0,21);   \
         break;                                    \
      case 23:                                     \
         comp0 = __rlwinm(comp0,23,0,8);           \
         list4 = __rlwinm(list4,9,23,31);          \
         comp0 = __rlwimi(comp0,comp1,23,9,31);    \
         list4 = __rlwimi(list4,list3,9,0,22);     \
         comp1 = __rlwinm(comp1,23,0,8);           \
         list3 = __rlwinm(list3,9,23,31);          \
         comp1 = __rlwimi(comp1,comp2,23,9,31);    \
         list3 = __rlwimi(list3,list2,9,0,22);     \
         comp2 = __rlwinm(comp2,23,0,8);           \
         list2 = __rlwinm(list2,9,23,31);          \
         comp2 = __rlwimi(comp2,comp3,23,9,31);    \
         list2 = __rlwimi(list2,list1,9,0,22);     \
         comp3 = __rlwinm(comp3,23,0,8);           \
         list1 = __rlwinm(list1,9,23,31);          \
         comp3 = __rlwimi(comp3,comp4,23,9,31);    \
         list1 = __rlwimi(list1,list0,9,0,22);     \
         comp4 = __rlwinm(comp4,23,0,8);           \
         list0 = __rlwinm(list0,9,23,31);          \
         list0 = __rlwimi(list0,newbit,9,0,22);    \
         break;                                    \
      case 24:                                     \
         comp0 = __rlwinm(comp0,24,0,7);           \
         list4 = __rlwinm(list4,8,24,31);          \
         comp0 = __rlwimi(comp0,comp1,24,8,31);    \
         list4 = __rlwimi(list4,list3,8,0,23);     \
         comp1 = __rlwinm(comp1,24,0,7);           \
         list3 = __rlwinm(list3,8,24,31);          \
         comp1 = __rlwimi(comp1,comp2,24,8,31);    \
         list3 = __rlwimi(list3,list2,8,0,23);     \
         comp2 = __rlwinm(comp2,24,0,7);           \
         list2 = __rlwinm(list2,8,24,31);          \
         comp2 = __rlwimi(comp2,comp3,24,8,31);    \
         list2 = __rlwimi(list2,list1,8,0,23);     \
         comp3 = __rlwinm(comp3,24,0,7);           \
         list1 = __rlwinm(list1,8,24,31);          \
         comp3 = __rlwimi(comp3,comp4,24,8,31);    \
         list1 = __rlwimi(list1,list0,8,0,23);     \
         comp4 = __rlwinm(comp4,24,0,7);           \
         list0 = __rlwinm(list0,8,24,31);          \
         list0 = __rlwimi(list0,newbit,8,0,23);    \
         break;                                    \
      case 25:                                     \
         comp0 = __rlwinm(comp0,25,0,6);           \
         list4 = __rlwinm(list4,7,25,31);          \
         comp0 = __rlwimi(comp0,comp1,25,7,31);    \
         list4 = __rlwimi(list4,list3,7,0,24);     \
         comp1 = __rlwinm(comp1,25,0,6);           \
         list3 = __rlwinm(list3,7,25,31);          \
         comp1 = __rlwimi(comp1,comp2,25,7,31);    \
         list3 = __rlwimi(list3,list2,7,0,24);     \
         comp2 = __rlwinm(comp2,25,0,6);           \
         list2 = __rlwinm(list2,7,25,31);          \
         comp2 = __rlwimi(comp2,comp3,25,7,31);    \
         list2 = __rlwimi(list2,list1,7,0,24);     \
         comp3 = __rlwinm(comp3,25,0,6);           \
         list1 = __rlwinm(list1,7,25,31);          \
         comp3 = __rlwimi(comp3,comp4,25,7,31);    \
         list1 = __rlwimi(list1,list0,7,0,24);     \
         comp4 = __rlwinm(comp4,25,0,6);           \
         list0 = __rlwinm(list0,7,25,31);          \
         list0 = __rlwimi(list0,newbit,7,0,24);    \
         break;                                    \
      case 26:                                     \
         comp0 = __rlwinm(comp0,26,0,5);           \
         list4 = __rlwinm(list4,6,26,31);          \
         comp0 = __rlwimi(comp0,comp1,26,6,31);    \
         list4 = __rlwimi(list4,list3,6,0,25);     \
         comp1 = __rlwinm(comp1,26,0,5);           \
         list3 = __rlwinm(list3,6,26,31);          \
         comp1 = __rlwimi(comp1,comp2,26,6,31);    \
         list3 = __rlwimi(list3,list2,6,0,25);     \
         comp2 = __rlwinm(comp2,26,0,5);           \
         list2 = __rlwinm(list2,6,26,31);          \
         comp2 = __rlwimi(comp2,comp3,26,6,31);    \
         list2 = __rlwimi(list2,list1,6,0,25);     \
         comp3 = __rlwinm(comp3,26,0,5);           \
         list1 = __rlwinm(list1,6,26,31);          \
         comp3 = __rlwimi(comp3,comp4,26,6,31);    \
         list1 = __rlwimi(list1,list0,6,0,25);     \
         comp4 = __rlwinm(comp4,26,0,5);           \
         list0 = __rlwinm(list0,6,26,31);          \
         list0 = __rlwimi(list0,newbit,6,0,25);    \
         break;                                    \
      case 27:                                     \
         comp0 = __rlwinm(comp0,27,0,4);           \
         list4 = __rlwinm(list4,5,27,31);          \
         comp0 = __rlwimi(comp0,comp1,27,5,31);    \
         list4 = __rlwimi(list4,list3,5,0,26);     \
         comp1 = __rlwinm(comp1,27,0,4);           \
         list3 = __rlwinm(list3,5,27,31);          \
         comp1 = __rlwimi(comp1,comp2,27,5,31);    \
         list3 = __rlwimi(list3,list2,5,0,26);     \
         comp2 = __rlwinm(comp2,27,0,4);           \
         list2 = __rlwinm(list2,5,27,31);          \
         comp2 = __rlwimi(comp2,comp3,27,5,31);    \
         list2 = __rlwimi(list2,list1,5,0,26);     \
         comp3 = __rlwinm(comp3,27,0,4);           \
         list1 = __rlwinm(list1,5,27,31);          \
         comp3 = __rlwimi(comp3,comp4,27,5,31);    \
         list1 = __rlwimi(list1,list0,5,0,26);     \
         comp4 = __rlwinm(comp4,27,0,4);           \
         list0 = __rlwinm(list0,5,27,31);          \
         list0 = __rlwimi(list0,newbit,5,0,26);    \
         break;                                    \
      case 28:                                     \
         comp0 = __rlwinm(comp0,28,0,3);           \
         list4 = __rlwinm(list4,4,28,31);          \
         comp0 = __rlwimi(comp0,comp1,28,4,31);    \
         list4 = __rlwimi(list4,list3,4,0,27);     \
         comp1 = __rlwinm(comp1,28,0,3);           \
         list3 = __rlwinm(list3,4,28,31);          \
         comp1 = __rlwimi(comp1,comp2,28,4,31);    \
         list3 = __rlwimi(list3,list2,4,0,27);     \
         comp2 = __rlwinm(comp2,28,0,3);           \
         list2 = __rlwinm(list2,4,28,31);          \
         comp2 = __rlwimi(comp2,comp3,28,4,31);    \
         list2 = __rlwimi(list2,list1,4,0,27);     \
         comp3 = __rlwinm(comp3,28,0,3);           \
         list1 = __rlwinm(list1,4,28,31);          \
         comp3 = __rlwimi(comp3,comp4,28,4,31);    \
         list1 = __rlwimi(list1,list0,4,0,27);     \
         comp4 = __rlwinm(comp4,28,0,3);           \
         list0 = __rlwinm(list0,4,28,31);          \
         list0 = __rlwimi(list0,newbit,4,0,27);    \
         break;                                    \
      case 29:                                     \
         comp0 = __rlwinm(comp0,29,0,2);           \
         list4 = __rlwinm(list4,3,29,31);          \
         comp0 = __rlwimi(comp0,comp1,29,3,31);    \
         list4 = __rlwimi(list4,list3,3,0,28);     \
         comp1 = __rlwinm(comp1,29,0,2);           \
         list3 = __rlwinm(list3,3,29,31);          \
         comp1 = __rlwimi(comp1,comp2,29,3,31);    \
         list3 = __rlwimi(list3,list2,3,0,28);     \
         comp2 = __rlwinm(comp2,29,0,2);           \
         list2 = __rlwinm(list2,3,29,31);          \
         comp2 = __rlwimi(comp2,comp3,29,3,31);    \
         list2 = __rlwimi(list2,list1,3,0,28);     \
         comp3 = __rlwinm(comp3,29,0,2);           \
         list1 = __rlwinm(list1,3,29,31);          \
         comp3 = __rlwimi(comp3,comp4,29,3,31);    \
         list1 = __rlwimi(list1,list0,3,0,28);     \
         comp4 = __rlwinm(comp4,29,0,2);           \
         list0 = __rlwinm(list0,3,29,31);          \
         list0 = __rlwimi(list0,newbit,3,0,28);    \
         break;                                    \
      case 30:                                     \
         comp0 = __rlwinm(comp0,30,0,1);           \
         list4 = __rlwinm(list4,2,30,31);          \
         comp0 = __rlwimi(comp0,comp1,30,2,31);    \
         list4 = __rlwimi(list4,list3,2,0,29);     \
         comp1 = __rlwinm(comp1,30,0,1);           \
         list3 = __rlwinm(list3,2,30,31);          \
         comp1 = __rlwimi(comp1,comp2,30,2,31);    \
         list3 = __rlwimi(list3,list2,2,0,29);     \
         comp2 = __rlwinm(comp2,30,0,1);           \
         list2 = __rlwinm(list2,2,30,31);          \
         comp2 = __rlwimi(comp2,comp3,30,2,31);    \
         list2 = __rlwimi(list2,list1,2,0,29);     \
         comp3 = __rlwinm(comp3,30,0,1);           \
         list1 = __rlwinm(list1,2,30,31);          \
         comp3 = __rlwimi(comp3,comp4,30,2,31);    \
         list1 = __rlwimi(list1,list0,2,0,29);     \
         comp4 = __rlwinm(comp4,30,0,1);           \
         list0 = __rlwinm(list0,2,30,31);          \
         list0 = __rlwimi(list0,newbit,2,0,29);    \
         break;                                    \
      case 31:                                     \
         comp0 = __rlwinm(comp0,31,0,0);           \
         list4 = __rlwinm(list4,1,31,31);          \
         comp0 = __rlwimi(comp0,comp1,31,1,31);    \
         list4 = __rlwimi(list4,list3,1,0,30);     \
         comp1 = __rlwinm(comp1,31,0,0);           \
         list3 = __rlwinm(list3,1,31,31);          \
         comp1 = __rlwimi(comp1,comp2,31,1,31);    \
         list3 = __rlwimi(list3,list2,1,0,30);     \
         comp2 = __rlwinm(comp2,31,0,0);           \
         list2 = __rlwinm(list2,1,31,31);          \
         comp2 = __rlwimi(comp2,comp3,31,1,31);    \
         list2 = __rlwimi(list2,list1,1,0,30);     \
         comp3 = __rlwinm(comp3,31,0,0);           \
         list1 = __rlwinm(list1,1,31,31);          \
         comp3 = __rlwimi(comp3,comp4,31,1,31);    \
         list1 = __rlwimi(list1,list0,1,0,30);     \
         comp4 = __rlwinm(comp4,31,0,0);           \
         list0 = __rlwinm(list0,1,31,31);          \
         list0 = __rlwimi(list0,newbit,1,0,30);    \
         break;                                    \
      case 32:                                     \
         comp0 = comp1;                            \
         comp1 = comp2;                            \
         comp2 = comp3;                            \
         comp3 = comp4;                            \
         comp4 = 0;                                \
         list4 = list3;                            \
         list3 = list2;                            \
         list2 = list1;                            \
         list1 = list0;                            \
         list0 = newbit;                           \
         break;                                    \
    }                                              \
    newbit = 0;                                    \
  }
#elif defined(__386__) && defined(__WATCOMC__)
   void COMP_LEFT_LIST_RIGHT_xx(U *levcomp, U *levlist, int s);
    #pragma aux COMP_LEFT_LIST_RIGHT_xx =  \
    "mov eax,[edi+4]"                   \
    "mov edx,[esi+12]"                  \
    "shld [edi+0],eax,cl"               \
    "shrd [esi+16],edx,cl"              \
    "mov eax,[edi+8]"                   \
    "mov edx,[esi+8]"                   \
    "shld [edi+4],eax,cl"               \
    "shrd [esi+12],edx,cl"              \
    "mov eax,[edi+12]"                  \
    "mov edx,[esi+4]"                   \
    "shld [edi+8],eax,cl"               \
    "shrd [esi+8],edx,cl"               \
    "mov eax,[edi+16]"                  \
    "mov edx,[esi+0]"                   \
    "shld [edi+12],eax,cl"              \
    "shrd [esi+4],edx,cl"               \
    "shl eax,cl"                        \
    "shr edx,cl"                        \
    "mov [edi+16],eax"                  \
    "mov [esi+0],edx"                   \
    parm [edi] [esi] [ecx] modify exact [edx eax];
  #define COMP_LEFT_LIST_RIGHT(lev,s) \
        COMP_LEFT_LIST_RIGHT_xx(&(lev->comp[0]),&(lev->list[0]),s)
#elif defined(ASM_X86) && defined(__GNUC__)
  #define COMP_LEFT_LIST_RIGHT(lev,s)       \
  {                                         \
    asm(                                    \
      "movl  4(%0),%%eax\n\t"               \
      "movl  12(%1),%%edx\n\t"              \
                                            \
      "shldl %%cl,%%eax,(%0)\n\t"           \
      "movl  8(%0),%%eax\n\t"               \
                                            \
      "shrdl %%cl,%%edx,16(%1)\n\t"         \
      "movl  8(%1),%%edx\n\t"               \
                                            \
      "shldl %%cl,%%eax,4(%0)\n\t"          \
      "movl  12(%0),%%eax\n\t"              \
                                            \
      "shrdl %%cl,%%edx,12(%1)\n\t"         \
      "movl  4(%1),%%edx\n\t"               \
                                            \
      "shldl %%cl,%%eax,8(%0)\n\t"          \
      "movl  16(%0),%%eax\n\t"              \
                                            \
      "shrdl %%cl,%%edx,8(%1)\n\t"          \
      "movl  (%1),%%edx\n\t"                \
                                            \
      "shldl %%cl,%%eax,12(%0)\n\t"         \
      "shrdl %%cl,%%edx,4(%1)\n\t"          \
                                            \
      "shll  %%cl,16(%0)\n\t"               \
      "shrl  %%cl,(%1)\n\t"                 \
                                            \
      : /* no output */                     \
      : "D" (&(lev->comp)), "S" (&(lev->list)), \
        "c" (s) /* get s in ecx*/           \
      : "memory", "cc", "eax", "edx"        \
    );                                      \
  }
#else
#error you dont have inline assembly for COMP_LEFT_LIST_RIGHT
#endif
#elif (OGROPT_ALTERNATE_COMP_LEFT_LIST_RIGHT == 1)
#define COMP_LEFT_LIST_RIGHT(lev, s) {             \
   switch (s)                                      \
      {                                            \
      case 0:                                      \
         comp0 = (comp0 << 0) | (comp1 >> 32);     \
         list4 = (list4 >> 0) | (list3 << 32);     \
         comp1 = (comp1 << 0) | (comp2 >> 32);     \
         list3 = (list3 >> 0) | (list2 << 32);     \
         comp2 = (comp2 << 0) | (comp3 >> 32);     \
         list2 = (list2 >> 0) | (list1 << 32);     \
         comp3 = (comp3 << 0) | (comp4 >> 32);     \
         list1 = (list1 >> 0) | (list0 << 32);     \
         list0 = (list0 >> 0) | (newbit << 32);    \
         comp4 = comp4 << 0;                       \
         break;                                    \
      case 1:                                      \
         comp0 = (comp0 << 1) | (comp1 >> 31);     \
         list4 = (list4 >> 1) | (list3 << 31);     \
         comp1 = (comp1 << 1) | (comp2 >> 31);     \
         list3 = (list3 >> 1) | (list2 << 31);     \
         comp2 = (comp2 << 1) | (comp3 >> 31);     \
         list2 = (list2 >> 1) | (list1 << 31);     \
         comp3 = (comp3 << 1) | (comp4 >> 31);     \
         list1 = (list1 >> 1) | (list0 << 31);     \
         list0 = (list0 >> 1) | (newbit << 31);    \
         comp4 = comp4 << 1;                       \
         break;                                    \
      case 2:                                      \
         comp0 = (comp0 << 2) | (comp1 >> 30);     \
         list4 = (list4 >> 2) | (list3 << 30);     \
         comp1 = (comp1 << 2) | (comp2 >> 30);     \
         list3 = (list3 >> 2) | (list2 << 30);     \
         comp2 = (comp2 << 2) | (comp3 >> 30);     \
         list2 = (list2 >> 2) | (list1 << 30);     \
         comp3 = (comp3 << 2) | (comp4 >> 30);     \
         list1 = (list1 >> 2) | (list0 << 30);     \
         list0 = (list0 >> 2) | (newbit << 30);    \
         comp4 = comp4 << 2;                       \
         break;                                    \
      case 3:                                      \
         comp0 = (comp0 << 3) | (comp1 >> 29);     \
         list4 = (list4 >> 3) | (list3 << 29);     \
         comp1 = (comp1 << 3) | (comp2 >> 29);     \
         list3 = (list3 >> 3) | (list2 << 29);     \
         comp2 = (comp2 << 3) | (comp3 >> 29);     \
         list2 = (list2 >> 3) | (list1 << 29);     \
         comp3 = (comp3 << 3) | (comp4 >> 29);     \
         list1 = (list1 >> 3) | (list0 << 29);     \
         list0 = (list0 >> 3) | (newbit << 29);    \
         comp4 = comp4 << 3;                       \
         break;                                    \
      case 4:                                      \
         comp0 = (comp0 << 4) | (comp1 >> 28);     \
         list4 = (list4 >> 4) | (list3 << 28);     \
         comp1 = (comp1 << 4) | (comp2 >> 28);     \
         list3 = (list3 >> 4) | (list2 << 28);     \
         comp2 = (comp2 << 4) | (comp3 >> 28);     \
         list2 = (list2 >> 4) | (list1 << 28);     \
         comp3 = (comp3 << 4) | (comp4 >> 28);     \
         list1 = (list1 >> 4) | (list0 << 28);     \
         list0 = (list0 >> 4) | (newbit << 28);    \
         comp4 = comp4 << 4;                       \
         break;                                    \
      case 5:                                      \
         comp0 = (comp0 << 5) | (comp1 >> 27);     \
         list4 = (list4 >> 5) | (list3 << 27);     \
         comp1 = (comp1 << 5) | (comp2 >> 27);     \
         list3 = (list3 >> 5) | (list2 << 27);     \
         comp2 = (comp2 << 5) | (comp3 >> 27);     \
         list2 = (list2 >> 5) | (list1 << 27);     \
         comp3 = (comp3 << 5) | (comp4 >> 27);     \
         list1 = (list1 >> 5) | (list0 << 27);     \
         list0 = (list0 >> 5) | (newbit << 27);    \
         comp4 = comp4 << 5;                       \
         break;                                    \
      case 6:                                      \
         comp0 = (comp0 << 6) | (comp1 >> 26);     \
         list4 = (list4 >> 6) | (list3 << 26);     \
         comp1 = (comp1 << 6) | (comp2 >> 26);     \
         list3 = (list3 >> 6) | (list2 << 26);     \
         comp2 = (comp2 << 6) | (comp3 >> 26);     \
         list2 = (list2 >> 6) | (list1 << 26);     \
         comp3 = (comp3 << 6) | (comp4 >> 26);     \
         list1 = (list1 >> 6) | (list0 << 26);     \
         list0 = (list0 >> 6) | (newbit << 26);    \
         comp4 = comp4 << 6;                       \
         break;                                    \
      case 7:                                      \
         comp0 = (comp0 << 7) | (comp1 >> 25);     \
         list4 = (list4 >> 7) | (list3 << 25);     \
         comp1 = (comp1 << 7) | (comp2 >> 25);     \
         list3 = (list3 >> 7) | (list2 << 25);     \
         comp2 = (comp2 << 7) | (comp3 >> 25);     \
         list2 = (list2 >> 7) | (list1 << 25);     \
         comp3 = (comp3 << 7) | (comp4 >> 25);     \
         list1 = (list1 >> 7) | (list0 << 25);     \
         list0 = (list0 >> 7) | (newbit << 25);    \
         comp4 = comp4 << 7;                       \
         break;                                    \
      case 8:                                      \
         comp0 = (comp0 << 8) | (comp1 >> 24);     \
         list4 = (list4 >> 8) | (list3 << 24);     \
         comp1 = (comp1 << 8) | (comp2 >> 24);     \
         list3 = (list3 >> 8) | (list2 << 24);     \
         comp2 = (comp2 << 8) | (comp3 >> 24);     \
         list2 = (list2 >> 8) | (list1 << 24);     \
         comp3 = (comp3 << 8) | (comp4 >> 24);     \
         list1 = (list1 >> 8) | (list0 << 24);     \
         list0 = (list0 >> 8) | (newbit << 24);    \
         comp4 = comp4 << 8;                       \
         break;                                    \
      case 9:                                      \
         comp0 = (comp0 << 9) | (comp1 >> 23);     \
         list4 = (list4 >> 9) | (list3 << 23);     \
         comp1 = (comp1 << 9) | (comp2 >> 23);     \
         list3 = (list3 >> 9) | (list2 << 23);     \
         comp2 = (comp2 << 9) | (comp3 >> 23);     \
         list2 = (list2 >> 9) | (list1 << 23);     \
         comp3 = (comp3 << 9) | (comp4 >> 23);     \
         list1 = (list1 >> 9) | (list0 << 23);     \
         list0 = (list0 >> 9) | (newbit << 23);    \
         comp4 = comp4 << 9;                       \
         break;                                    \
      case 10:                                     \
         comp0 = (comp0 << 10) | (comp1 >> 22);    \
         list4 = (list4 >> 10) | (list3 << 22);    \
         comp1 = (comp1 << 10) | (comp2 >> 22);    \
         list3 = (list3 >> 10) | (list2 << 22);    \
         comp2 = (comp2 << 10) | (comp3 >> 22);    \
         list2 = (list2 >> 10) | (list1 << 22);    \
         comp3 = (comp3 << 10) | (comp4 >> 22);    \
         list1 = (list1 >> 10) | (list0 << 22);    \
         list0 = (list0 >> 10) | (newbit << 22);   \
         comp4 = comp4 << 10;                      \
         break;                                    \
      case 11:                                     \
         comp0 = (comp0 << 11) | (comp1 >> 21);    \
         list4 = (list4 >> 11) | (list3 << 21);    \
         comp1 = (comp1 << 11) | (comp2 >> 21);    \
         list3 = (list3 >> 11) | (list2 << 21);    \
         comp2 = (comp2 << 11) | (comp3 >> 21);    \
         list2 = (list2 >> 11) | (list1 << 21);    \
         comp3 = (comp3 << 11) | (comp4 >> 21);    \
         list1 = (list1 >> 11) | (list0 << 21);    \
         list0 = (list0 >> 11) | (newbit << 21);   \
         comp4 = comp4 << 11;                      \
         break;                                    \
      case 12:                                     \
         comp0 = (comp0 << 12) | (comp1 >> 20);    \
         list4 = (list4 >> 12) | (list3 << 20);    \
         comp1 = (comp1 << 12) | (comp2 >> 20);    \
         list3 = (list3 >> 12) | (list2 << 20);    \
         comp2 = (comp2 << 12) | (comp3 >> 20);    \
         list2 = (list2 >> 12) | (list1 << 20);    \
         comp3 = (comp3 << 12) | (comp4 >> 20);    \
         list1 = (list1 >> 12) | (list0 << 20);    \
         list0 = (list0 >> 12) | (newbit << 20);   \
         comp4 = comp4 << 12;                      \
         break;                                    \
      case 13:                                     \
         comp0 = (comp0 << 13) | (comp1 >> 19);    \
         list4 = (list4 >> 13) | (list3 << 19);    \
         comp1 = (comp1 << 13) | (comp2 >> 19);    \
         list3 = (list3 >> 13) | (list2 << 19);    \
         comp2 = (comp2 << 13) | (comp3 >> 19);    \
         list2 = (list2 >> 13) | (list1 << 19);    \
         comp3 = (comp3 << 13) | (comp4 >> 19);    \
         list1 = (list1 >> 13) | (list0 << 19);    \
         list0 = (list0 >> 13) | (newbit << 19);   \
         comp4 = comp4 << 13;                      \
         break;                                    \
      case 14:                                     \
         comp0 = (comp0 << 14) | (comp1 >> 18);    \
         list4 = (list4 >> 14) | (list3 << 18);    \
         comp1 = (comp1 << 14) | (comp2 >> 18);    \
         list3 = (list3 >> 14) | (list2 << 18);    \
         comp2 = (comp2 << 14) | (comp3 >> 18);    \
         list2 = (list2 >> 14) | (list1 << 18);    \
         comp3 = (comp3 << 14) | (comp4 >> 18);    \
         list1 = (list1 >> 14) | (list0 << 18);    \
         list0 = (list0 >> 14) | (newbit << 18);   \
         comp4 = comp4 << 14;                      \
         break;                                    \
      case 15:                                     \
         comp0 = (comp0 << 15) | (comp1 >> 17);    \
         list4 = (list4 >> 15) | (list3 << 17);    \
         comp1 = (comp1 << 15) | (comp2 >> 17);    \
         list3 = (list3 >> 15) | (list2 << 17);    \
         comp2 = (comp2 << 15) | (comp3 >> 17);    \
         list2 = (list2 >> 15) | (list1 << 17);    \
         comp3 = (comp3 << 15) | (comp4 >> 17);    \
         list1 = (list1 >> 15) | (list0 << 17);    \
         list0 = (list0 >> 15) | (newbit << 17);   \
         comp4 = comp4 << 15;                      \
         break;                                    \
      case 16:                                     \
         comp0 = (comp0 << 16) | (comp1 >> 16);    \
         list4 = (list4 >> 16) | (list3 << 16);    \
         comp1 = (comp1 << 16) | (comp2 >> 16);    \
         list3 = (list3 >> 16) | (list2 << 16);    \
         comp2 = (comp2 << 16) | (comp3 >> 16);    \
         list2 = (list2 >> 16) | (list1 << 16);    \
         comp3 = (comp3 << 16) | (comp4 >> 16);    \
         list1 = (list1 >> 16) | (list0 << 16);    \
         list0 = (list0 >> 16) | (newbit << 16);   \
         comp4 = comp4 << 16;                      \
         break;                                    \
      case 17:                                     \
         comp0 = (comp0 << 17) | (comp1 >> 15);    \
         list4 = (list4 >> 17) | (list3 << 15);    \
         comp1 = (comp1 << 17) | (comp2 >> 15);    \
         list3 = (list3 >> 17) | (list2 << 15);    \
         comp2 = (comp2 << 17) | (comp3 >> 15);    \
         list2 = (list2 >> 17) | (list1 << 15);    \
         comp3 = (comp3 << 17) | (comp4 >> 15);    \
         list1 = (list1 >> 17) | (list0 << 15);    \
         list0 = (list0 >> 17) | (newbit << 15);   \
         comp4 = comp4 << 17;                      \
         break;                                    \
      case 18:                                     \
         comp0 = (comp0 << 18) | (comp1 >> 14);    \
         list4 = (list4 >> 18) | (list3 << 14);    \
         comp1 = (comp1 << 18) | (comp2 >> 14);    \
         list3 = (list3 >> 18) | (list2 << 14);    \
         comp2 = (comp2 << 18) | (comp3 >> 14);    \
         list2 = (list2 >> 18) | (list1 << 14);    \
         comp3 = (comp3 << 18) | (comp4 >> 14);    \
         list1 = (list1 >> 18) | (list0 << 14);    \
         list0 = (list0 >> 18) | (newbit << 14);   \
         comp4 = comp4 << 18;                      \
         break;                                    \
      case 19:                                     \
         comp0 = (comp0 << 19) | (comp1 >> 13);    \
         list4 = (list4 >> 19) | (list3 << 13);    \
         comp1 = (comp1 << 19) | (comp2 >> 13);    \
         list3 = (list3 >> 19) | (list2 << 13);    \
         comp2 = (comp2 << 19) | (comp3 >> 13);    \
         list2 = (list2 >> 19) | (list1 << 13);    \
         comp3 = (comp3 << 19) | (comp4 >> 13);    \
         list1 = (list1 >> 19) | (list0 << 13);    \
         list0 = (list0 >> 19) | (newbit << 13);   \
         comp4 = comp4 << 19;                      \
         break;                                    \
      case 20:                                     \
         comp0 = (comp0 << 20) | (comp1 >> 12);    \
         list4 = (list4 >> 20) | (list3 << 12);    \
         comp1 = (comp1 << 20) | (comp2 >> 12);    \
         list3 = (list3 >> 20) | (list2 << 12);    \
         comp2 = (comp2 << 20) | (comp3 >> 12);    \
         list2 = (list2 >> 20) | (list1 << 12);    \
         comp3 = (comp3 << 20) | (comp4 >> 12);    \
         list1 = (list1 >> 20) | (list0 << 12);    \
         list0 = (list0 >> 20) | (newbit << 12);   \
         comp4 = comp4 << 20;                      \
         break;                                    \
      case 21:                                     \
         comp0 = (comp0 << 21) | (comp1 >> 11);    \
         list4 = (list4 >> 21) | (list3 << 11);    \
         comp1 = (comp1 << 21) | (comp2 >> 11);    \
         list3 = (list3 >> 21) | (list2 << 11);    \
         comp2 = (comp2 << 21) | (comp3 >> 11);    \
         list2 = (list2 >> 21) | (list1 << 11);    \
         comp3 = (comp3 << 21) | (comp4 >> 11);    \
         list1 = (list1 >> 21) | (list0 << 11);    \
         list0 = (list0 >> 21) | (newbit << 11);   \
         comp4 = comp4 << 21;                      \
         break;                                    \
      case 22:                                     \
         comp0 = (comp0 << 22) | (comp1 >> 10);    \
         list4 = (list4 >> 22) | (list3 << 10);    \
         comp1 = (comp1 << 22) | (comp2 >> 10);    \
         list3 = (list3 >> 22) | (list2 << 10);    \
         comp2 = (comp2 << 22) | (comp3 >> 10);    \
         list2 = (list2 >> 22) | (list1 << 10);    \
         comp3 = (comp3 << 22) | (comp4 >> 10);    \
         list1 = (list1 >> 22) | (list0 << 10);    \
         list0 = (list0 >> 22) | (newbit << 10);   \
         comp4 = comp4 << 22;                      \
         break;                                    \
      case 23:                                     \
         comp0 = (comp0 << 23) | (comp1 >> 9);     \
         list4 = (list4 >> 23) | (list3 << 9);     \
         comp1 = (comp1 << 23) | (comp2 >> 9);     \
         list3 = (list3 >> 23) | (list2 << 9);     \
         comp2 = (comp2 << 23) | (comp3 >> 9);     \
         list2 = (list2 >> 23) | (list1 << 9);     \
         comp3 = (comp3 << 23) | (comp4 >> 9);     \
         list1 = (list1 >> 23) | (list0 << 9);     \
         list0 = (list0 >> 23) | (newbit << 9);    \
         comp4 = comp4 << 23;                      \
         break;                                    \
      case 24:                                     \
         comp0 = (comp0 << 24) | (comp1 >> 8);     \
         list4 = (list4 >> 24) | (list3 << 8);     \
         comp1 = (comp1 << 24) | (comp2 >> 8);     \
         list3 = (list3 >> 24) | (list2 << 8);     \
         comp2 = (comp2 << 24) | (comp3 >> 8);     \
         list2 = (list2 >> 24) | (list1 << 8);     \
         comp3 = (comp3 << 24) | (comp4 >> 8);     \
         list1 = (list1 >> 24) | (list0 << 8);     \
         list0 = (list0 >> 24) | (newbit << 8);    \
         comp4 = comp4 << 24;                      \
         break;                                    \
      case 25:                                     \
         comp0 = (comp0 << 25) | (comp1 >> 7);     \
         list4 = (list4 >> 25) | (list3 << 7);     \
         comp1 = (comp1 << 25) | (comp2 >> 7);     \
         list3 = (list3 >> 25) | (list2 << 7);     \
         comp2 = (comp2 << 25) | (comp3 >> 7);     \
         list2 = (list2 >> 25) | (list1 << 7);     \
         comp3 = (comp3 << 25) | (comp4 >> 7);     \
         list1 = (list1 >> 25) | (list0 << 7);     \
         list0 = (list0 >> 25) | (newbit << 7);    \
         comp4 = comp4 << 25;                      \
         break;                                    \
      case 26:                                     \
         comp0 = (comp0 << 26) | (comp1 >> 6);     \
         list4 = (list4 >> 26) | (list3 << 6);     \
         comp1 = (comp1 << 26) | (comp2 >> 6);     \
         list3 = (list3 >> 26) | (list2 << 6);     \
         comp2 = (comp2 << 26) | (comp3 >> 6);     \
         list2 = (list2 >> 26) | (list1 << 6);     \
         comp3 = (comp3 << 26) | (comp4 >> 6);     \
         list1 = (list1 >> 26) | (list0 << 6);     \
         list0 = (list0 >> 26) | (newbit << 6);    \
         comp4 = comp4 << 26;                      \
         break;                                    \
      case 27:                                     \
         comp0 = (comp0 << 27) | (comp1 >> 5);     \
         list4 = (list4 >> 27) | (list3 << 5);     \
         comp1 = (comp1 << 27) | (comp2 >> 5);     \
         list3 = (list3 >> 27) | (list2 << 5);     \
         comp2 = (comp2 << 27) | (comp3 >> 5);     \
         list2 = (list2 >> 27) | (list1 << 5);     \
         comp3 = (comp3 << 27) | (comp4 >> 5);     \
         list1 = (list1 >> 27) | (list0 << 5);     \
         list0 = (list0 >> 27) | (newbit << 5);    \
         comp4 = comp4 << 27;                      \
         break;                                    \
      case 28:                                     \
         comp0 = (comp0 << 28) | (comp1 >> 4);     \
         list4 = (list4 >> 28) | (list3 << 4);     \
         comp1 = (comp1 << 28) | (comp2 >> 4);     \
         list3 = (list3 >> 28) | (list2 << 4);     \
         comp2 = (comp2 << 28) | (comp3 >> 4);     \
         list2 = (list2 >> 28) | (list1 << 4);     \
         comp3 = (comp3 << 28) | (comp4 >> 4);     \
         list1 = (list1 >> 28) | (list0 << 4);     \
         list0 = (list0 >> 28) | (newbit << 4);    \
         comp4 = comp4 << 28;                      \
         break;                                    \
      case 29:                                     \
         comp0 = (comp0 << 29) | (comp1 >> 3);     \
         list4 = (list4 >> 29) | (list3 << 3);     \
         comp1 = (comp1 << 29) | (comp2 >> 3);     \
         list3 = (list3 >> 29) | (list2 << 3);     \
         comp2 = (comp2 << 29) | (comp3 >> 3);     \
         list2 = (list2 >> 29) | (list1 << 3);     \
         comp3 = (comp3 << 29) | (comp4 >> 3);     \
         list1 = (list1 >> 29) | (list0 << 3);     \
         list0 = (list0 >> 29) | (newbit << 3);    \
         comp4 = comp4 << 29;                      \
         break;                                    \
      case 30:                                     \
         comp0 = (comp0 << 30) | (comp1 >> 2);     \
         list4 = (list4 >> 30) | (list3 << 2);     \
         comp1 = (comp1 << 30) | (comp2 >> 2);     \
         list3 = (list3 >> 30) | (list2 << 2);     \
         comp2 = (comp2 << 30) | (comp3 >> 2);     \
         list2 = (list2 >> 30) | (list1 << 2);     \
         comp3 = (comp3 << 30) | (comp4 >> 2);     \
         list1 = (list1 >> 30) | (list0 << 2);     \
         list0 = (list0 >> 30) | (newbit << 2);    \
         comp4 = comp4 << 30;                      \
         break;                                    \
      case 31:                                     \
         comp0 = (comp0 << 31) | (comp1 >> 1);     \
         list4 = (list4 >> 31) | (list3 << 1);     \
         comp1 = (comp1 << 31) | (comp2 >> 1);     \
         list3 = (list3 >> 31) | (list2 << 1);     \
         comp2 = (comp2 << 31) | (comp3 >> 1);     \
         list2 = (list2 >> 31) | (list1 << 1);     \
         comp3 = (comp3 << 31) | (comp4 >> 1);     \
         list1 = (list1 >> 31) | (list0 << 1);     \
         list0 = (list0 >> 31) | (newbit << 1);    \
         comp4 = comp4 << 31;                      \
         break;                                    \
      case 32:                                     \
         comp0 = (comp0 << 32) | (comp1 >> 0);     \
         list4 = (list4 >> 32) | (list3 << 0);     \
         comp1 = (comp1 << 32) | (comp2 >> 0);     \
         list3 = (list3 >> 32) | (list2 << 0);     \
         comp2 = (comp2 << 32) | (comp3 >> 0);     \
         list2 = (list2 >> 32) | (list1 << 0);     \
         comp3 = (comp3 << 32) | (comp4 >> 0);     \
         list1 = (list1 >> 32) | (list0 << 0);     \
         list0 = (list0 >> 32) | (newbit << 0);    \
         comp4 = comp4 << 32;                      \
         break;                                    \
      }                                            \
   newbit = 0;                                     \
}
#else // OGROPT_ALTERNATE_COMP_LEFT_LIST_RIGHT == 0
#define COMP_LEFT_LIST_RIGHT(lev, s) {             \
   int ss = 32 - s;                                \
   comp0 = (comp0 << s) | (comp1 >> ss);           \
   comp1 = (comp1 << s) | (comp2 >> ss);           \
   comp2 = (comp2 << s) | (comp3 >> ss);           \
   comp3 = (comp3 << s) | (comp4 >> ss);           \
   comp4 = comp4 << s;                             \
   list4 = (list4 >> s) | (list3 << ss);           \
   list3 = (list3 >> s) | (list2 << ss);           \
   list2 = (list2 >> s) | (list1 << ss);           \
   list1 = (list1 >> s) | (list0 << ss);           \
   list0 = (list0 >> s) | (newbit << ss);          \
   newbit = 0;                                     \
   }
#endif

/* shift by word size */
#define COMP_LEFT_LIST_RIGHT_32(lev) { \
   comp0 = comp1; comp1 = comp2; comp2 = comp3; comp3 = comp4; comp4 = 0;  \
   list4 = list3; list3 = list2; list2 = list1; list1 = list0; list0 = newbit; \
   newbit = 0; \
}
/* set the current mark and push a level to start a new mark */
#define PUSH_LEVEL_UPDATE_STATE(lev) { \
   lev->list[0] = list0; lev->list[1] = list1; lev->list[2] = list2; lev->list[3] = list3; lev->list[4] = list4;  \
   dist0 |= list0; dist1 |= list1; dist2 |= list2; dist3 |= list3; dist4 |= list4; \
   lev->comp[0] = comp0; comp0 |= dist0; \
   lev->comp[1] = comp1; comp1 |= dist1; \
   lev->comp[2] = comp2; comp2 |= dist2; \
   lev->comp[3] = comp3; comp3 |= dist3; \
   lev->comp[4] = comp4; comp4 |= dist4; \
   newbit = 1; \
   lev->cnt2 = cnt2; \
   lev->limit = limit; \
}

/* pop a level to continue work on previous mark */
#define POP_LEVEL(lev) { \
   limit = lev->limit; \
   list0 = lev->list[0], list1 = lev->list[1], list2 = lev->list[2], list3 = lev->list[3], list4 = lev->list[4]; \
   dist0 = dist0 & ~list0; dist1 = dist1 & ~list1; dist2 = dist2 & ~list2; dist3 = dist3 & ~list3; dist4 = dist4 & ~list4; \
   comp0 = lev->comp[0], comp1 = lev->comp[1], comp2 = lev->comp[2], comp3 = lev->comp[3], comp4 = lev->comp[4]; \
   newbit = 0; \
   cnt2 = lev->cnt2; \
}

/* save the local state variables */
#define SAVE_FINAL_STATE(state,lev) {   \
   lev->list[0] = list0; lev->list[1] = list1; lev->list[2] = list2; lev->list[3] = list3; lev->list[4] = list4;  \
   state->dist[0] = dist0; state->dist[1] = dist1; state->dist[2] = dist2; state->dist[3] = dist3; state->dist[4] = dist4; \
   lev->comp[0] = comp0; lev->comp[1] = comp1; lev->comp[2] = comp2; lev->comp[3] = comp3; lev->comp[4] = comp4; \
   lev->cnt2 = cnt2; \
}

#endif


/* ************************************************************************* */


static int found_one(const struct State *oState)
{
   /* confirm ruler is golomb */
   int i, j;
   const int maximum = oState->max;
   const int maximum2 = maximum >> 1;     // shouldn't this be rounded up?
   const int maxmarks = oState->maxmarks;
   const struct Level *levels = &oState->Levels[0];
   char diffs[1024]; // first 64 entries will never be used!

   // always check for buffer overruns!
   if (maximum2 >= 1024)
      return CORE_E_MEMORY;

   memset( diffs, 0, maximum2 + 1 );

   for (i = 1; i < maxmarks; i++) {
      int levelICount = levels[i].cnt2;

      for (j = 0; j < i; j++) {
           int diff = levelICount - levels[j].cnt2;

         if (2*diff <= maximum) {      /* Principle 1 */

            if (diff <= 64)
               break;     /* 2 bitmaps always tracked */

            if (diffs[diff] != 0)
               return CORE_S_CONTINUE;

            diffs[diff] = 1;
         }

      }   /* for (j = 0; j < i; j++) */

   }  /* for (i = 1; i < maxmarks; i++) */

  return CORE_S_SUCCESS;
}


/* ************************************************************************* */


static int ogr_create(void *input, int inputlen, void *state, int statelen)
{
  struct State *oState;
  struct WorkStub *workstub = (struct WorkStub *)input;
  int retval = CORE_S_OK;
  /* save STUB_E_ error codes into oState->stub_error and finish ogr_create() 
     to allow a graceful discard in case of a STUB_E_ */

  if (!input || inputlen != sizeof(struct WorkStub)) {
    return CORE_E_FORMAT;
  }

  if (((unsigned int)statelen) < sizeof(struct State)) {
    return CORE_E_FORMAT;
  }
  oState = (struct State *)state;
  if (!oState) {
    return CORE_E_MEMORY;
  }

  memset(oState, 0, sizeof(struct State));

  oState->maxmarks = workstub->stub.marks;
  oState->maxdepth = oState->maxmarks-1;

  if (((unsigned int)oState->maxmarks) > (sizeof(OGR_length)/sizeof(OGR_length[0]))) {
    return CORE_E_FORMAT;
  }

  oState->max = OGR_length[oState->maxdepth];

  /* Note, marks are labled 0, 1...  so mark @ depth=1 is 2nd mark */
  oState->half_depth2 = oState->half_depth = ((oState->maxmarks+1) >> 1) - 1;
  if (!(oState->maxmarks % 2)) oState->half_depth2++;  /* if even, use 2 marks */

  /* Simulate GVANT's "KTEST=1" */
  oState->half_depth--;
  oState->half_depth2++;
  /*------------------
  Since:  half_depth2 = half_depth+2 (or 3 if maxmarks even) ...
  We get: half_length2 >= half_length + 3 (or 6 if maxmarks even)
  But:    half_length2 + half_length <= max-1    (our midpoint reduction)
  So:     half_length + 3 (6 if maxmarks even) + half_length <= max-1
  ------------------*/
                               oState->half_length = (oState->max-4) >> 1;
  if ( !(oState->maxmarks%2) ) oState->half_length = (oState->max-7) >> 1;

  oState->depth = 1;
  
#ifdef OGROPT_NEW_CHOOSEDAT
  /* would we choose values somewhere behind the precalculated values from 
     ogr_choose_dat2 ? 
     choose(x,y) will be called from middle and right segment for the 
     remaining ruler, not including the current mark, so we can subtract 1 */
  if (oState->maxdepth - oState->half_depth - 1 > CHOOSE_MAX_DEPTH)
    oState->stub_error |= STUB_E_MARKS;  
#endif

#if ((OGROPT_ALTERNATE_CYCLE == 1) || (OGROPT_ALTERNATE_CYCLE == 2))

  {
    int i, n;
    struct Level *lev = &oState->Levels[0];
    SETUP_TOP_STATE(oState,lev);
    lev++;
    n = workstub->worklength;

    if (n < workstub->stub.length) {
      n = workstub->stub.length;
    }

    if (n > STUB_MAX) {
      return CORE_E_FORMAT;
    }

    const int oStateMax = oState->max;
    const int oStateMaxDepthM1 = oState->maxdepth;
    const int oStateHalfDepth2 = oState->half_depth2;
    const int oStateHalfDepth = oState->half_depth;
    const int oStateHalfLength = oState->half_length;
    int oStateDepth = oState->depth;

    for (i = 0; i < n; i++) {

     #if (OGROPT_ALTERNATE_CYCLE == 2)
       U dist0 = VEC_TO_INT(distV0,3);
     #endif

     int maxMinusDepth = oStateMaxDepthM1 - oStateDepth;

      if (oStateDepth <= oStateHalfDepth2) {
        if (oStateDepth <= oStateHalfDepth) {
          limit = oStateMax - OGR_length[maxMinusDepth];
          limit = (limit < oStateHalfLength) ? limit : oStateHalfLength;
        } else {
          limit = oStateMax - choose(dist0 >> ttmDISTBITS, maxMinusDepth);
        int tempLimit = oStateMax - oState->Levels[oStateHalfDepth].cnt2-1;
          limit = (limit < tempLimit) ? limit : tempLimit;
        }
      } else {
        limit = oStateMax - choose(dist0 >> ttmDISTBITS, maxMinusDepth);
      }

      int s = workstub->stub.diffs[i];
      //dump(oStateDepth, lev, 0);

// The following line is the same as:  oState->Levels[i+1].cnt2 = oState->Levels[i].cnt2 + s;
//   lev->cnt2 = lev[-1].cnt2 + s;
// because:  lev == oState->Levels[i+1]
// AND because we replace the count below, this assignment isn't needed at all!

      cnt2 += s;

      while (s>=32) {
        COMP_LEFT_LIST_RIGHT_32(lev);
        s -= 32;
      }

      COMP_LEFT_LIST_RIGHT(lev, s);
      PUSH_LEVEL_UPDATE_STATE(lev);
      lev++;
      oStateDepth++;

    }

    SAVE_FINAL_STATE(oState,lev);
    oState->depth = oStateDepth - 1; // externally visible depth is one less than internal
  }

#else 
  #error no core specific ogr_create() code
#endif

  oState->startdepth = workstub->stub.length;

#ifdef OGR_WINDOW
   oState->wind = oState->depth;
   oState->turn = 0;
#endif
#ifdef OGR_PROFILE
   oState->prof.hd = 0;
   oState->prof.hd2 = 0;
   oState->prof.ghd = 0;
   oState->prof.lt16 = 0;
   oState->prof.lt32 = 0;
   oState->prof.ge32 = 0;
   oState->prof.fo = 0;
   oState->prof.push = 0;
#endif
#ifdef OGR_DEBUG
  printf("sizeof      = %d\n", sizeof(struct State));
  printf("max         = %d\n", oState->max);
  printf("maxmarks    = %d\n", oState->maxmarks);
  printf("maxdepth    = %d\n", oState->maxdepth);
  printf("half_length = %d\n", oState->half_length);
  printf("half_depth  = %d\n", oState->half_depth);
  printf("half_depth2 = %d\n", oState->half_depth2);
  {
    int i;
    printf("marks       = ");
     for (i = 1; i <= oState->depth; i++) {
      printf("%d ", oState->markpos[i]-oState->markpos[i-1]);
    }
    printf("\n");
  }
#endif

  return retval;
}


/* ************************************************************************* */


static int ogr_cycle(void *state, int *pnodes, int with_time_constraints)
{
   struct State *oState = (struct State *)state;
   int depth = oState->depth+1;      /* the depth of recursion */
   struct Level *lev = &oState->Levels[depth];
   int nodes = 0;
   int nodeslimit = *pnodes;
    const int oStateMax = oState->max;
    const int oStateMaxDepthM1 = oState->maxdepth;
    const int oStateHalfDepth2 = oState->half_depth2;
    const int oStateHalfDepth = oState->half_depth;
    const int oStateHalfLength = oState->half_length;
   struct Level *levHalfDepth = &oState->Levels[oStateHalfDepth];
   struct Level *levMaxM1 = &oState->Levels[oStateMaxDepthM1];
   int retval = CORE_S_CONTINUE;

   SETUP_TOP_STATE(oState,lev);

   for (;;) {

   //continue:
      #if (OGROPT_ALTERNATE_CYCLE == 2)
         U dist0 = VEC_TO_INT(distV0,3);
      #endif

      int maxMinusDepth = oStateMaxDepthM1 - depth;

      if (with_time_constraints) { /* if (...) is optimized away if unused */
         #if !defined(OGROPT_IGNORE_TIME_CONSTRAINT_ARG)
         if (nodes >= nodeslimit) {
           break;
         }  
         #endif  
      }

      if (depth <= oStateHalfDepth2) {
         if (depth <= oStateHalfDepth) {
         
            if (nodes >= nodeslimit) {
               break;
            }
            
            limit = oStateMax - OGR_length[maxMinusDepth];
            limit = (limit < oStateHalfLength) ? limit : oStateHalfLength;
         } else {
            limit = oStateMax - choose(dist0 >> ttmDISTBITS, maxMinusDepth);
            int tempLimit = oStateMax - levHalfDepth->cnt2 - 1;
            limit = (limit < tempLimit) ? limit : tempLimit;
         }
      } else {
         limit = oStateMax - choose(dist0 >> ttmDISTBITS, maxMinusDepth);
      }

      nodes++;

      /* Find the next available mark location for this level */

   stay:
      #if (OGROPT_ALTERNATE_CYCLE == 2)
         U comp0 = VEC_TO_INT(compV0,3);
      #endif
      if (comp0 < 0xfffffffe) {
         int s = LOOKUP_FIRSTBLANK( comp0 );
         if ((cnt2 += s) > limit)   goto up; /* no spaces left */
         COMP_LEFT_LIST_RIGHT(lev, s);
      } else { /* s>32 */
         U comp = comp0;
         if ((cnt2 += 32) > limit)  goto up; /* no spaces left */
         COMP_LEFT_LIST_RIGHT_32(lev)
         if (comp == 0xffffffff)    goto stay;
      }

      /* New ruler? */
      if (depth == oStateMaxDepthM1) {
         levMaxM1->cnt2 = cnt2;       /* not placed yet into list arrays! */
         retval = found_one(oState);
         if (retval != CORE_S_CONTINUE) {
            break;
         }
         goto stay;
      }

      /* Go Deeper */
      PUSH_LEVEL_UPDATE_STATE(lev);
      lev++;
      depth++;
      continue;

   up:
      lev--;
      depth--;
      POP_LEVEL(lev);
      if (depth <= oState->startdepth) {
         retval = CORE_S_OK;
         break;
      }
      goto stay; /* repeat this level till done */
   }

   SAVE_FINAL_STATE(oState,lev);
   /* oState->Nodes += nodes; (unused, count is returned through *pnodes) */
   oState->depth = depth-1;

   *pnodes = nodes;

   return retval;
}

#endif

# distributed.net client makefile for VC
# see http://www.distributed.net/
#
# $Id: makefile.vc,v 1.83.2.13 2004/08/14 23:40:18 kakace Exp $
#

BASENAME = dnetc
OUTPUTPATH = output
COMMONPATH = common
RC564SRCPATH = rc5
RC572SRCPATH = rc5-72
DESSRCPATH = des
OGRSRCPATH = ogr
CSCSRCPATH = csc
PLATSRCPATH = plat/win


#HAVE_RC5_64_CORES=1
HAVE_RC5_72_CORES=1
#HAVE_DES_CORES=1
#HAVE_CSC_CORES=1
#HAVE_OGR_CORES=1
HAVE_OGR_PASS2=1

# --------------------------------------------

!ifndef PROCESSOR_ARCHITECTURE
PROCESSOR_ARCHITECTURE = x86
!endif # default to x86 (assume building on win9x)

!if "$(PROCESSOR_ARCHITECTURE)" == "ALPHA"
OPTS_CC_CPU = -DNTALPHA 
OPTS_M_PLAT = ALPHA
OPTS_AS = -Gy -Zi -O1
CHIPSRCPATH = plat/$(PROCESSOR_ARCHITECTURE)
!elseif "$(PROCESSOR_ARCHITECTURE)" == "x86"
OPTS_CC_CPU = 
OPTS_M_PLAT = IX86
CHIPSRCPATH = plat/$(PROCESSOR_ARCHITECTURE)
#EXECOMPRESSOR = upx.exe -9 -qq --compress-resources=0
#EXECOMPRESSOR2 =
EXECOMPRESSOR = pecompact.exe 
EXECOMPRESSOR2 = /A /X
!elseif "$(PROCESSOR_ARCHITECTURE)" == "AMD64"
OPTS_CC_CPU =
OPTS_M_PLAT = AMD64
CHIPSRCPATH = plat/$(PROCESSOR_ARCHITECTURE)
!else
!error unrecognized PROCESSOR_ARCHITECTURE found in the environment
!endif

!ifdef DEBUG
OPTS_CC_DEBUG = -MTd -Zi -DDEBUG -Od
OPTS_LINK_DEBUG = /debug /pdb:none /pdbtype:consolidate
#OPTS_LINK_DEBUG = /debug /pdb:dnetc.pdb
!else
OPTS_CC_DEBUG = -MT -DNDEBUG
OPTS_LINK_DEBUG = /release
!endif

# --------------------------------------------

# a little blurb about options
#
# -Gs<num> == control stack probes (DevStudio docs)
#          == disable stack checks ("cl -?")
# -Gf == eliminates duplicate strings
# -Gy == enable function-level linking
# -GR- ==disable RTTI
# -GX- ==disable synchronous exception handling
# -GA == optimize code for windows application
#
# -Og == global optimizations
# -Oi == intrinsic functions
# -Os == favor small code
# -Ot == favor fast code
# -Oy == omit frame pointer
# -Oa == assume no aliasing
# -Ob0 == disable inline function expansion
# -Ob1 == only "inline" or "__inline" functions will be expanded
# -Ob2 == any suitable functions will be expanded
#
# -O1 == -Og     -Os -Oy -Ob1 -Gs -Gf -Gy
# -O2 == -Og -Oi -Ot -Oy -Ob1 -Gs -Gf -Gy
# -Ox == -Og -Oi -Ot -Oy -Ob1 -Gs

OPTS_MSVC = -nologo -D__WIN32__ \
            -W4 -WX -GR- -GX- -GA -GF -GM -Gy \
            -D_M_$(OPTS_M_PLAT) $(OPTS_CC_CPU) $(OPTS_CC_DEBUG)
	    ## *** +++++++++++++++++++++++++++++++++++++++++
OPTS_LIBS = advapi32.lib user32.lib kernel32.lib gdi32.lib
            ## *** SOMETHING IS BROKEN IF YOU NEED MORE
	    ## *** THAN advapi+user32+kernel32+gdi32 ***
	    ## *** +++++++++++++++++++++++++++++++++++++++++
OPTS_LINK = /nologo /incremental:no \
            /machine:$(OPTS_M_PLAT) $(OPTS_LINK_DEBUG)
OPTS_RC   = -d_Windows -d_M_$(OPTS_M_PLAT)


!if "$(PROCESSOR_ARCHITECTURE)" == "AMD64"
OPTS_MSVC = $(OPTS_MSVC:-GM=)
OPTS_MSVC = $(OPTS_MSVC:-WX=)
!else
OPTS_LINK = $(OPTS_LINK) /warn:1 
!endif


# --------------------------------------------

all: $(BASENAME).exe $(BASENAME).com $(BASENAME).scr

# --------------------------------------------

RES_FILE = $(OUTPUTPATH)/$(BASENAME).res
RC_FILE = $(PLATSRCPATH)/w32cons.rc

# --------------------------------------------

COMMON_OBJS =                        \
        $(OUTPUTPATH)/base64.obj     \
        $(OUTPUTPATH)/bench.obj      \
        $(OUTPUTPATH)/buffbase.obj   \
        $(OUTPUTPATH)/checkpt.obj    \
        $(OUTPUTPATH)/clicdata.obj   \
        $(OUTPUTPATH)/client.obj     \
        $(OUTPUTPATH)/clievent.obj   \
        $(OUTPUTPATH)/cliident.obj   \
        $(OUTPUTPATH)/clirun.obj     \
        $(OUTPUTPATH)/clitime.obj    \
        $(OUTPUTPATH)/cmdline.obj    \
        $(OUTPUTPATH)/confmenu.obj   \
        $(OUTPUTPATH)/confopt.obj    \
        $(OUTPUTPATH)/confrwv.obj    \
        $(OUTPUTPATH)/console.obj    \
        $(OUTPUTPATH)/coremem.obj    \
        $(OUTPUTPATH)/core_rc5.obj   \
        $(OUTPUTPATH)/core_des.obj   \
        $(OUTPUTPATH)/core_r72.obj   \
        $(OUTPUTPATH)/core_csc.obj   \
        $(OUTPUTPATH)/core_ogr.obj   \
        $(OUTPUTPATH)/cpucheck.obj   \
        $(OUTPUTPATH)/disphelp.obj   \
        $(OUTPUTPATH)/iniread.obj    \
        $(OUTPUTPATH)/logstuff.obj   \
        $(OUTPUTPATH)/lurk.obj       \
        $(OUTPUTPATH)/mail.obj       \
        $(OUTPUTPATH)/modereq.obj    \
        $(OUTPUTPATH)/netbase.obj    \
        $(OUTPUTPATH)/netconn.obj    \
        $(OUTPUTPATH)/pathwork.obj   \
        $(OUTPUTPATH)/pollsys.obj    \
        $(OUTPUTPATH)/probfill.obj   \
        $(OUTPUTPATH)/problem.obj    \
        $(OUTPUTPATH)/projdata.obj   \
        $(OUTPUTPATH)/probman.obj    \
        $(OUTPUTPATH)/random.obj     \
        $(OUTPUTPATH)/selcore.obj    \
        $(OUTPUTPATH)/selftest.obj   \
        $(OUTPUTPATH)/setprio.obj    \
        $(OUTPUTPATH)/triggers.obj   \
        $(OUTPUTPATH)/util.obj
OPTS_MSVC = $(OPTS_MSVC) -I$(COMMONPATH) -DLURK
!if exist( "$(COMMONPATH:/=\)\buffpriv.cpp" )
COMMON_OBJS = $(COMMON_OBJS)         \
        $(OUTPUTPATH)/buffupd.obj    \
        $(OUTPUTPATH)/buffpriv.obj   \
        $(OUTPUTPATH)/scram.obj
!else
COMMON_OBJS = $(COMMON_OBJS)         \
        $(OUTPUTPATH)/buffpub.obj
!endif

# --------------------------------------------

PLAT_OBJS =                          \
        $(OUTPUTPATH)/w32cons.obj    \
        $(OUTPUTPATH)/w32pre.obj     \
        $(OUTPUTPATH)/w32ras.obj     \
        $(OUTPUTPATH)/w32sock.obj    \
        $(OUTPUTPATH)/w32ss.obj      \
        $(OUTPUTPATH)/w32svc.obj     \
        $(OUTPUTPATH)/w32exe.obj     \
        $(OUTPUTPATH)/w32ini.obj     \
        $(OUTPUTPATH)/w32snapp.obj   \
        $(OUTPUTPATH)/w32util.obj
!if "$(PROCESSOR_ARCHITECTURE)" == "x86"
# PLAT_OBJS = $(PLAT_OBJS) $(OUTPUTPATH)/w32x86.obj
!endif
!if "$(PROCESSOR_ARCHITECTURE)" == "AMD64"
PLAT_OBJS = $(PLAT_OBJS) $(OUTPUTPATH)/strcmpi.obj
!endif


OPTS_MSVC = $(OPTS_MSVC) -I$(PLATSRCPATH) 

# --------------------------------------------

SCR_OBJS =                           \
        $(OUTPUTPATH)/w32ss.obj      \
        $(OUTPUTPATH)/w32ssb.obj     \
        $(OUTPUTPATH)/w32exe.obj     \
        $(OUTPUTPATH)/w32ini.obj     \
        $(OUTPUTPATH)/w32util.obj

!if "$(PROCESSOR_ARCHITECTURE)" == "AMD64"
SCR_OBJS = $(SCR_OBJS) $(OUTPUTPATH)/strcmpi.obj
!endif


CUI_OBJS =                           \
        $(OUTPUTPATH)/w32cuis.obj

# --------------------------------------------

!if "$(PROCESSOR_ARCHITECTURE)" == "ALPHA"
CHIP_OBJS =
!elseif "$(PROCESSOR_ARCHITECTURE)" == "x86"
CHIP_OBJS = $(OUTPUTPATH)/x86ident.obj       \
            $(OUTPUTPATH)/x86features.obj    \
            $(OUTPUTPATH)/x86htcount.obj
!elseif "$(PROCESSOR_ARCHITECTURE)" == "AMD64"
####CHIP_OBJS = $(OUTPUTPATH)/x86ident.obj
!endif

# --------------------------------- RC5-64 -------------------------

!ifndef HAVE_RC5_64_CORES
RC5_64_OBJS =
!elseif "$(PROCESSOR_ARCHITECTURE)" == "ALPHA"
RC5_64_OBJS =                        \
        $(OUTPUTPATH)/rc5-alpha-nt.obj
OPTS_MSVC = $(OPTS_MSVC) -DHAVE_RC5_64_CORES
!elseif "$(PROCESSOR_ARCHITECTURE)" == "x86"
RC5_64_OBJS =                        \
        $(OUTPUTPATH)/brf-p5.obj     \
        $(OUTPUTPATH)/rg-k5.obj      \
        $(OUTPUTPATH)/rg-k6.obj      \
        $(OUTPUTPATH)/rg-p6.obj      \
        $(OUTPUTPATH)/jp-mmx.obj     \
        $(OUTPUTPATH)/rg-486.obj     \
        $(OUTPUTPATH)/brf-smc.obj    \
        $(OUTPUTPATH)/rg-6x86.obj    \
        $(OUTPUTPATH)/hb-k7.obj      \
        $(OUTPUTPATH)/ak-p7.obj	
OPTS_MSVC = $(OPTS_MSVC) -DSMC -DHAVE_RC5_64_CORES
!else
!error No RC5-64 cores for this architecture.
!endif

# --------------------------------- RC5-72 -------------------------

!ifndef HAVE_RC5_72_CORES
RC5_72_OBJS =
!elseif "$(PROCESSOR_ARCHITECTURE)" == "AMD64"
RC5_72_OBJS = \
        $(OUTPUTPATH)/r72-snjl.obj \
        $(OUTPUTPATH)/r72ansi1.obj \
        $(OUTPUTPATH)/r72ansi2.obj \
        $(OUTPUTPATH)/r72ansi4.obj
OPTS_MSVC = $(OPTS_MSVC) -DHAVE_RC5_72_CORES
!elseif "$(PROCESSOR_ARCHITECTURE)" == "x86"
RC5_72_OBJS =                        \
        $(OUTPUTPATH)/r72-ses1.obj   \
        $(OUTPUTPATH)/r72-ses2.obj   \
        $(OUTPUTPATH)/r72-dg2.obj    \
        $(OUTPUTPATH)/r72-dg3.obj    \
        $(OUTPUTPATH)/r72-dg3a.obj   \
        $(OUTPUTPATH)/r72-ss2.obj    \
        $(OUTPUTPATH)/r72-go2.obj    \
        $(OUTPUTPATH)/r72-sgp3.obj
OPTS_MSVC = $(OPTS_MSVC) -DHAVE_RC5_72_CORES
!else
!error No RC5-72 cores for this architecture.
!endif

# --------------------------------- DES ----------------------------

!ifndef HAVE_DES_CORES
DES_OBJS =
!elseif "$(PROCESSOR_ARCHITECTURE)" == "ALPHA"
DES_OBJS =                                   \
        $(OUTPUTPATH)/convdes.obj            \
        $(OUTPUTPATH)/des-slice-dworz.obj    \
        $(OUTPUTPATH)/deseval-dworz3.obj
OPTS_MSVC = $(OPTS_MSVC) -DHAVE_DES_CORES -DKWAN -DDWORZ
!elseif "$(PROCESSOR_ARCHITECTURE)" == "x86"
DES_OBJS =                                   \
        $(OUTPUTPATH)/convdes.obj            \
        $(OUTPUTPATH)/bbdeslow.obj           \
        $(OUTPUTPATH)/bdeslow.obj            \
        $(OUTPUTPATH)/des-slice.obj          \
        $(OUTPUTPATH)/des-slice-meggs.obj    \
        $(OUTPUTPATH)/des-x86.obj            \
        $(OUTPUTPATH)/deseval.obj            \
#       $(OUTPUTPATH)/deseval-meggs3-mmx.gcc \
        $(OUTPUTPATH)/deseval-mmx.obj        \
        $(OUTPUTPATH)/p1bdespro.obj          \
        $(OUTPUTPATH)/p2bdespro.obj          \
        $(OUTPUTPATH)/sboxes-kwan4.obj       \
#       $(OUTPUTPATH)/sboxes-mmx.obj
OPTS_MSVC = $(OPTS_MSVC) -DHAVE_DES_CORES -DMMX_BITSLICER -DMEGGS -DKWAN 
!else
!error No DES cores for this architecture.
!endif

# --------------------------------- CSC ----------------------------

!ifndef HAVE_CSC_CORES
CSC_OBJS =
!elseif "$(PROCESSOR_ARCHITECTURE)" == "ALPHA"
CSC_OBJS =                           \
        $(OUTPUTPATH)/convcsc.obj    \
        $(OUTPUTPATH)/csc-1k.obj     \
        $(OUTPUTPATH)/csc-1k-i.obj   \
        $(OUTPUTPATH)/csc-6b.obj     \
        $(OUTPUTPATH)/csc-6b-i.obj   \
        $(OUTPUTPATH)/csc-common.obj
OPTS_MSVC = $(OPTS_MSVC) -I$(CSCSRCPATH) -DHAVE_CSC_CORES
!elseif "$(PROCESSOR_ARCHITECTURE)" == "x86"
CSC_OBJS =                           \
         $(OUTPUTPATH)/convcsc.obj   \
         $(OUTPUTPATH)/csc-1k.obj    \
         $(OUTPUTPATH)/csc-1k-i.obj  \
         $(OUTPUTPATH)/csc-6b.obj    \
         $(OUTPUTPATH)/csc-6b-i.obj  \
         $(OUTPUTPATH)/csc-comm.obj  \
         $(OUTPUTPATH)/csc-mmx.obj
OPTS_MSVC = $(OPTS_MSVC) -DHAVE_CSC_CORES
!else
!error No CSC cores for this architecture.
!endif

# --------------------------------- OGR ----------------------------

!if !defined(HAVE_OGR_CORES) && !defined(HAVE_OGR_PASS2)
OGR_OBJS =
!elseif "$(PROCESSOR_ARCHITECTURE)" == "ALPHA"
OGR_OBJS =                           \
        $(OUTPUTPATH)/ogr.obj        \
        $(OUTPUTPATH)/ogr_dat.obj    \
        $(OUTPUTPATH)/ogr_sup.obj
OPTS_MSVC = $(OPTS_MSVC) -I$(OGRSRCPATH)
!elseif "$(PROCESSOR_ARCHITECTURE)" == "AMD64"
OGR_OBJS =                           \
        $(OUTPUTPATH)/ogr.obj      \
        $(OUTPUTPATH)/ogr_dat.obj    \
        $(OUTPUTPATH)/ogr_sup.obj
OPTS_MSVC = $(OPTS_MSVC) -I$(OGRSRCPATH)
!elseif "$(PROCESSOR_ARCHITECTURE)" == "x86"
OGR_OBJS =                           \
        $(OUTPUTPATH)/ogr-a.obj      \
        $(OUTPUTPATH)/ogr-b.obj      \
        $(OUTPUTPATH)/ogr_dat.obj    \
        $(OUTPUTPATH)/ogr_sup.obj
OPTS_MSVC = $(OPTS_MSVC) -I$(OGRSRCPATH)
!else
!error No OGR cores for this architecture.
!endif


!ifdef HAVE_OGR_CORES
OPTS_MSVC = $(OPTS_MSVC) -DHAVE_OGR_CORES
!endif
!ifdef HAVE_OGR_PASS2
OPTS_MSVC = $(OPTS_MSVC) -DHAVE_OGR_PASS2
!endif

# --------------------------------------------

VC_CHECK = $(OUTPUTPATH)/bltwith.vc
#ensure that vc, watcom and bcc objs don't collide

$(VC_CHECK):
        @-del $(OUTPUTPATH:/=\)\*.o?? $(RES_FILE:/=\)
        @echo moo > $(VC_CHECK:/=\)

# --------------------------------------------

!if "$(PROCESSOR_ARCHITECTURE)" == "ALPHA"
{$(RC564SRCPATH)/alpha}.s{$(OUTPUTPATH)}.obj:
        asaxp $(OPTS_AS) -Fo$@ $<

{$(DESSRCPATH)/alpha-asm}.s{$(OUTPUTPATH)}.obj:
        asaxp $(OPTS_AS) -Fo$@ $<

{$(DESSRCPATH)/alpha-asm}.cpp{$(OUTPUTPATH)}.obj::
        cl -c -Ox $(OPTS_MSVC) -Fo$(OUTPUTPATH)\ $<

{$(CSCSRCPATH)}.cpp{$(OUTPUTPATH)}.obj::
        cl -c -Ox $(OPTS_MSVC) -Fo$(OUTPUTPATH)\ $<

!elseif "$(PROCESSOR_ARCHITECTURE)" == "AMD64"

{$(RC572SRCPATH)/ansi}.cpp{$(OUTPUTPATH)}.obj:
        cl -c -O2 $(OPTS_MSVC) -Fo$(OUTPUTPATH)\ $<

{$(RC572SRCPATH)/amd64}.asm{$(OUTPUTPATH)}.obj:
        yasm -a x86 -m amd64 -o $(@:/=\) -f win32 -D _WINDOWS -I $(RC572SRCPATH:/=\)\amd64\ $(**:/=\)

{$(CHIPSRCPATH)}.asm{$(OUTPUTPATH)}.obj:
        yasm -a x86 -m amd64 -o $(@:/=\) -f win32 -D _WINDOWS $(**:/=\)


!elseif "$(PROCESSOR_ARCHITECTURE)" == "x86"

{$(CHIPSRCPATH)}.asm{$(OUTPUTPATH)}.obj:
        nasmw -o $(@:/=\) -f win32 -i $(CHIPSRCPATH:/=\) $(**:/=\)

{$(RC572SRCPATH)/x86}.asm{$(OUTPUTPATH)}.obj:
        nasmw -o $(@:/=\) -f win32 -i $(RC572SRCPATH:/=\)\x86\ $(**:/=\)

{$(RC564SRCPATH)/x86}.asm{$(OUTPUTPATH)}.obj:
        nasmw -o $(@:/=\) -f win32 -i $(RC564SRCPATH:/=\)\x86\ $(**:/=\)

#{$(DESSRCPATH)/x86}.asm{$(OUTPUTPATH)}.obj:
#        tasm32 /t /m /ml /i$(DESSRCPATH:/=\)\x86 $(**:/=\), $(@:/=\)

{$(DESSRCPATH)/x86}.asm{$(OUTPUTPATH)}.obj:
        nasmw -o $(@:/=\) -f win32 -i $(DESSRCPATH:/=\)\x86\ $(**:/=\)

{$(CSCSRCPATH)/x86}.asm{$(OUTPUTPATH)}.obj:
        nasmw -o $(@:/=\) -f win32 -i $(CSCSRCPATH:/=\)\x86\ $(**:/=\)

{$(OGRSRCPATH)/x86}.asm{$(OUTPUTPATH)}.obj:
        nasmw -o $(@:/=\) -f win32 -i $(OGRSRCPATH:/=\)\x86\ $(**:/=\)

{$(OGRSRCPATH)/x86}.cpp{$(OUTPUTPATH)}.obj::
        cl -c $(OPTS_MSVC) -Ox -Fo$(OUTPUTPATH)\ $<

!endif

{$(RC572SRCPATH)/ansi}.cpp{$(OUTPUTPATH)}.obj::
        cl -c -O2 $(OPTS_MSVC) -Fo$(OUTPUTPATH)\ $<

{$(DESSRCPATH)}.cpp{$(OUTPUTPATH)}.obj::
        cl -c -Ox $(OPTS_MSVC) -Fo$(OUTPUTPATH)\ $<

{$(OGRSRCPATH)/ansi}.cpp{$(OUTPUTPATH)}.obj::
        cl -c -Ox $(OPTS_MSVC) -Fo$(OUTPUTPATH)\ $<

{$(PLATSRCPATH)}.cpp{$(OUTPUTPATH)}.obj::
        cl -c -Oxs $(OPTS_MSVC) -Fo$(OUTPUTPATH)\ $<

{$(PLATSRCPATH)}.c{$(OUTPUTPATH)}.obj::
        cl -c -Ox -Zl $(OPTS_MSVC) -Fo$(OUTPUTPATH)\ $<

{$(COMMONPATH)}.cpp{$(OUTPUTPATH)}.obj::
        cl -c -O2 $(OPTS_MSVC) -Fo$(OUTPUTPATH)\ $<

$(RES_FILE):    $(RC_FILE)
        rc  -i $(OPTS_RC) -I$(COMMONPATH) -fo$@ $(**:/=\)

# --------------------------------------------

# the screensaver's 4.0 tag will be adjusted to 3.10 by the _client_ if running on a 3.x platform
$(BASENAME).scr: $(VC_CHECK) $(SCR_OBJS) $(RES_FILE)
        link $(OPTS_LINK) /SUBSYSTEM:WINDOWS,4.00 /OUT:$(BASENAME).scr $(OPTS_LIBS) $(SCR_OBJS) $(RES_FILE) 
!ifdef EXECOMPRESSOR
        $(EXECOMPRESSOR) $(BASENAME).scr $(EXECOMPRESSOR2)
!endif


$(BASENAME).com: $(VC_CHECK) $(CUI_OBJS) 
        link $(OPTS_LINK) /SUBSYSTEM:CONSOLE,3.10 /OUT:$(BASENAME).com /NODEFAULTLIB $(OPTS_LIBS) $(CUI_OBJS)
!ifdef EXECOMPRESSOR
        $(EXECOMPRESSOR) $(BASENAME).com $(EXECOMPRESSOR2)
!endif


$(BASENAME).exe: $(VC_CHECK) $(PLAT_OBJS) $(COMMON_OBJS) $(CHIP_OBJS) $(RC5_64_OBJS) $(RC5_72_OBJS) $(DES_OBJS) $(OGR_OBJS) $(CSC_OBJS) $(RES_FILE)
        link $(OPTS_LINK) /SUBSYSTEM:WINDOWS,3.10 /OUT:$(BASENAME).exe /MAP:$(BASENAME).map $(OPTS_LIBS) $(PLAT_OBJS) $(COMMON_OBJS) $(CHIP_OBJS) $(RC5_64_OBJS) $(RC5_72_OBJS) $(DES_OBJS) $(OGR_OBJS) $(CSC_OBJS) $(RES_FILE)
!ifdef EXECOMPRESSOR
        $(EXECOMPRESSOR) $(BASENAME).exe $(EXECOMPRESSOR2)
!endif

# --------------------------------------------

clean:
        -del $(OUTPUTPATH:/=\)\*.o?? $(RES_FILE:/=\)

superclean: clean
        -del $(BASENAME).map $(BASENAME).exe $(BASENAME).scr $(BASENAME).com $(BASENAME).ini buff-in.* buff-out.*

rebuild: clean all

# --------------------------------------------

makezip: $(BASENAME).exe $(BASENAME).com $(BASENAME).scr docs/readme.1st docs/readme.win32.html docs/dnetc.txt docs/CHANGES.txt
	zip dnetcXXX-win32-x86.zip $**
!if "$(PROCESSOR_ARCHITECTURE)" == "AMD64"
	FOR /F "usebackq tokens=3" %i IN (`findstr /r /c:"#define CLIENT_BUILD_FRAC[^_]" common\version.h`) DO move /y dnetcXXX-win32-x86.zip dnetc%i-win64-amd64.zip
!else
	FOR /F "usebackq tokens=3" %i IN (`findstr /r /c:"#define CLIENT_BUILD_FRAC[^_]" common\version.h`) DO move /y dnetcXXX-win32-x86.zip dnetc%i-win32-x86.zip
!endif



 distributed.net client for ATI FireStream-compatible GPUs
 document revision $Id: readme.stream,v 1.2 2009/02/23 00:05:19 andreasb Exp $

 Welcome to the distributed.net client.

 This document covers information specific to the client for the ATI
 FireStream-capable video card GPU. Refer to other enclosed documentation or
 browse the online FAQ at <http://faq.distributed.net/> for
 non-platform-specific documentation.

    1.0  ATI FireStream specific notes
    2.0  Prerequisites
    3.0  Getting started
    4.0  Troubleshooting and Known issues

 1.0  ATI FireStream specific notes ------------------------------------

    This client requires ATI FireStream-capable hardware and appropriate
    drivers to be installed.  For a list of GPU hardware that supports
    FireStream, see <http://en.wikipedia.org/wiki/FireStream#Hardware> 

    When installing the FireStream drivers and toolkit, be sure to download
    the latest version, currently this is Beta 1.3.0.  Visit:
    <http://ati.amd.com/technology/streamcomputing/sdkdwnld.html>

    You will need to obtain both the SDK and the FireStream Driver for your
    kernel. {Linux}

    At the moment, our FireStream clients only provide support for RC5-72.
    Due to the nature of OGR, it is difficult to parallelize in a way
    that can make use of the FireStream architecture.

    Our FireStream clients also only execute crunchers on the GPU.  In order
    to utilize the CPUs on your computer, you will need to download
    and run another instance of the standard client from a separate
    subdirectory.


 2.0  Prerequisites -------------------------------------------------

    On a Linux host there are several requirements that need to be met
    to run the FireStream client.

    1) The FireStream kernel module must be downloaded and built against
       your running kernel's sources.  This driver will be called "fglrx".

       NOTE: This is the same name of the standard Radeon driver, and it
             WILL REPLACE the Radeon drivers from ATI.  

       This kernel module provides run time hook-ins for the FireStream 
       libraries, and the Radeon drivers do not.  This will also replace
       your X/Xorg drivers.

    2) The FireStream kernel module must be loaded.  Once the driver is
       loaded, X/Xorg can be started.

    3) The AMD/ATI Stream SDK or runtime libraries must be installed on
       the system.  The installation notes can be found at:
       <http://www2.ati.com/sdkdwnld/readme_install_sdk_32.txt>
       <http://www2.ati.com/sdkdwnld/readme_install_sdk_64.txt>
       For a non-RPM based system, {Slackware, or source builds 
       instructions on how to install these are below}

    4) X/Xorg must be running.  Due to some reason which is not obvious 
       to me, the only way to connect to the resources of the card is 
       through a combination of the X/Xorg drivers and the kernel module.

       NOTE: The driver in use also MUST be fglrx from the amdstream 
             drivers from AMD/ATI.
       NOTE: The primary interface for X/Xorg MUST be the card you want
             to use as a stream device.  The client doesn't support 
             Crossfire or multi-GPU yet.

 3.0  Getting started ------------------------------------------------
 
    Just unpack/unzip/untar the client in a directory of your choice and 
    fire it up.

    If you have never run the client before, it will initiate the
    menu-driven configuration. Save and quit when done.

    Then, simply restart the client. From that point on it will use the 
    saved configuration.
    
    The configuration options are fairly self-explanatory and can be run
    at any time by starting the client with the '-config' option.
    A list of command line options is available by starting the client 
    with '-help' or '--help'.

    A complete step-by-step guide to running your first client is 
    available at <http://www.distributed.net/docs/tutor_clients.php>

 4.0  Troubleshooting and Known issues ------------------------------

    This client was built against the latest ATI Stream SDK that 
    was available.  That version was 1.3.0 and marked as a beta by
    AMD/ATI.  There are known problems with this SDK/API at the time
    this was built so every expectation is that newer ones will play
    much nicer with the system.  The client should also be updated and
    tested periodically to make sure it is still compatible.

    On Linux platforms, YOU WILL SEE errors when running the 
    client on a text-mode system without X11 (init level 3 not 5).
    As noted in the Prerequisites section X/Xorg MUST be running for
    the client to work properly.  This can be a headless display, but
    it MUST be running with the fglrx kernel and X/Xorg drivers loaded.

    If you are unable to execute the dnetc binary because of a missing
    "libamdcalrt.so" or "libamdcalcl.so" library, you will need to visit
    the ATI website and download and install the FireStream SDK/Runtime
    libraries.

    If you have an onboard FireStream compatible card such as a Radeon 
    HD 3200 or HD 3300, and an additional stream-capable card, and you
    are seeing massively slow performance, your onboard video is likely
    the main device in your X/Xorg config.  As stated in the Prerequisites 
    section the primary device must be the card you want to use.  As far
    as I can tell, having a CrossFire setup between those two will also 
    break the functionality of the FireStream setup.  This is currently
    a limitation of the libraries from ATI.
    
    The most simple way to fix this, is to enter the BIOS configuration
    of your motherboard and select something other than "Onboard" or 
    "OnChipVGA" or "OVGA", normally this would be "PCI-E".  

    NOTE: This will effectively disable your onboard video!  This will
          also change the PCI device lists in the X/Xorg detection.
          Your x11.conf or xorg.conf will most likely have to be updated
          to reflect the changes.  BE SURE TO MAKE SURE YOUR SYSTEM DOES
          NOT BOOT DIRECTLY INTO X AFTER YOU MAKE THE BIOS CHANGES.  To 
          find the new device use lspci or try to start X.  X will display
          the device number it doesn't know how to use, and you will be
          able to make your changes.  Once you have made those changes,
          use "startx" to test them.  If that works, you may re-enable
          X on start, and then you will need to reboot your system.  Due
          to a bug in the drivers, if you leave X and try to restart it,
          you will be left with a blank screen.  If you know X is running,
          you can hit: ctrl-backspace then ctrl-alt-del right afterwards.
          This will kill X and issue an init 6.

   If you have a non-RPM based system, and need to install the SDK, here 
   are the instructions I have:
   1) Download the SDK.  It should be a gzipped tar.
   2) Untar the SDK.
   3) Two files should exist now: 
      amdstream-brook-{something}.run
      amdstream-cal-{something}.run
   4) You will need to edit these files, vi seems to be safe.
      Inside each file you will see a line that says:
        RPM="rpm -ivh "
      change that to:
        RPM="rpm --nodeps -ivh "
      You will also see a line that says:
        dd if=$0 of=/tmp/${TMP}.tar.gz bs=1 skip=16384 >& /dev/null
      change that to:
        dd if=$0 of=/tmp/${TMP}.tar.gz bs=1 skip=16393 >& /dev/null
   5) What the first part of that does is make sure that "rpm" does 
      not check to see if it is OK to install the RPMs. 
      The second part changes the removal of the binary part of the
      shar.  The offset changed by 9 characters, because be added 9
      characters to the file.
   6) Run each of the two files that you just modified.





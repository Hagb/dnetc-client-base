; this was generated by gcc295 -mcpu=i386 -O2 -unroll-loops,
; the nasm output is op-for-op identical to the original gas output.
;
; although originally -mcpu=i386, this core is slightly faster
; than -mcpu=i686 on a ppro, pII and pIII. It is also slower than
; the core generated by gcc272 -O6 -unroll-loops
; if your compiler can generate faster code please send it to me
; for disassembly.
;
; $Id: ogr-386.asm,v 1.1.2.2 2000/08/18 15:55:30 cyp Exp $

               global ogr_get_dispatch_table, _ogr_get_dispatch_table
               extern ogr_choose_dat

%ifdef __OMF__  ; Watcom/OS/2 and Borland
[SECTION _TEXT CLASS=CODE USE32 FLAT PUBLIC ALIGN=16]
%else
[SECTION .text]
%endif

%define offset
%define ptr
%define memset my_memset

%macro calign 1
  %%szx equ ($ - $$)
  %assign sz  (%%szx & (%1 - 1))
  %if sz != 0
    %assign sz %1 - sz
  %endif
  %assign edinext 0
  %rep %1
    %assign edinext 0 ; always esi only for gas compatibility
    %if sz >= 7
      db 0x8D,0xB4,0x26,0x00,0x00,0x00,0x00  ; lea       esi,[esi]
      %assign sz sz-7
      %assign edinext 1
    %elif sz >= 6 && edinext != 0
      db 0x8d,0xBf,0x00,0x00,0x00,0x00       ; lea       edi,[edi]
      %assign edinext 0
      %assign sz sz-6
    %elif sz >= 6
      db 0x8D,0xB6,0x00,0x00,0x00,0x00       ; lea       esi,[esi]
      %assign edinext 1
      %assign sz sz-6
    %elif sz >= 4   
      db 0x8D,0x74,0x26,0x00                 ; lea       esi,[esi]
      %assign sz sz-4
      %assign edinext 1
    %elif sz >= 3 && edinext != 0
      db 0x8d,0x7f,0x00                      ; lea       edi,[edi]
      %assign sz sz-3
      %assign edinext 0
    %elif sz >= 3
      db 0x8D,0x76,0x00                      ; lea       esi,[esi] 
      %assign sz sz-3
      %assign edinext 1
    %elif sz >= 2 && edinext != 0
      db 0x8d,0x3f                           ; lea       edi,[edi]
      %assign sz sz-2
      %assign edinext 0
    %elif sz >= 2
      db 0x8D,0x36                           ; lea       esi,[esi]     
      %assign sz sz-2
      %assign edinext 1
    %elif sz >= 1
      nop
      %assign sz sz-1
    %else 
      %exitrep
    %endif
  %endrep  
%endmacro

    calign 32
init_load_choose:
    cmp       byte ptr [ogr_choose_dat+0x2],0x0c
    jne       X$1
    xor       eax,eax
    ret       
X$1:
    mov       eax,0xfffffffd
    ret       

    calign 32
found_one:
    sub       esp,0x0000009c
    push      ebp
    push      edi
    push      esi
    push      ebx
    mov       eax,dword ptr [esp+0xb0]
    mov       eax,dword ptr [eax+0x8]
    mov       dword ptr [esp+0x20],eax
    mov       ecx,dword ptr [esp+0xb0]
    mov       ecx,dword ptr [ecx+0xc]
    mov       dword ptr [esp+0x1c],ecx
    add       esp,BYTE -4 ;db 0x83,0xC4,0xFC ; add       esp,0xfffffffc
    push      BYTE 0x78 ;0x00000078
    push      BYTE 0x00 ;0x00000000
    lea       ebx,[esp+0x34]
    push      ebx
    call      near ptr memset
    mov       dword ptr [esp+0x34],0x00000001
    add       esp,BYTE 0x10 ;0x00000010
    mov       eax,dword ptr [esp+0x1c]
    cmp       dword ptr [esp+0x24],eax
    jge       near ptr X$19
    mov       ecx,dword ptr [esp+0xb0]
    add       ecx,BYTE 0x20 ;0x00000020
    mov       dword ptr [esp+0x18],ecx
    mov       eax,dword ptr [esp+0xb0]
    add       eax,BYTE 0x24 ;0x00000024
    mov       dword ptr [esp+0x14],eax
    mov       eax,dword ptr [esp+0x1c]
    dec       eax
    and       eax,BYTE 0x01 ;0x00000001
    cmp       dword ptr [esp+0x1c],BYTE 0x01  ;0x00000001
    jle       X$2
    test      eax,eax
    je        near ptr X$7
X$2:
    mov       ecx,dword ptr [esp+0xb0]
    mov       edi,dword ptr [ecx+0x24]
    xor       esi,esi
    mov       edx,edi
    sub       edx,dword ptr [ecx+0x20]
    jmp       short X$5

    calign 16
X$3:
    add       edx,BYTE -64   ;0xffffffc0
    mov       eax,edx
    and       eax,BYTE 0x07  ;0x00000007
    mov       ebx,0x00000001
    mov       ecx,eax
    shl       ebx,cl
    sar       edx,0x00000003
    lea       edx,[esp+edx+0x28]
    movsx     eax,byte ptr [edx]
    test      ebx,eax
    jne       near ptr X$13
    or        byte ptr [edx],bl
X$4:
    inc       esi
    cmp       esi,dword ptr [esp+0x24]
    jge       X$6
    mov       edx,edi
    mov       eax,dword ptr [esp+0x18]
    sub       edx,dword ptr [eax+esi*4]
X$5:
    lea       eax,[edx+edx]
    cmp       eax,dword ptr [esp+0x20]
    jg        X$4
    cmp       edx,BYTE 0x40 ;0x00000040
    jg        X$3
X$6:
    add       dword ptr [esp+0x14],BYTE 0x04 ;0x00000004
    inc       dword ptr [esp+0x24]
    jmp       near ptr X$18
    jmp       short X$7
    nop       
    nop       
    nop       
    nop       
    nop       
    nop       
    nop       
    nop       
    nop       
    nop       
    nop       
    nop       
    nop       
X$7:
    mov       eax,dword ptr [esp+0x14]
    mov       edi,dword ptr [eax]
    xor       esi,esi
    cmp       esi,dword ptr [esp+0x24]
    jge       X$11
    mov       edx,edi
    mov       ecx,dword ptr [esp+0xb0]
    sub       edx,dword ptr [ecx+0x20]
    jmp       short X$10
    calign 16
X$8:
    add       edx,BYTE -64  ;0xffffffc0
    mov       eax,edx
    and       eax,BYTE 0x07 ;0x00000007
    mov       ebx,0x00000001
    mov       ecx,eax
    shl       ebx,cl
    sar       edx,0x00000003
    lea       edx,[esp+edx+0x28]
    movsx     eax,byte ptr [edx]
    test      ebx,eax
    jne       X$13
    or        byte ptr [edx],bl
X$9:
    inc       esi
    cmp       esi,dword ptr [esp+0x24]
    jge       X$11
    mov       edx,edi
    mov       eax,dword ptr [esp+0x18]
    sub       edx,dword ptr [eax+esi*4]
X$10:
    lea       eax,[edx+edx]
    cmp       eax,dword ptr [esp+0x20]
    jg        X$9
    cmp       edx,BYTE 0x40 ;0x00000040
    jg        X$8
X$11:
    mov       edi,dword ptr [esp+0x24]
    inc       edi
    mov       ecx,dword ptr [esp+0x14]
    mov       ebp,dword ptr [ecx+0x4]
    xor       esi,esi
    cmp       esi,edi
    jge       X$17
    mov       edx,ebp
    mov       eax,dword ptr [esp+0xb0]
    sub       edx,dword ptr [eax+0x20]
    jmp       short X$16
    nop       
X$12:
    add       edx,BYTE -64  ;0xffffffc0
    mov       eax,edx
    and       eax,BYTE 0x07 ;0x00000007
    mov       ebx,0x00000001
    mov       ecx,eax
    shl       ebx,cl
    sar       edx,BYTE 0x03 ;0x00000003
    lea       edx,[esp+edx+0x28]
    movsx     eax,byte ptr [edx]
    test      ebx,eax
    je        X$14
X$13:
    xor       eax,eax
    jmp       short X$20
    nop       
X$14:
    or        byte ptr [edx],bl
X$15:
    inc       esi
    cmp       esi,edi
    jge       X$17
    mov       edx,ebp
    mov       eax,dword ptr [esp+0x18]
    sub       edx,dword ptr [eax+esi*4]
X$16:
    lea       eax,[edx+edx]
    cmp       eax,dword ptr [esp+0x20]
    jg        X$15
    cmp       edx,BYTE 0x40 ;0x00000040
    jg        X$12
X$17:
    add       dword ptr [esp+0x14],BYTE 0x08 ;0x00000008
    add       dword ptr [esp+0x24],BYTE 0x02 ;0x00000002
X$18:
    mov       ecx,dword ptr [esp+0x1c]
    cmp       dword ptr [esp+0x24],ecx
    jl        near ptr X$7
X$19:
    mov       eax,0x00000001
X$20:
    pop       ebx
    pop       esi
    pop       edi
    pop       ebp
    add       esp,0x9c ;0x0000009c
    ret       
    nop       
    nop       
    nop       
    nop       
    nop       
    nop       
    nop       
    nop       
    nop       
    nop       
    nop       
    nop       
    nop       
    nop       
    nop       
    nop       
    nop       
    nop       
    nop       
    nop       
    nop       
    nop       
ogr_init:
    sub       esp,BYTE 0x0c ;0x0000000c
    call      near ptr init_load_choose
    test      eax,eax
    jne       X$21
    xor       eax,eax
X$21:
    add       esp,BYTE 0x0c ;0x0000000c
    ret       

    calign 32
ogr_create:
    sub       esp,BYTE 0x3c ;0x0000003c
    push      ebp
    push      edi
    push      esi
    push      ebx
    cmp       dword ptr [esp+0x50],BYTE 0x00 ;0x00000000
    je        near ptr X$26
    cmp       dword ptr [esp+0x54],BYTE 0x1c ;0x0000001c
    jne       near ptr X$26
    cmp       dword ptr [esp+0x5c],0x00000c0f
    jbe       near ptr X$26
    cmp       dword ptr [esp+0x58],BYTE 0x00 ;0x00000000
    jne       X$22
    mov       eax,0xffffffff
    jmp       near ptr X$43
X$22:
    add       esp,BYTE -4 ;0xfffffffc
    push      dword 0x00000c10
    push      byte 0x00 ;0x00000000
    mov       eax,dword ptr [esp+0x64]
    push      eax
    call      near ptr memset
    mov       edx,dword ptr [esp+0x60]
    movzx     ebx,word ptr [edx]
    mov       ecx,dword ptr [esp+0x68]
    mov       dword ptr [ecx+0xc],ebx
    lea       edx,[ebx-0x1]
    mov       dword ptr [ecx+0x10],edx
    add       esp,BYTE 0x10 ;0x00000010
    cmp       ebx,BYTE 0x1d ;0x0000001d
    ja        X$26
    mov       eax,offset OGR
    mov       edx,dword ptr [eax+edx*4]
    mov       esi,dword ptr [esp+0x58]
    mov       dword ptr [esi+0x8],edx
    lea       ecx,[ebx+0x1]
    db 0xc1,0xf9,0x01 ;sar       ecx,0x00000001 (not db 0xd1,0xf8)
    lea       edx,[ecx-0x1]
    mov       dword ptr [esi+0x18],edx
    mov       dword ptr [esi+0x1c],edx
    test      bl,0x01
    jne       X$23
    mov       dword ptr [esi+0x1c],ecx
X$23:
    mov       ebp,dword ptr [esp+0x58]
    dec       dword ptr [ebp+0x18]
    inc       dword ptr [ebp+0x1c]
    mov       edx,dword ptr [ebp+0x8]
    lea       eax,[edx-0x4]
    db 0xc1,0xf8,0x01  ;sar       eax,0x00000001 (not 0xd1,0xf8)
    mov       dword ptr [ebp+0x14],eax
    test      byte ptr [ebp+0xc],0x01
    jne       X$24
    lea       eax,[edx-0x7]
    db 0xc1,0xf8,0x01  ;sar       eax,0x00000001 (not 0xd1,0xf8)
    mov       dword ptr [ebp+0x14],eax
X$24:
    mov       eax,dword ptr [esp+0x58]
    mov       dword ptr [eax+0xc8],0x00000001
    mov       edx,dword ptr [esp+0x50]
    mov       edx,dword ptr [edx+0x18]
    mov       dword ptr [esp+0x3c],edx
    mov       ecx,dword ptr [esp+0x50]
    movzx     eax,word ptr [ecx+0x2]
    cmp       edx,eax
    jge       X$25
    mov       dword ptr [esp+0x3c],eax
X$25:
    cmp       dword ptr [esp+0x3c],BYTE 0x0a ;0x0000000a
    jle       X$27
X$26:
    mov       eax,0xfffffffd
    jmp       near ptr X$43
    calign 4
X$27:
    mov       edi,dword ptr [esp+0x58]
    add       edi,0x00000118
    xor       esi,esi
    cmp       esi,dword ptr [esp+0x3c]
    jge       near ptr X$42
    calign 16
X$28:
    mov       ebx,dword ptr [esp+0x58]
    mov       edx,dword ptr [ebx+0xc8]
    cmp       edx,dword ptr [ebx+0x1c]
    jg        X$32
    mov       ebx,dword ptr [ebx+0x18]
    cmp       edx,ebx
    jg        X$30
    mov       ebp,dword ptr [esp+0x58]
    mov       eax,dword ptr [ebp+0x10]
    sub       eax,edx
    mov       eax,dword ptr [eax*4+OGR]
    mov       ecx,dword ptr [ebp+0x8]
    sub       ecx,eax
    mov       eax,dword ptr [ebp+0x14]
    cmp       eax,ecx
    jle       X$29
    mov       eax,ecx
X$29:
    mov       ecx,eax
    jmp       short X$33
X$30:
    mov       eax,dword ptr [edi+0x14]
    shr       eax,0x00000014
    lea       eax,[eax+eax*2]
    mov       ecx,dword ptr [esp+0x58]
    mov       ebp,dword ptr [ecx+0x10]
    sub       ebp,edx
    mov       edx,ebp
    lea       eax,[edx+eax*4+0x3]
    movzx     edx,byte ptr [eax+ogr_choose_dat]
    mov       eax,dword ptr [ecx+0x8]
    mov       ecx,eax
    sub       ecx,edx
    mov       edx,dword ptr [esp+0x58]
    add       edx,BYTE 0x20 ;0x00000020
    sub       eax,dword ptr [edx+ebx*4]
    dec       eax
    cmp       eax,ecx
    jle       X$31
    mov       eax,ecx
X$31:
    mov       ecx,eax
    jmp       short X$34
    calign 4       
X$32:
    mov       eax,dword ptr [edi+0x14]
    shr       eax,BYTE 0x14 ;0x00000014
    lea       eax,[eax+eax*2]
    mov       ecx,dword ptr [esp+0x58]
    mov       ebx,dword ptr [ecx+0x10]
    sub       ebx,edx
    mov       edx,ebx
    lea       eax,[edx+eax*4+0x3]
    movzx     eax,byte ptr [eax+ogr_choose_dat]
    mov       ecx,dword ptr [ecx+0x8]
    sub       ecx,eax
X$33:
    mov       edx,dword ptr [esp+0x58]
    add       edx,BYTE 0x20 ;0x00000020
X$34:
    mov       dword ptr [edi+0x44],ecx
    mov       eax,dword ptr [esp+0x50]
    add       eax,BYTE 0x04 ;0x00000004
    movzx     ebp,word ptr [eax+esi*2]
    mov       dword ptr [esp+0x38],ebp
    lea       eax,[esi+0x1]
    mov       ecx,ebp
    add       ecx,dword ptr [edx+esi*4]
    mov       dword ptr [edx+eax*4],ecx
    add       dword ptr [edi+0x40],ebp
    mov       ebx,dword ptr [esp+0x38]
    mov       dword ptr [esp+0x34],eax
    lea       esi,[edi+0x48]
    mov       dword ptr [esp+0x30],esi
    cmp       ebp,BYTE 0x1f ;0x0000001f
    jle       near ptr X$39
    mov       edx,dword ptr [edi+0x2c]
    mov       ebp,dword ptr [edi+0x30]
    mov       dword ptr [esp+0x28],ebp
    mov       eax,dword ptr [edi+0x34]
    mov       dword ptr [esp+0x24],eax
    mov       ebp,dword ptr [edi+0x38]
    mov       ecx,dword ptr [edi+0xc]
    mov       dword ptr [esp+0x20],ecx
    mov       esi,dword ptr [edi+0x8]
    mov       dword ptr [esp+0x1c],esi
    mov       esi,dword ptr [edi+0x4]
    mov       ecx,dword ptr [edi]
    mov       eax,0x0000001f
    sub       eax,ebx
    and       eax,BYTE 0x7f ;0x0000007f
    je        near ptr X$37
    cmp       eax,BYTE 0x60 ;0x00000060
    jge       X$36
    cmp       eax,BYTE 0x40 ;0x00000040
    jge       X$35
    cmp       eax,BYTE 0x1f ;0x0000001f
    jle       near ptr X$37
    mov       eax,dword ptr [esp+0x24]
    mov       dword ptr [esp+0x28],eax
    mov       dword ptr [esp+0x24],ebp
    xor       ebp,ebp
    mov       dword ptr [esp+0x1c],esi
    mov       esi,ecx
    xor       ecx,ecx
    add       ebx,BYTE -32 ;0xffffffe0
X$35:
    mov       edx,dword ptr [esp+0x28]
    mov       eax,dword ptr [esp+0x24]
    mov       dword ptr [esp+0x28],eax
    mov       dword ptr [esp+0x24],ebp
    xor       ebp,ebp
    mov       eax,dword ptr [esp+0x1c]
    mov       dword ptr [esp+0x20],eax
    mov       dword ptr [esp+0x1c],esi
    mov       esi,ecx
    xor       ecx,ecx
    add       ebx,BYTE -32 ;0xffffffe0
X$36:
    mov       dword ptr [esp+0x2c],edx
    mov       edx,dword ptr [esp+0x28]
    mov       eax,dword ptr [esp+0x24]
    mov       dword ptr [esp+0x28],eax
    mov       dword ptr [esp+0x24],ebp
    xor       ebp,ebp
    mov       eax,dword ptr [esp+0x20]
    mov       dword ptr [esp+0x18],eax
    mov       eax,dword ptr [esp+0x1c]
    mov       dword ptr [esp+0x20],eax
    mov       dword ptr [esp+0x1c],esi
    mov       esi,ecx
    xor       ecx,ecx
    add       ebx,BYTE -32  ;0xffffffe0
    cmp       ebx,BYTE 0x1f ;0x0000001f
    jle       X$38
    calign 16
X$37:
    mov       dword ptr [esp+0x2c],ebp
    xor       edx,edx
    mov       dword ptr [esp+0x28],edx
    mov       dword ptr [esp+0x24],edx
    mov       ebp,edx
    mov       dword ptr [esp+0x18],ecx
    mov       dword ptr [esp+0x20],edx
    mov       dword ptr [esp+0x1c],edx
    mov       esi,edx
    mov       ecx,edx
    add       ebx,BYTE -128 ;0xffffff80
    cmp       ebx,BYTE 0x1f ;0x0000001f
    jg        X$37
X$38:
    mov       dword ptr [edi],ecx
    mov       dword ptr [edi+0x4],esi
    mov       ecx,dword ptr [esp+0x1c]
    mov       dword ptr [edi+0x8],ecx
    mov       esi,dword ptr [esp+0x18]
    mov       dword ptr [edi+0x10],esi
    mov       eax,dword ptr [esp+0x20]
    mov       dword ptr [edi+0xc],eax
    mov       dword ptr [edi+0x38],ebp
    mov       ecx,dword ptr [esp+0x24]
    mov       dword ptr [edi+0x34],ecx
    mov       esi,dword ptr [esp+0x28]
    mov       dword ptr [edi+0x30],esi
    mov       ebp,dword ptr [esp+0x2c]
    mov       dword ptr [edi+0x28],ebp
    mov       dword ptr [edi+0x2c],edx
X$39:
    test      ebx,ebx
    jle       near ptr X$40
    mov       esi,0x00000020
    sub       esi,ebx
    mov       ebp,dword ptr [edi+0x28]
    mov       ecx,ebx
    shl       ebp,cl
    mov       edx,dword ptr [edi+0x2c]
    mov       eax,edx
    mov       ecx,esi
    shr       eax,cl
    or        ebp,eax
    mov       dword ptr [edi+0x28],ebp
    mov       ecx,ebx
    shl       edx,cl
    mov       ebp,dword ptr [edi+0x30]
    mov       eax,ebp
    mov       ecx,esi
    shr       eax,cl
    or        edx,eax
    mov       dword ptr [edi+0x2c],edx
    mov       ecx,ebx
    shl       ebp,cl
    mov       edx,dword ptr [edi+0x34]
    mov       eax,edx
    mov       ecx,esi
    shr       eax,cl
    or        ebp,eax
    mov       dword ptr [edi+0x30],ebp
    mov       ecx,ebx
    shl       edx,cl
    mov       ebp,dword ptr [edi+0x38]
    mov       eax,ebp
    mov       ecx,esi
    shr       eax,cl
    or        edx,eax
    mov       dword ptr [edi+0x34],edx
    mov       ecx,ebx
    shl       ebp,cl
    mov       dword ptr [edi+0x38],ebp
    mov       ebp,dword ptr [edi+0x10]
    shr       ebp,cl
    mov       edx,dword ptr [edi+0xc]
    mov       eax,edx
    mov       ecx,esi
    shl       eax,cl
    or        ebp,eax
    mov       dword ptr [edi+0x10],ebp
    mov       ecx,ebx
    shr       edx,cl
    mov       ebp,dword ptr [edi+0x8]
    mov       eax,ebp
    mov       ecx,esi
    shl       eax,cl
    or        edx,eax
    mov       dword ptr [edi+0xc],edx
    mov       ecx,ebx
    shr       ebp,cl
    mov       edx,dword ptr [edi+0x4]
    mov       eax,edx
    mov       ecx,esi
    shl       eax,cl
    or        ebp,eax
    mov       dword ptr [edi+0x8],ebp
    mov       ecx,ebx
    shr       edx,cl
    mov       ebp,dword ptr [edi]
    mov       eax,ebp
    mov       ecx,esi
    shl       eax,cl
    or        edx,eax
    mov       dword ptr [edi+0x4],edx
    mov       ecx,ebx
    shr       ebp,cl
    mov       dword ptr [edi],ebp
X$40:
    mov       eax,dword ptr [edi]
    mov       dword ptr [edi+0x48],eax
    mov       eax,dword ptr [edi+0x4]
    mov       dword ptr [edi+0x4c],eax
    mov       eax,dword ptr [edi+0x8]
    mov       dword ptr [edi+0x50],eax
    mov       eax,dword ptr [edi+0xc]
    mov       dword ptr [edi+0x54],eax
    mov       eax,dword ptr [edi+0x10]
    mov       dword ptr [edi+0x58],eax
    cmp       dword ptr [esp+0x38],0x000000a0
    jg        X$41
    mov       edx,dword ptr [esp+0x38]
    dec       edx
    mov       ecx,edx
    and       ecx,BYTE 0x1f ;0x0000001f
    mov       eax,0x80000000
    shr       eax,cl
    sar       edx,0x00000005
    mov       ebx,dword ptr [esp+0x30]
    or        dword ptr [ebx+edx*4],eax
X$41:
    mov       esi,dword ptr [edi+0x14]
    or        esi,dword ptr [edi+0x48]
    mov       dword ptr [edi+0x5c],esi
    mov       ebx,dword ptr [edi+0x18]
    or        ebx,dword ptr [edi+0x4c]
    mov       dword ptr [edi+0x60],ebx
    mov       ecx,dword ptr [edi+0x1c]
    or        ecx,dword ptr [edi+0x50]
    mov       dword ptr [edi+0x64],ecx
    mov       edx,dword ptr [edi+0x20]
    or        edx,dword ptr [edi+0x54]
    mov       dword ptr [edi+0x68],edx
    mov       eax,dword ptr [edi+0x24]
    or        eax,dword ptr [edi+0x58]
    mov       dword ptr [edi+0x6c],eax
    or        esi,dword ptr [edi+0x28]
    mov       dword ptr [edi+0x70],esi
    or        ebx,dword ptr [edi+0x2c]
    mov       dword ptr [edi+0x74],ebx
    or        ecx,dword ptr [edi+0x30]
    mov       dword ptr [edi+0x78],ecx
    or        edx,dword ptr [edi+0x34]
    mov       dword ptr [edi+0x7c],edx
    or        eax,dword ptr [edi+0x38]
    mov       dword ptr [edi+0x80],eax
    mov       eax,dword ptr [edi+0x40]
    mov       dword ptr [edi+0x84],eax
    mov       dword ptr [edi+0x88],eax
    mov       edi,dword ptr [esp+0x30]
    mov       esi,dword ptr [esp+0x58]
    inc       dword ptr [esi+0xc8]
    mov       esi,dword ptr [esp+0x34]
    cmp       esi,dword ptr [esp+0x3c]
    jl        near ptr X$28
X$42:
    mov       ebp,dword ptr [esp+0x58]
    dec       dword ptr [ebp+0xc8]
    mov       edx,dword ptr [esp+0x50]
    movzx     eax,word ptr [edx+0x2]
    mov       dword ptr [ebp+0xc4],eax
    xor       eax,eax
X$43:
    pop       ebx
    pop       esi
    pop       edi
    pop       ebp
    add       esp,BYTE 0x3c ;0x0000003c
    ret       


    calign 32
ogr_cycle:
    sub       esp,BYTE 0x2c ;0x0000002c
    push      ebp
    push      edi
    push      esi
    push      ebx
    mov       eax,dword ptr [esp+0x40]
    mov       ecx,dword ptr [eax+0xc8]
    lea       edx,[ecx+0x1]
    mov       dword ptr [esp+0x28],edx
    lea       eax,[edx+edx*8]
    mov       ebx,dword ptr [esp+0x40]
    lea       edi,[ebx+eax*8+0xd0]
    mov       dword ptr [esp+0x24],0x00000000
    mov       eax,dword ptr [esp+0x44]
    mov       eax,dword ptr [eax]
    mov       dword ptr [esp+0x20],eax
    mov       dword ptr [esp+0x1c],0x00000001
    mov       edx,ebx
    add       edx,BYTE 0x20 ;0x00000020
    mov       eax,dword ptr [edi+0x40]
    mov       dword ptr [edx+ecx*4],eax
    mov       edx,dword ptr [esp+0x28]
    cmp       edx,dword ptr [ebx+0x1c]
    jg        near ptr X$47
    mov       ecx,dword ptr [ebx+0x18]
    cmp       edx,ecx
    jg        X$45
    mov       ecx,dword ptr [esp+0x20]
    cmp       dword ptr [esp+0x24],ecx
    jge       near ptr X$58
    calign 16
X$44:
    mov       ebx,dword ptr [esp+0x40]
    mov       eax,dword ptr [ebx+0x10]
    sub       eax,dword ptr [esp+0x28]
    mov       eax,dword ptr [eax*4+OGR]
    mov       edx,dword ptr [ebx+0x8]
    sub       edx,eax
    mov       dword ptr [esp+0x18],edx
    mov       eax,dword ptr [ebx+0x14]
    cmp       eax,edx
    jle       X$46
    mov       eax,edx
    jmp       short X$46
    calign 4
X$45:
    mov       eax,dword ptr [edi+0x14]
    shr       eax,0x00000014
    lea       eax,[eax+eax*2]
    mov       ebx,dword ptr [esp+0x40]
    mov       edx,dword ptr [ebx+0x10]
    sub       edx,dword ptr [esp+0x28]
    movzx     eax,byte ptr [edx+eax*4+ogr_choose_dat+0x3]
    mov       edx,dword ptr [ebx+0x8]
    mov       dword ptr [esp+0x18],edx
    sub       dword ptr [esp+0x18],eax
    mov       eax,ebx
    add       eax,BYTE 0x20 ;0x00000020
    sub       edx,dword ptr [eax+ecx*4]
    lea       eax,[edx-0x1]
    cmp       eax,dword ptr [esp+0x18]
    jle       X$46
    mov       eax,dword ptr [esp+0x18]
X$46:
    mov       dword ptr [esp+0x18],eax
    jmp       short X$48
    calign 4
X$47:
    mov       eax,dword ptr [edi+0x14]
    shr       eax,0x00000014
    lea       eax,[eax+eax*2]
    mov       ecx,dword ptr [esp+0x40]
    mov       edx,dword ptr [ecx+0x10]
    sub       edx,dword ptr [esp+0x28]
    movzx     eax,byte ptr [edx+eax*4+ogr_choose_dat+0x3]
    mov       ebx,dword ptr [ecx+0x8]
    sub       ebx,eax
    mov       dword ptr [esp+0x18],ebx
X$48:
    inc       dword ptr [esp+0x24]
X$49:
    mov       esi,dword ptr [edi+0x28]
    cmp       esi,BYTE -3 ;0xfffffffd
    ja        near ptr X$51
    mov       eax,esi
    not       eax
    mov       ebx,0x00000021
    bsr       eax,eax
    je        X$50
    sub       ebx,eax
    dec       ebx
X$50:
    mov       ecx,ebx
    add       ecx,dword ptr [edi+0x40]
    mov       dword ptr [edi+0x40],ecx
    cmp       ecx,dword ptr [esp+0x18]
    jg        near ptr X$55
    mov       ebp,0x00000020
    sub       ebp,ebx
    mov       ecx,ebx
    shl       esi,cl
    mov       edx,dword ptr [edi+0x2c]
    mov       eax,edx
    mov       ecx,ebp
    shr       eax,cl
    or        esi,eax
    mov       dword ptr [edi+0x28],esi
    mov       ecx,ebx
    shl       edx,cl
    mov       esi,dword ptr [edi+0x30]
    mov       eax,esi
    mov       ecx,ebp
    shr       eax,cl
    or        edx,eax
    mov       dword ptr [edi+0x2c],edx
    mov       ecx,ebx
    shl       esi,cl
    mov       edx,dword ptr [edi+0x34]
    mov       eax,edx
    mov       ecx,ebp
    shr       eax,cl
    or        esi,eax
    mov       dword ptr [edi+0x30],esi
    mov       ecx,ebx
    shl       edx,cl
    mov       esi,dword ptr [edi+0x38]
    mov       eax,esi
    mov       ecx,ebp
    shr       eax,cl
    or        edx,eax
    mov       dword ptr [edi+0x34],edx
    mov       ecx,ebx
    shl       esi,cl
    mov       dword ptr [edi+0x38],esi
    mov       esi,dword ptr [edi+0x10]
    shr       esi,cl
    mov       edx,dword ptr [edi+0xc]
    mov       eax,edx
    mov       ecx,ebp
    shl       eax,cl
    or        esi,eax
    mov       dword ptr [edi+0x10],esi
    mov       ecx,ebx
    shr       edx,cl
    mov       esi,dword ptr [edi+0x8]
    mov       eax,esi
    mov       ecx,ebp
    shl       eax,cl
    or        edx,eax
    mov       dword ptr [edi+0xc],edx
    mov       ecx,ebx
    shr       esi,cl
    mov       edx,dword ptr [edi+0x4]
    mov       eax,edx
    mov       ecx,ebp
    shl       eax,cl
    or        esi,eax
    mov       dword ptr [edi+0x8],esi
    mov       ecx,ebx
    shr       edx,cl
    mov       esi,dword ptr [edi]
    mov       eax,esi
    mov       ecx,ebp
    shl       eax,cl
    or        edx,eax
    mov       dword ptr [edi+0x4],edx
    mov       ecx,ebx
    shr       esi,cl
    mov       dword ptr [edi],esi
    jmp       short X$52
    calign 4
X$51:
    mov       eax,dword ptr [edi+0x40]
    add       eax,BYTE 0x20 ;0x00000020
    mov       dword ptr [edi+0x40],eax
    cmp       eax,dword ptr [esp+0x18]
    jg        near ptr X$55
    mov       eax,dword ptr [edi+0x2c]
    mov       dword ptr [edi+0x28],eax
    mov       eax,dword ptr [edi+0x30]
    mov       dword ptr [edi+0x2c],eax
    mov       eax,dword ptr [edi+0x34]
    mov       dword ptr [edi+0x30],eax
    mov       eax,dword ptr [edi+0x38]
    mov       dword ptr [edi+0x34],eax
    mov       dword ptr [edi+0x38],0x00000000
    mov       eax,dword ptr [edi+0xc]
    mov       dword ptr [edi+0x10],eax
    mov       eax,dword ptr [edi+0x8]
    mov       dword ptr [edi+0xc],eax
    mov       eax,dword ptr [edi+0x4]
    mov       dword ptr [edi+0x8],eax
    mov       eax,dword ptr [edi]
    mov       dword ptr [edi+0x4],eax
    mov       dword ptr [edi],0x00000000
    cmp       esi,BYTE -1 ;0xffffffff
    je        near ptr X$49
X$52:
    mov       ebx,dword ptr [esp+0x28]
    mov       eax,dword ptr [esp+0x40]
    cmp       ebx,dword ptr [eax+0x10]
    jne       X$53
    mov       edx,eax
    add       edx,BYTE 0x20 ;0x00000020
    mov       eax,dword ptr [edi+0x40]
    mov       dword ptr [edx+ebx*4],eax
    add       esp,BYTE -12 ;0xfffffff4
    mov       edx,dword ptr [esp+0x4c]
    push      edx
    call      near ptr found_one
    add       esp,BYTE 0x10 ;0x00000010
    test      eax,eax
    je        near ptr X$49
    mov       dword ptr [esp+0x1c],0x00000002
    jmp       near ptr X$58
    calign 4
X$53:
    lea       ebp,[edi+0x48]
    mov       eax,dword ptr [edi+0x3c]
    mov       edx,dword ptr [edi+0x40]
    sub       edx,eax
    mov       eax,dword ptr [edi]
    mov       dword ptr [edi+0x48],eax
    mov       eax,dword ptr [edi+0x4]
    mov       dword ptr [edi+0x4c],eax
    mov       eax,dword ptr [edi+0x8]
    mov       dword ptr [edi+0x50],eax
    mov       eax,dword ptr [edi+0xc]
    mov       dword ptr [edi+0x54],eax
    mov       eax,dword ptr [edi+0x10]
    mov       dword ptr [edi+0x58],eax
    cmp       edx,0x000000a0
    jg        X$54
    dec       edx
    mov       ecx,edx
    and       ecx,BYTE 0x1f ;0x0000001f
    mov       eax,0x80000000
    shr       eax,cl
    db 0xC1,0xFA,0x05 ;sar       edx,0x00000005
    or        dword ptr [ebp+edx*4],eax
X$54:
    mov       esi,dword ptr [edi+0x14]
    or        esi,dword ptr [edi+0x48]
    mov       dword ptr [edi+0x5c],esi
    mov       ebx,dword ptr [edi+0x18]
    or        ebx,dword ptr [edi+0x4c]
    mov       dword ptr [edi+0x60],ebx
    mov       ecx,dword ptr [edi+0x1c]
    or        ecx,dword ptr [edi+0x50]
    mov       dword ptr [edi+0x64],ecx
    mov       edx,dword ptr [edi+0x20]
    or        edx,dword ptr [edi+0x54]
    mov       dword ptr [edi+0x68],edx
    mov       eax,dword ptr [edi+0x24]
    or        eax,dword ptr [edi+0x58]
    mov       dword ptr [edi+0x6c],eax
    or        esi,dword ptr [edi+0x28]
    mov       dword ptr [edi+0x70],esi
    or        ebx,dword ptr [edi+0x2c]
    mov       dword ptr [edi+0x74],ebx
    or        ecx,dword ptr [edi+0x30]
    mov       dword ptr [edi+0x78],ecx
    or        edx,dword ptr [edi+0x34]
    mov       dword ptr [edi+0x7c],edx
    or        eax,dword ptr [edi+0x38]
    mov       dword ptr [edi+0x80],eax
    mov       eax,dword ptr [edi+0x40]
    mov       dword ptr [edi+0x84],eax
    mov       dword ptr [edi+0x88],eax
    mov       ecx,dword ptr [esp+0x18]
    mov       dword ptr [edi+0x44],ecx
    mov       edi,ebp
    inc       dword ptr [esp+0x28]
    jmp       short X$57
X$55:
    add       edi,BYTE -72 ;0xffffffb8
    dec       dword ptr [esp+0x28]
    mov       ebx,dword ptr [esp+0x28]
    mov       eax,dword ptr [esp+0x40]
    cmp       ebx,dword ptr [eax+0xc4]
    jg        X$56
    mov       dword ptr [esp+0x1c],0x00000000
    jmp       short X$58
    calign 4
X$56:
    mov       edx,dword ptr [edi+0x44]
    mov       dword ptr [esp+0x18],edx
    jmp       near ptr X$49
X$57:
    mov       eax,dword ptr [ebp+0x40]
    mov       ecx,dword ptr [esp+0x28]
    mov       ebx,dword ptr [esp+0x40]
    mov       dword ptr [ebx+ecx*4+0x1c],eax
    cmp       ecx,dword ptr [ebx+0x1c]
    jg        near ptr X$47
    mov       eax,dword ptr [ebx+0x18]
    mov       ecx,eax
    cmp       dword ptr [esp+0x28],ecx
    jg        near ptr X$45
    mov       eax,dword ptr [esp+0x20]
    cmp       dword ptr [esp+0x24],eax
    jl        near ptr X$44
X$58:
    fild      dword ptr [esp+0x24]
    mov       edx,dword ptr [esp+0x40]
    fadd      qword ptr [edx]
    fstp      qword ptr [edx]
    mov       ecx,dword ptr [esp+0x28]
    dec       ecx
    mov       dword ptr [edx+0xc8],ecx
    mov       eax,dword ptr [esp+0x24]
    mov       ebx,dword ptr [esp+0x44]
    mov       dword ptr [ebx],eax
    mov       eax,dword ptr [esp+0x1c]
    pop       ebx
    pop       esi
    pop       edi
    pop       ebp
    add       esp,BYTE 0x2c ;0x0000002c
    ret       

    calign 32
ogr_getresult:
    push      ebp
    push      edi
    push      esi
    push      ebx
    mov       edi,dword ptr [esp+0x18]
    cmp       dword ptr [esp+0x1c],BYTE 0x1c ;0x0000001c
    je        X$59
    mov       eax,0xfffffffd
    jmp       near ptr X$62
    calign 4
X$59:
    mov       edx,dword ptr [esp+0x14]
    movzx     eax,word ptr [edx+0xc]
    mov       word ptr [edi],ax
    movzx     eax,word ptr [edx+0xc4]
    mov       word ptr [edi+0x2],ax
    lea       esi,[edi+0x4]
    mov       ecx,edx
    add       ecx,BYTE 0x20 ;0x00000020
    mov       ebx,0x00000001
    calign 16 ; only one nop anyway
X$60:
    movzx     eax,word ptr [ecx+ebx*4-0x4]
    movzx     ebp,word ptr [ecx+ebx*4]
    sub       ebp,eax
    mov       word ptr [esi+ebx*2-0x2],bp
    movzx     eax,word ptr [ecx+ebx*4+0x4]
    sub       ax,word ptr [ecx+ebx*4]
    mov       word ptr [esi+ebx*2],ax
    movzx     eax,word ptr [ecx+ebx*4+0x8]
    sub       ax,word ptr [ecx+ebx*4+0x4]
    mov       word ptr [esi+ebx*2+0x2],ax
    movzx     eax,word ptr [ecx+ebx*4+0xc]
    sub       ax,word ptr [ecx+ebx*4+0x8]
    mov       word ptr [esi+ebx*2+0x4],ax
    lea       edx,[ebx+0x4]
    movzx     eax,word ptr [ecx+edx*4-0x4]
    movzx     ebp,word ptr [ecx+edx*4]
    sub       ebp,eax
    mov       word ptr [esi+edx*2-0x2],bp
    add       ebx,BYTE 0x05 ;0x00000005
    cmp       edx,BYTE 0x09 ;0x00000009
    jle       X$60
    mov       edx,dword ptr [esp+0x14]
    mov       eax,dword ptr [edx+0xc8]
    mov       dword ptr [edi+0x18],eax
    cmp       eax,BYTE 0x0A ;0x0000000a
    jbe       X$61
    mov       dword ptr [edi+0x18],0x0000000a
X$61:
    xor       eax,eax
X$62:
    pop       ebx
    pop       esi
    pop       edi
    pop       ebp
    ret       

    ;---------------- end of bit compatible area -------------

    calign 32
ogr_destroy:
ogr_cleanup:
    xor       eax,eax
    ret       

    align 32

_dispatch_table:
    dd offset ogr_init
    dd offset ogr_create
    dd offset ogr_cycle
    dd offset ogr_getresult
    dd offset ogr_destroy
    dd offset ogr_cleanup
    dd 0,0

    align 32

ogr_get_dispatch_table:
    mov       eax,offset _dispatch_table
    ret

my_memset:
    push       edi
    push       ebx
    mov        edi, [esp+0xc]
    movzx eax, BYTE [esp+0x10] ;0f b6 44 24 10
    mov        ecx, [esp+0x14]
    push       edi
    cld              
    cmp        ecx, 15
    jle        short .here
    mov        ah,al
    mov        edx,eax
    shl        eax,16
    mov        ax,dx
    mov        edx,edi
    neg        edx
    and        edx,3
    mov        ebx,ecx
    sub        ebx,edx
    mov        ecx,edx
    repz       stosb
    mov        ecx,ebx
    shr        ecx,2
    repz       stosd
    mov        ecx,ebx
    and        ecx,3
.here:
    repz stosb
    pop        eax
    pop        ebx
    pop        edi
    ret              

    ;--------------------------------------------------
    calign 32
OGR:
    db  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
    db  0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00
    db  0x0b, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00
    db  0x19, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00

    db  0x2c, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00
    db  0x48, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00
    db  0x6a, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00
    db  0x97, 0x00, 0x00, 0x00, 0xb1, 0x00, 0x00, 0x00

    db  0xc7, 0x00, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00
    db  0xf6, 0x00, 0x00, 0x00, 0x1b, 0x01, 0x00, 0x00
    db  0x4d, 0x01, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00
    db  0x74, 0x01, 0x00, 0x00, 0xa9, 0x01, 0x00, 0x00

    db  0xe0, 0x01, 0x00, 0x00, 0xec, 0x01, 0x00, 0x00
    db  0x29, 0x02, 0x00, 0x00, 0x49, 0x02, 0x00, 0x00
    db  0x6f, 0x02, 0x00, 0x00    ,0,0,0,0
    db  0,0,0,0, 0,0,0,0
    ;-------------------------------------------------
